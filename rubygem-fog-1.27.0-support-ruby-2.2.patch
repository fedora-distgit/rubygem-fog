From 698a3f15339a25891d2086816a32998350a48946 Mon Sep 17 00:00:00 2001
From: Josef Stribny <jstribny@redhat.com>
Date: Mon, 9 Mar 2015 10:35:24 +0100
Subject: [PATCH] Support Ruby 2.2

---
 lib/fog/aws/models/auto_scaling/activities.rb          |  4 ++--
 lib/fog/aws/models/auto_scaling/groups.rb              |  4 ++--
 lib/fog/aws/models/auto_scaling/policies.rb            |  4 ++--
 lib/fog/aws/models/compute/addresses.rb                | 10 +++++-----
 lib/fog/aws/models/compute/dhcp_options.rb             | 10 +++++-----
 lib/fog/aws/models/compute/images.rb                   |  4 ++--
 lib/fog/aws/models/compute/internet_gateways.rb        | 10 +++++-----
 lib/fog/aws/models/compute/key_pairs.rb                | 10 +++++-----
 lib/fog/aws/models/compute/network_acls.rb             |  4 ++--
 lib/fog/aws/models/compute/network_interfaces.rb       |  4 ++--
 lib/fog/aws/models/compute/route_tables.rb             | 10 +++++-----
 lib/fog/aws/models/compute/security_groups.rb          | 10 +++++-----
 lib/fog/aws/models/compute/servers.rb                  | 10 +++++-----
 lib/fog/aws/models/compute/snapshots.rb                | 10 +++++-----
 lib/fog/aws/models/compute/spot_requests.rb            |  2 +-
 lib/fog/aws/models/compute/subnets.rb                  | 10 +++++-----
 lib/fog/aws/models/compute/tags.rb                     |  4 ++--
 lib/fog/aws/models/compute/volumes.rb                  | 10 +++++-----
 lib/fog/aws/models/compute/vpcs.rb                     | 10 +++++-----
 lib/fog/aws/models/glacier/jobs.rb                     |  2 +-
 lib/fog/aws/models/rds/instance_options.rb             |  8 ++++----
 lib/fog/aws/models/rds/parameters.rb                   |  4 ++--
 lib/fog/aws/models/rds/security_groups.rb              |  4 ++--
 lib/fog/aws/models/rds/snapshots.rb                    | 12 ++++++------
 lib/fog/hp/models/block_storage_v2/snapshots.rb        |  6 +++---
 lib/fog/hp/models/block_storage_v2/volume_backups.rb   |  6 +++---
 lib/fog/hp/models/block_storage_v2/volumes.rb          |  6 +++---
 lib/fog/hp/models/compute_v2/flavors.rb                |  4 ++--
 lib/fog/hp/models/compute_v2/images.rb                 |  4 ++--
 lib/fog/hp/models/compute_v2/servers.rb                |  6 +++---
 lib/fog/hp/models/network/floating_ips.rb              |  4 ++--
 lib/fog/hp/models/network/networks.rb                  |  4 ++--
 lib/fog/hp/models/network/ports.rb                     |  4 ++--
 lib/fog/hp/models/network/routers.rb                   |  4 ++--
 lib/fog/hp/models/network/security_group_rules.rb      |  4 ++--
 lib/fog/hp/models/network/security_groups.rb           |  4 ++--
 lib/fog/hp/models/network/subnets.rb                   |  4 ++--
 lib/fog/libvirt/models/compute/server.rb               | 18 +++++++++---------
 lib/fog/openstack/models/compute/images.rb             |  4 ++--
 lib/fog/openstack/models/compute/servers.rb            |  4 ++--
 lib/fog/openstack/models/network/floating_ips.rb       |  4 ++--
 lib/fog/openstack/models/network/lb_health_monitors.rb |  4 ++--
 lib/fog/openstack/models/network/lb_members.rb         |  4 ++--
 lib/fog/openstack/models/network/lb_pools.rb           |  4 ++--
 lib/fog/openstack/models/network/lb_vips.rb            |  4 ++--
 lib/fog/openstack/models/network/networks.rb           |  4 ++--
 lib/fog/openstack/models/network/ports.rb              |  4 ++--
 lib/fog/openstack/models/network/routers.rb            |  4 ++--
 .../openstack/models/network/security_group_rules.rb   |  4 ++--
 lib/fog/openstack/models/network/security_groups.rb    |  4 ++--
 lib/fog/openstack/models/network/subnets.rb            |  4 ++--
 51 files changed, 150 insertions(+), 150 deletions(-)

diff --git a/lib/fog/aws/models/auto_scaling/activities.rb b/lib/fog/aws/models/auto_scaling/activities.rb
index 32c548f..9521b14 100644
--- a/lib/fog/aws/models/auto_scaling/activities.rb
+++ b/lib/fog/aws/models/auto_scaling/activities.rb
@@ -14,10 +14,10 @@ module Fog
           super(attributes)
         end
 
-        def all(filters = filters)
+        def all(filters_arg = filters)
           data = []
           next_token = nil
-          self.filters = filters
+          filters = filters_arg
           loop do
             result = service.describe_scaling_activities(filters.merge('NextToken' => next_token)).body['DescribeScalingActivitiesResult']
             data += result['Activities']
diff --git a/lib/fog/aws/models/auto_scaling/groups.rb b/lib/fog/aws/models/auto_scaling/groups.rb
index 49cbf3e..d62bd34 100644
--- a/lib/fog/aws/models/auto_scaling/groups.rb
+++ b/lib/fog/aws/models/auto_scaling/groups.rb
@@ -14,10 +14,10 @@ module Fog
           super
         end
 
-        def all(filters = filters)
+        def all(filters_arg = filters)
           data = []
           next_token = nil
-          self.filters = filters
+          filters = filters_arg
           loop do
             result = service.describe_auto_scaling_groups(filters.merge('NextToken' => next_token)).body['DescribeAutoScalingGroupsResult']
             data += result['AutoScalingGroups']
diff --git a/lib/fog/aws/models/auto_scaling/policies.rb b/lib/fog/aws/models/auto_scaling/policies.rb
index 39bbc51..64cbfdb 100644
--- a/lib/fog/aws/models/auto_scaling/policies.rb
+++ b/lib/fog/aws/models/auto_scaling/policies.rb
@@ -14,10 +14,10 @@ module Fog
           super(attributes)
         end
 
-        def all(filters = filters)
+        def all(filters_arg = filters)
           data = []
           next_token = nil
-          self.filters = filters
+          filters = filters_arg
           loop do
             result = service.describe_policies(filters.merge('NextToken' => next_token)).body['DescribePoliciesResult']
             data += result['ScalingPolicies']
diff --git a/lib/fog/aws/models/compute/addresses.rb b/lib/fog/aws/models/compute/addresses.rb
index e54622d..79907f9 100644
--- a/lib/fog/aws/models/compute/addresses.rb
+++ b/lib/fog/aws/models/compute/addresses.rb
@@ -52,12 +52,12 @@ module Fog
         #  >
         #>>
 
-        def all(filters = filters)
-          unless filters.is_a?(Hash)
-            Fog::Logger.deprecation("all with #{filters.class} param is deprecated, use all('public-ip' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'public-ip' => [*filters]}
+        def all(filters_arg = filters)
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.deprecation("all with #{filters_arg.class} param is deprecated, use all('public-ip' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'public-ip' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_addresses(filters).body
           load(
             data['addressesSet'].map do |address|
diff --git a/lib/fog/aws/models/compute/dhcp_options.rb b/lib/fog/aws/models/compute/dhcp_options.rb
index 8ed4e7e..da89502 100644
--- a/lib/fog/aws/models/compute/dhcp_options.rb
+++ b/lib/fog/aws/models/compute/dhcp_options.rb
@@ -51,12 +51,12 @@ module Fog
         #>
         #
 
-        def all(filters = filters)
-          unless filters.is_a?(Hash)
-            Fog::Logger.warning("all with #{filters.class} param is deprecated, use all('internet-gateway-id' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'dhcp-options-id' => [*filters]}
+        def all(filters_arg = filters)
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.warning("all with #{filters_arg.class} param is deprecated, use all('internet-gateway-id' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'dhcp-options-id' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_dhcp_options(filters).body
           load(data['dhcpOptionsSet'])
         end
diff --git a/lib/fog/aws/models/compute/images.rb b/lib/fog/aws/models/compute/images.rb
index 8a3d16a..ddaf1ae 100644
--- a/lib/fog/aws/models/compute/images.rb
+++ b/lib/fog/aws/models/compute/images.rb
@@ -42,8 +42,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           data = service.describe_images(filters).body
           load(data['imagesSet'])
         end
diff --git a/lib/fog/aws/models/compute/internet_gateways.rb b/lib/fog/aws/models/compute/internet_gateways.rb
index 1f2d2ca..802716a 100644
--- a/lib/fog/aws/models/compute/internet_gateways.rb
+++ b/lib/fog/aws/models/compute/internet_gateways.rb
@@ -51,12 +51,12 @@ module Fog
         #>
         #
 
-        def all(filters = filters)
-          unless filters.is_a?(Hash)
-            Fog::Logger.warning("all with #{filters.class} param is deprecated, use all('internet-gateway-id' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'internet-gateway-id' => [*filters]}
+        def all(filters_arg = filters)
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.warning("all with #{filters_arg.class} param is deprecated, use all('internet-gateway-id' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'internet-gateway-id' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_internet_gateways(filters).body
           load(data['internetGatewaySet'])
         end
diff --git a/lib/fog/aws/models/compute/key_pairs.rb b/lib/fog/aws/models/compute/key_pairs.rb
index b189b4f..186429a 100644
--- a/lib/fog/aws/models/compute/key_pairs.rb
+++ b/lib/fog/aws/models/compute/key_pairs.rb
@@ -47,12 +47,12 @@ module Fog
         #>
         #
 
-        def all(filters = filters)
-          unless filters.is_a?(Hash)
-            Fog::Logger.deprecation("all with #{filters.class} param is deprecated, use all('key-name' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'key-name' => [*filters]}
+        def all(filters_arg = filters)
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.deprecation("all with #{filters_arg.class} param is deprecated, use all('key-name' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'key-name' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_key_pairs(filters).body
           load(data['keySet'])
         end
diff --git a/lib/fog/aws/models/compute/network_acls.rb b/lib/fog/aws/models/compute/network_acls.rb
index 7176680..6264919 100644
--- a/lib/fog/aws/models/compute/network_acls.rb
+++ b/lib/fog/aws/models/compute/network_acls.rb
@@ -79,8 +79,8 @@ module Fog
         #    ]
         #  >
         #
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           data = service.describe_network_acls(filters).body
           load(data['networkAclSet'])
         end
diff --git a/lib/fog/aws/models/compute/network_interfaces.rb b/lib/fog/aws/models/compute/network_interfaces.rb
index f998bc9..80ead12 100644
--- a/lib/fog/aws/models/compute/network_interfaces.rb
+++ b/lib/fog/aws/models/compute/network_interfaces.rb
@@ -84,8 +84,8 @@ module Fog
         #  >
         #
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           data = service.describe_network_interfaces(filters).body
           load(data['networkInterfaceSet'])
         end
diff --git a/lib/fog/aws/models/compute/route_tables.rb b/lib/fog/aws/models/compute/route_tables.rb
index a792d0e..7e3d2c0 100755
--- a/lib/fog/aws/models/compute/route_tables.rb
+++ b/lib/fog/aws/models/compute/route_tables.rb
@@ -52,12 +52,12 @@ module Fog
         # >
         #
 
-        def all(filters = filters)
-          unless filters.is_a?(Hash)
-            Fog::Logger.warning("all with #{filters.class} param is deprecated, use all('route-table-id' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'route-table-id' => [*filters]}
+        def all(filters_arg = filters)
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.warning("all with #{filters_arg.class} param is deprecated, use all('route-table-id' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'route-table-id' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_route_tables(filters).body
           load(data['routeTableSet'])
         end
diff --git a/lib/fog/aws/models/compute/security_groups.rb b/lib/fog/aws/models/compute/security_groups.rb
index 36dfd98..ee2bcfd 100644
--- a/lib/fog/aws/models/compute/security_groups.rb
+++ b/lib/fog/aws/models/compute/security_groups.rb
@@ -55,12 +55,12 @@ module Fog
         #  >
         #
 
-        def all(filters = filters)
-          unless filters.is_a?(Hash)
-            Fog::Logger.deprecation("all with #{filters.class} param is deprecated, use all('group-name' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'group-name' => [*filters]}
+        def all(filters_arg = filters)
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.deprecation("all with #{filters_arg.class} param is deprecated, use all('group-name' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'group-name' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_security_groups(filters).body
           load(data['securityGroupInfo'])
         end
diff --git a/lib/fog/aws/models/compute/servers.rb b/lib/fog/aws/models/compute/servers.rb
index 41c00a8..4e7f000 100644
--- a/lib/fog/aws/models/compute/servers.rb
+++ b/lib/fog/aws/models/compute/servers.rb
@@ -54,12 +54,12 @@ module Fog
           super
         end
 
-        def all(filters = self.filters)
-          unless filters.is_a?(Hash)
-            Fog::Logger.deprecation("all with #{filters.class} param is deprecated, use all('instance-id' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'instance-id' => [*filters]}
+        def all(filters_arg = filters)
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.deprecation("all with #{filters_arg.class} param is deprecated, use all('instance-id' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'instance-id' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_instances(filters).body
           load(
             data['reservationSet'].map do |reservation|
diff --git a/lib/fog/aws/models/compute/snapshots.rb b/lib/fog/aws/models/compute/snapshots.rb
index e3d3e7e..9a131ae 100644
--- a/lib/fog/aws/models/compute/snapshots.rb
+++ b/lib/fog/aws/models/compute/snapshots.rb
@@ -15,12 +15,12 @@ module Fog
           super
         end
 
-        def all(filters = filters, options = {})
-          unless filters.is_a?(Hash)
-            Fog::Logger.deprecation("all with #{filters.class} param is deprecated, use all('snapshot-id' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'snapshot-id' => [*filters]}
+        def all(filters_arg = filters, options = {})
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.deprecation("all with #{filters_arg.class} param is deprecated, use all('snapshot-id' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'snapshot-id' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_snapshots(filters.merge!(options)).body
           load(data['snapshotSet'])
           if volume
diff --git a/lib/fog/aws/models/compute/spot_requests.rb b/lib/fog/aws/models/compute/spot_requests.rb
index 21fe0a1..7673d76 100644
--- a/lib/fog/aws/models/compute/spot_requests.rb
+++ b/lib/fog/aws/models/compute/spot_requests.rb
@@ -19,7 +19,7 @@ module Fog
             Fog::Logger.deprecation("all with #{filters.class} param is deprecated, use all('spot-instance-request-id' => []) instead [light_black](#{caller.first})[/]")
             filters = {'spot-instance-request-id' => [*filters]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_spot_instance_requests(filters).body
           load(
             data['spotInstanceRequestSet'].map do |spot_instance_request|
diff --git a/lib/fog/aws/models/compute/subnets.rb b/lib/fog/aws/models/compute/subnets.rb
index cc7fb74..80f2e35 100644
--- a/lib/fog/aws/models/compute/subnets.rb
+++ b/lib/fog/aws/models/compute/subnets.rb
@@ -55,12 +55,12 @@ module Fog
         # >
         #
 
-        def all(filters = filters)
-          unless filters.is_a?(Hash)
-            Fog::Logger.warning("all with #{filters.class} param is deprecated, use all('subnet-id' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'subnet-id' => [*filters]}
+        def all(filters_arg = filters)
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.warning("all with #{filters_arg.class} param is deprecated, use all('subnet-id' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'subnet-id' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_subnets(filters).body
           load(data['subnetSet'])
         end
diff --git a/lib/fog/aws/models/compute/tags.rb b/lib/fog/aws/models/compute/tags.rb
index 4574da5..1f98274 100644
--- a/lib/fog/aws/models/compute/tags.rb
+++ b/lib/fog/aws/models/compute/tags.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           data = service.describe_tags(filters).body
           load(data['tagSet'])
         end
diff --git a/lib/fog/aws/models/compute/volumes.rb b/lib/fog/aws/models/compute/volumes.rb
index bb47b4a..73c990a 100644
--- a/lib/fog/aws/models/compute/volumes.rb
+++ b/lib/fog/aws/models/compute/volumes.rb
@@ -60,12 +60,12 @@ module Fog
         # The volume can be retrieved by running AWS.volumes.get("vol-1e2028b9").  See get method below.
         #
 
-        def all(filters = filters)
-          unless filters.is_a?(Hash)
-            Fog::Logger.deprecation("all with #{filters.class} param is deprecated, use all('volume-id' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'volume-id' => [*filters]}
+        def all(filters_arg = filters)
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.deprecation("all with #{filters_arg.class} param is deprecated, use all('volume-id' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'volume-id' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_volumes(filters).body
           load(data['volumeSet'])
           if server
diff --git a/lib/fog/aws/models/compute/vpcs.rb b/lib/fog/aws/models/compute/vpcs.rb
index da17710..625fcf3 100644
--- a/lib/fog/aws/models/compute/vpcs.rb
+++ b/lib/fog/aws/models/compute/vpcs.rb
@@ -53,12 +53,12 @@ module Fog
         # >
         #
 
-        def all(filters = filters)
-          unless filters.is_a?(Hash)
-            Fog::Logger.warning("all with #{filters.class} param is deprecated, use all('vpc-id' => []) instead [light_black](#{caller.first})[/]")
-            filters = {'vpc-id' => [*filters]}
+        def all(filters_arg = filters)
+          unless filters_arg.is_a?(Hash)
+            Fog::Logger.warning("all with #{filters_arg.class} param is deprecated, use all('vpc-id' => []) instead [light_black](#{caller.first})[/]")
+            filters_arg = {'vpc-id' => [*filters_arg]}
           end
-          self.filters = filters
+          filters = filters_arg
           data = service.describe_vpcs(filters).body
           load(data['vpcSet'])
         end
diff --git a/lib/fog/aws/models/glacier/jobs.rb b/lib/fog/aws/models/glacier/jobs.rb
index 724b8a3..2fb8f59 100644
--- a/lib/fog/aws/models/glacier/jobs.rb
+++ b/lib/fog/aws/models/glacier/jobs.rb
@@ -18,7 +18,7 @@ module Fog
         # statuscode InProgress/Failed/Succeeded
         # completed (true/false)
         def all(filters = self.filters)
-          self.filters = filters
+          filters = filters_arg
           data = service.list_jobs(vault.id, self.filters).body['JobList']
           load(data)
         end
diff --git a/lib/fog/aws/models/rds/instance_options.rb b/lib/fog/aws/models/rds/instance_options.rb
index 12b3a32..1e6c3d4 100644
--- a/lib/fog/aws/models/rds/instance_options.rb
+++ b/lib/fog/aws/models/rds/instance_options.rb
@@ -15,11 +15,11 @@ module Fog
         end
 
         # This method deliberately returns only a single page of results
-        def all(filters=filters)
-          self.filters.merge!(filters)
+        def all(filters_arg = filters)
+          filters.merge!(filters_arg)
 
-          result = service.describe_orderable_db_instance_options(engine, self.filters).body['DescribeOrderableDBInstanceOptionsResult']
-          self.filters[:marker] = result['Marker']
+          result = service.describe_orderable_db_instance_options(engine, filters).body['DescribeOrderableDBInstanceOptionsResult']
+          filters[:marker] = result['Marker']
           load(result['OrderableDBInstanceOptions'])
         end
       end
diff --git a/lib/fog/aws/models/rds/parameters.rb b/lib/fog/aws/models/rds/parameters.rb
index c6a5e35..bded209 100644
--- a/lib/fog/aws/models/rds/parameters.rb
+++ b/lib/fog/aws/models/rds/parameters.rb
@@ -17,8 +17,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           result = []
           marker = nil
           finished = false
diff --git a/lib/fog/aws/models/rds/security_groups.rb b/lib/fog/aws/models/rds/security_groups.rb
index 1992356..13e74e2 100644
--- a/lib/fog/aws/models/rds/security_groups.rb
+++ b/lib/fog/aws/models/rds/security_groups.rb
@@ -17,8 +17,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           data = service.describe_db_security_groups(filters).body['DescribeDBSecurityGroupsResult']['DBSecurityGroups']
           load(data) # data is an array of attribute hashes
         end
diff --git a/lib/fog/aws/models/rds/snapshots.rb b/lib/fog/aws/models/rds/snapshots.rb
index 3d6a187..d059d06 100644
--- a/lib/fog/aws/models/rds/snapshots.rb
+++ b/lib/fog/aws/models/rds/snapshots.rb
@@ -28,19 +28,19 @@ module Fog
         # It is arguably incorrect for the method not to return all snapshots, particularly considering the
         # implementation in the corresponding 'elb' files. But this implementation has been released, and
         # backwards-compatibility requires leaving it as implemented.
-        def all(filters = filters)
-          self.filters.merge!(filters)
+        def all(filters_arg = filters)
+          filters.merge!(filters_arg)
 
-          page = service.describe_db_snapshots(self.filters).body['DescribeDBSnapshotsResult']
-          self.filters[:marker] = page['Marker']
+          page = service.describe_db_snapshots(filters).body['DescribeDBSnapshotsResult']
+          filters[:marker] = page['Marker']
           load(page['DBSnapshots'])
         end
 
         # This will execute a block for each snapshot, fetching new pages of snapshots as required.
-        def each(filters = filters)
+        def each(filters_arg = filters)
           if block_given?
             begin
-              page = self.all(filters)
+              page = self.all(filters_arg)
               # We need to explicitly use the base 'each' method here on the page, otherwise we get infinite recursion
               base_each = Fog::Collection.instance_method(:each)
               base_each.bind(page).call { |snapshot| yield snapshot }
diff --git a/lib/fog/hp/models/block_storage_v2/snapshots.rb b/lib/fog/hp/models/block_storage_v2/snapshots.rb
index 423d17d..798c7f0 100644
--- a/lib/fog/hp/models/block_storage_v2/snapshots.rb
+++ b/lib/fog/hp/models/block_storage_v2/snapshots.rb
@@ -14,9 +14,9 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          details = filters.delete(:details)
-          self.filters = filters
+        def all(filters_arg = filters)
+          details = filters_arg.delete(:details)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           if details
             data = service.list_snapshots_detail(non_aliased_filters).body['snapshots']
diff --git a/lib/fog/hp/models/block_storage_v2/volume_backups.rb b/lib/fog/hp/models/block_storage_v2/volume_backups.rb
index 22949ad..7aaf0dc 100644
--- a/lib/fog/hp/models/block_storage_v2/volume_backups.rb
+++ b/lib/fog/hp/models/block_storage_v2/volume_backups.rb
@@ -14,9 +14,9 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          details = filters.delete(:details)
-          self.filters = filters
+        def all(filters_arg = filters)
+          details = filters_arg.delete(:details)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           if details
             data = service.list_volume_backups_detail(non_aliased_filters).body['backups']
diff --git a/lib/fog/hp/models/block_storage_v2/volumes.rb b/lib/fog/hp/models/block_storage_v2/volumes.rb
index 6ec4729..25cbbd3 100644
--- a/lib/fog/hp/models/block_storage_v2/volumes.rb
+++ b/lib/fog/hp/models/block_storage_v2/volumes.rb
@@ -14,9 +14,9 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          details = filters.delete(:details)
-          self.filters = filters
+        def all(filters_arg = filters)
+          details = filters_arg.delete(:details)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           if details
             data = service.list_volumes_detail(non_aliased_filters).body['volumes']
diff --git a/lib/fog/hp/models/compute_v2/flavors.rb b/lib/fog/hp/models/compute_v2/flavors.rb
index 1e87a51..1d92a9c 100644
--- a/lib/fog/hp/models/compute_v2/flavors.rb
+++ b/lib/fog/hp/models/compute_v2/flavors.rb
@@ -14,9 +14,9 @@ module Fog
           super
         end
 
-        def all(filters = filters)
+        def all(filters_arg = filters)
           details = filters.delete(:details)
-          self.filters = filters
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           if details
             data = service.list_flavors_detail(non_aliased_filters).body['flavors']
diff --git a/lib/fog/hp/models/compute_v2/images.rb b/lib/fog/hp/models/compute_v2/images.rb
index 6423883..97c9200 100644
--- a/lib/fog/hp/models/compute_v2/images.rb
+++ b/lib/fog/hp/models/compute_v2/images.rb
@@ -14,9 +14,9 @@ module Fog
           super
         end
 
-        def all(filters = filters)
+        def all(filters_arg = filters)
           details = filters.delete(:details)
-          self.filters = filters
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           if details
             data = service.list_images_detail(non_aliased_filters).body['images']
diff --git a/lib/fog/hp/models/compute_v2/servers.rb b/lib/fog/hp/models/compute_v2/servers.rb
index 7150df2..e7aaa25 100644
--- a/lib/fog/hp/models/compute_v2/servers.rb
+++ b/lib/fog/hp/models/compute_v2/servers.rb
@@ -14,9 +14,9 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          details = filters.delete(:details)
-          self.filters = filters
+        def all(filters_arg = filters)
+          details = filters_arg.delete(:details)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           if details
             data = service.list_servers_detail(non_aliased_filters).body['servers']
diff --git a/lib/fog/hp/models/network/floating_ips.rb b/lib/fog/hp/models/network/floating_ips.rb
index 872096e..16e7983 100644
--- a/lib/fog/hp/models/network/floating_ips.rb
+++ b/lib/fog/hp/models/network/floating_ips.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           load(service.list_floating_ips(non_aliased_filters).body['floatingips'])
         end
diff --git a/lib/fog/hp/models/network/networks.rb b/lib/fog/hp/models/network/networks.rb
index 976da9f..f485de7 100644
--- a/lib/fog/hp/models/network/networks.rb
+++ b/lib/fog/hp/models/network/networks.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           load(service.list_networks(non_aliased_filters).body['networks'])
         end
diff --git a/lib/fog/hp/models/network/ports.rb b/lib/fog/hp/models/network/ports.rb
index d2399a4..ed5b669 100644
--- a/lib/fog/hp/models/network/ports.rb
+++ b/lib/fog/hp/models/network/ports.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           load(service.list_ports(non_aliased_filters).body['ports'])
         end
diff --git a/lib/fog/hp/models/network/routers.rb b/lib/fog/hp/models/network/routers.rb
index 89b8192..a144d65 100644
--- a/lib/fog/hp/models/network/routers.rb
+++ b/lib/fog/hp/models/network/routers.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           load(service.list_routers(non_aliased_filters).body['routers'])
         end
diff --git a/lib/fog/hp/models/network/security_group_rules.rb b/lib/fog/hp/models/network/security_group_rules.rb
index ecdebf6..d1e17e4 100644
--- a/lib/fog/hp/models/network/security_group_rules.rb
+++ b/lib/fog/hp/models/network/security_group_rules.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           load(service.list_security_group_rules(non_aliased_filters).body['security_group_rules'])
         end
diff --git a/lib/fog/hp/models/network/security_groups.rb b/lib/fog/hp/models/network/security_groups.rb
index 76b8647..6472c92 100644
--- a/lib/fog/hp/models/network/security_groups.rb
+++ b/lib/fog/hp/models/network/security_groups.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           load(service.list_security_groups(non_aliased_filters).body['security_groups'])
         end
diff --git a/lib/fog/hp/models/network/subnets.rb b/lib/fog/hp/models/network/subnets.rb
index a305a77..4fa16a8 100644
--- a/lib/fog/hp/models/network/subnets.rb
+++ b/lib/fog/hp/models/network/subnets.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           non_aliased_filters = Fog::HP.convert_aliased_attributes_to_original(self.model, filters)
           load(service.list_subnets(non_aliased_filters).body['subnets'])
         end
diff --git a/lib/fog/libvirt/models/compute/server.rb b/lib/fog/libvirt/models/compute/server.rb
index 43e95df..1aefa52 100644
--- a/lib/fog/libvirt/models/compute/server.rb
+++ b/lib/fog/libvirt/models/compute/server.rb
@@ -212,32 +212,32 @@ module Fog
         # It returns an array of public and private ip addresses
         # Currently only one ip address is returned, but in the future this could be multiple
         # if the server has multiple network interface
-        def addresses(service=service, options={})
+        def addresses(service_arg=service, options={})
           mac=self.mac
 
           # Aug 24 17:34:41 juno arpwatch: new station 10.247.4.137 52:54:00:88:5a:0a eth0.4
           # Aug 24 17:37:19 juno arpwatch: changed ethernet address 10.247.4.137 52:54:00:27:33:00 (52:54:00:88:5a:0a) eth0.4
           # Check if another ip_command string was provided
-          ip_command_global=service.ip_command.nil? ? 'grep $mac /var/log/arpwatch.log|sed -e "s/new station//"|sed -e "s/changed ethernet address//g" |sed -e "s/reused old ethernet //" |tail -1 |cut -d ":" -f 4-| cut -d " " -f 3' : service.ip_command
+          ip_command_global=service_arg.ip_command.nil? ? 'grep $mac /var/log/arpwatch.log|sed -e "s/new station//"|sed -e "s/changed ethernet address//g" |sed -e "s/reused old ethernet //" |tail -1 |cut -d ":" -f 4-| cut -d " " -f 3' : service_arg.ip_command
           ip_command_local=options[:ip_command].nil? ? ip_command_global : options[:ip_command]
 
           ip_command="mac=#{mac}; server_name=#{name}; "+ip_command_local
 
           ip_address=nil
 
-          if service.uri.ssh_enabled?
+          if service_arg.uri.ssh_enabled?
 
             # Retrieve the parts we need from the service to setup our ssh options
-            user=service.uri.user #could be nil
-            host=service.uri.host
-            keyfile=service.uri.keyfile
-            port=service.uri.port
+            user=service_arg.uri.user #could be nil
+            host=service_arg.uri.host
+            keyfile=service_arg.uri.keyfile
+            port=service_arg.uri.port
 
             # Setup the options
             ssh_options={}
             ssh_options[:keys]=[ keyfile ] unless keyfile.nil?
             ssh_options[:port]=port unless keyfile.nil?
-            ssh_options[:paranoid]=true if service.uri.no_verify?
+            ssh_options[:paranoid]=true if service_arg.uri.no_verify?
 
             begin
               result=Fog::SSH.new(host, user, ssh_options).run(ip_command)
@@ -257,7 +257,7 @@ module Fog
 
           else
             # It's not ssh enabled, so we assume it is
-            if service.uri.transport=="tls"
+            if service_arg.uri.transport=="tls"
               raise Fog::Errors::Error.new("TlS remote transport is not currently supported, only ssh")
             end
 
diff --git a/lib/fog/openstack/models/compute/images.rb b/lib/fog/openstack/models/compute/images.rb
index 1ffc3ab..4c44f8c 100644
--- a/lib/fog/openstack/models/compute/images.rb
+++ b/lib/fog/openstack/models/compute/images.rb
@@ -16,8 +16,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           data = service.list_images_detail(filters).body['images']
           images = load(data)
           if server
diff --git a/lib/fog/openstack/models/compute/servers.rb b/lib/fog/openstack/models/compute/servers.rb
index 7e111e9..36c9102 100644
--- a/lib/fog/openstack/models/compute/servers.rb
+++ b/lib/fog/openstack/models/compute/servers.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           data = service.list_servers_detail(filters).body['servers']
           load(data)
         end
diff --git a/lib/fog/openstack/models/network/floating_ips.rb b/lib/fog/openstack/models/network/floating_ips.rb
index e27e322..ecc54e0 100644
--- a/lib/fog/openstack/models/network/floating_ips.rb
+++ b/lib/fog/openstack/models/network/floating_ips.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_floating_ips(filters).body['floatingips'])
         end
 
diff --git a/lib/fog/openstack/models/network/lb_health_monitors.rb b/lib/fog/openstack/models/network/lb_health_monitors.rb
index d30faa8..4be5af8 100644
--- a/lib/fog/openstack/models/network/lb_health_monitors.rb
+++ b/lib/fog/openstack/models/network/lb_health_monitors.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_lb_health_monitors(filters).body['health_monitors'])
         end
 
diff --git a/lib/fog/openstack/models/network/lb_members.rb b/lib/fog/openstack/models/network/lb_members.rb
index 76e9a42..011129a 100644
--- a/lib/fog/openstack/models/network/lb_members.rb
+++ b/lib/fog/openstack/models/network/lb_members.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_lb_members(filters).body['members'])
         end
 
diff --git a/lib/fog/openstack/models/network/lb_pools.rb b/lib/fog/openstack/models/network/lb_pools.rb
index 1c5b555..1730eb4 100644
--- a/lib/fog/openstack/models/network/lb_pools.rb
+++ b/lib/fog/openstack/models/network/lb_pools.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_lb_pools(filters).body['pools'])
         end
 
diff --git a/lib/fog/openstack/models/network/lb_vips.rb b/lib/fog/openstack/models/network/lb_vips.rb
index 984408d..66ff167 100644
--- a/lib/fog/openstack/models/network/lb_vips.rb
+++ b/lib/fog/openstack/models/network/lb_vips.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_lb_vips(filters).body['vips'])
         end
 
diff --git a/lib/fog/openstack/models/network/networks.rb b/lib/fog/openstack/models/network/networks.rb
index a3045aa..e6dfee5 100644
--- a/lib/fog/openstack/models/network/networks.rb
+++ b/lib/fog/openstack/models/network/networks.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_networks(filters).body['networks'])
         end
 
diff --git a/lib/fog/openstack/models/network/ports.rb b/lib/fog/openstack/models/network/ports.rb
index 03e1028..b65aa8e 100644
--- a/lib/fog/openstack/models/network/ports.rb
+++ b/lib/fog/openstack/models/network/ports.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_ports(filters).body['ports'])
         end
 
diff --git a/lib/fog/openstack/models/network/routers.rb b/lib/fog/openstack/models/network/routers.rb
index 0933529..a12aa7b 100644
--- a/lib/fog/openstack/models/network/routers.rb
+++ b/lib/fog/openstack/models/network/routers.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_routers(filters).body['routers'])
         end
 
diff --git a/lib/fog/openstack/models/network/security_group_rules.rb b/lib/fog/openstack/models/network/security_group_rules.rb
index b9bb557..2855583 100644
--- a/lib/fog/openstack/models/network/security_group_rules.rb
+++ b/lib/fog/openstack/models/network/security_group_rules.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_security_group_rules(filters).body['security_group_rules'])
         end
 
diff --git a/lib/fog/openstack/models/network/security_groups.rb b/lib/fog/openstack/models/network/security_groups.rb
index 52fbcbd..bc7982d 100644
--- a/lib/fog/openstack/models/network/security_groups.rb
+++ b/lib/fog/openstack/models/network/security_groups.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_security_groups(filters).body['security_groups'])
         end
 
diff --git a/lib/fog/openstack/models/network/subnets.rb b/lib/fog/openstack/models/network/subnets.rb
index 2d36b07..5bff837 100644
--- a/lib/fog/openstack/models/network/subnets.rb
+++ b/lib/fog/openstack/models/network/subnets.rb
@@ -14,8 +14,8 @@ module Fog
           super
         end
 
-        def all(filters = filters)
-          self.filters = filters
+        def all(filters_arg = filters)
+          filters = filters_arg
           load(service.list_subnets(filters).body['subnets'])
         end
 
-- 
2.1.0

