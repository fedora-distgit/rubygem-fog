From 78da8fcccbddee01baae58ccafcda196b3545bfd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?V=C3=ADt=20Ondruch?= <vondruch@redhat.com>
Date: Tue, 13 Sep 2016 12:06:14 +0200
Subject: [PATCH] Drop 'hp' test cases.

---
 tests/hp/block_storage_tests.rb                    |  47 --------
 tests/hp/cdn_tests.rb                              |  23 ----
 tests/hp/compute_tests.rb                          |  22 ----
 .../models/block_storage/bootable_volume_tests.rb  |  23 ----
 tests/hp/models/block_storage/snapshot_tests.rb    |  23 ----
 tests/hp/models/block_storage/volume_tests.rb      |  21 ----
 tests/hp/models/block_storage_v2/snapshot_tests.rb |  22 ----
 .../hp/models/block_storage_v2/snapshots_tests.rb  |  10 --
 .../models/block_storage_v2/volume_backup_tests.rb |  22 ----
 .../block_storage_v2/volume_backups_tests.rb       |   9 --
 tests/hp/models/block_storage_v2/volume_tests.rb   |  22 ----
 tests/hp/models/block_storage_v2/volumes_tests.rb  |   5 -
 tests/hp/models/compute/address_tests.rb           |  18 ---
 tests/hp/models/compute/addresses_tests.rb         |   5 -
 tests/hp/models/compute/key_pair_tests.rb          |  26 ----
 tests/hp/models/compute/key_pairs_tests.rb         |   5 -
 tests/hp/models/compute/metadata_image_tests.rb    |  60 ----------
 tests/hp/models/compute/metadata_server_tests.rb   |  54 ---------
 tests/hp/models/compute/security_group_tests.rb    |  38 ------
 tests/hp/models/compute/security_groups_tests.rb   |   5 -
 tests/hp/models/compute_v2/address_tests.rb        |  23 ----
 tests/hp/models/compute_v2/addresses_tests.rb      |   7 --
 .../models/compute_v2/availability_zone_tests.rb   |  11 --
 .../models/compute_v2/availability_zones_tests.rb  |  13 --
 tests/hp/models/compute_v2/key_pair_tests.rb       |  28 -----
 tests/hp/models/compute_v2/key_pairs_tests.rb      |   7 --
 tests/hp/models/compute_v2/metadata_image_tests.rb |  60 ----------
 .../hp/models/compute_v2/metadata_server_tests.rb  |  56 ---------
 tests/hp/models/compute_v2/server_tests.rb         |  45 -------
 tests/hp/models/compute_v2/servers_tests.rb        |   9 --
 .../models/compute_v2/volume_attachment_tests.rb   |  40 -------
 .../models/compute_v2/volume_attachments_tests.rb  |  17 ---
 tests/hp/models/dns/domain_tests.rb                |  25 ----
 tests/hp/models/dns/domains_tests.rb               |  14 ---
 tests/hp/models/dns/record_tests.rb                |  29 -----
 tests/hp/models/dns/records_tests.rb               |   9 --
 tests/hp/models/lb/algorithms_tests.rb             |  15 ---
 tests/hp/models/lb/load_balancer_node_tests.rb     |   9 --
 tests/hp/models/lb/load_balancer_nodes_tests.rb    |  27 -----
 tests/hp/models/lb/load_balancer_tests.rb          |   6 -
 .../models/lb/load_balancer_virtual_ips_tests.rb   |  22 ----
 tests/hp/models/lb/load_balancers_tests.rb         |  22 ----
 tests/hp/models/lb/protocols_tests.rb              |  15 ---
 tests/hp/models/network/floating_ip_tests.rb       |  37 ------
 tests/hp/models/network/floating_ips_tests.rb      |   8 --
 tests/hp/models/network/network_tests.rb           |  25 ----
 tests/hp/models/network/networks_tests.rb          |  15 ---
 tests/hp/models/network/port_tests.rb              |  30 -----
 tests/hp/models/network/ports_tests.rb             |  21 ----
 tests/hp/models/network/router_tests.rb            |  55 ---------
 tests/hp/models/network/routers_tests.rb           |  19 ---
 .../hp/models/network/security_group_rule_tests.rb |  25 ----
 .../models/network/security_group_rules_tests.rb   |  23 ----
 tests/hp/models/network/security_group_tests.rb    |  20 ----
 tests/hp/models/network/security_groups_tests.rb   |  20 ----
 tests/hp/models/network/subnet_tests.rb            |  30 -----
 tests/hp/models/network/subnets_tests.rb           |  22 ----
 tests/hp/models/storage/directories_tests.rb       |  23 ----
 tests/hp/models/storage/directory_tests.rb         | 131 ---------------------
 tests/hp/models/storage/file_tests.rb              |  44 -------
 tests/hp/models/storage/files_tests.rb             |  38 ------
 .../block_storage/bootable_volume_tests.rb         |  78 ------------
 tests/hp/requests/block_storage/snapshot_tests.rb  |  56 ---------
 tests/hp/requests/block_storage/volume_tests.rb    |  94 ---------------
 .../hp/requests/block_storage_v2/snapshot_tests.rb |  69 -----------
 .../block_storage_v2/volume_backup_tests.rb        | 117 ------------------
 tests/hp/requests/block_storage_v2/volume_tests.rb | 106 -----------------
 tests/hp/requests/cdn/container_tests.rb           |  56 ---------
 tests/hp/requests/compute/address_tests.rb         |  72 -----------
 tests/hp/requests/compute/flavor_tests.rb          |  45 -------
 tests/hp/requests/compute/image_tests.rb           |  79 -------------
 tests/hp/requests/compute/key_pair_tests.rb        |  65 ----------
 tests/hp/requests/compute/metadata_tests.rb        |  70 -----------
 .../hp/requests/compute/persistent_server_tests.rb |  66 -----------
 .../requests/compute/security_group_rule_tests.rb  |  54 ---------
 tests/hp/requests/compute/security_group_tests.rb  |  63 ----------
 tests/hp/requests/compute/server_address_tests.rb  |  45 -------
 tests/hp/requests/compute/server_tests.rb          | 126 --------------------
 tests/hp/requests/compute/server_volume_tests.rb   |  75 ------------
 tests/hp/requests/compute_v2/address_tests.rb      |  80 -------------
 .../requests/compute_v2/availability_zone_tests.rb |  19 ---
 tests/hp/requests/compute_v2/flavor_tests.rb       |  45 -------
 tests/hp/requests/compute_v2/image_tests.rb        |  86 --------------
 tests/hp/requests/compute_v2/key_pair_tests.rb     |  66 -----------
 tests/hp/requests/compute_v2/metadata_tests.rb     | 101 ----------------
 .../requests/compute_v2/persistent_server_tests.rb |  67 -----------
 .../hp/requests/compute_v2/server_address_tests.rb |  46 --------
 .../compute_v2/server_security_group_tests.rb      |  42 -------
 tests/hp/requests/compute_v2/server_tests.rb       | 113 ------------------
 .../hp/requests/compute_v2/server_volume_tests.rb  |  84 -------------
 tests/hp/requests/dns/domain_tests.rb              |  72 -----------
 tests/hp/requests/dns/records_tests.rb             |  64 ----------
 tests/hp/requests/lb/algorithms_tests.rb           |  14 ---
 tests/hp/requests/lb/limits_tests.rb               |  16 ---
 tests/hp/requests/lb/load_balancer_nodes_tests.rb  |  46 --------
 tests/hp/requests/lb/load_balancer_tests.rb        |  56 ---------
 tests/hp/requests/lb/protocols_tests.rb            |  14 ---
 tests/hp/requests/lb/versions_tests.rb             |  16 ---
 tests/hp/requests/lb/virtual_ips_tests.rb          |  34 ------
 tests/hp/requests/network/floating_ip_tests.rb     |  70 -----------
 tests/hp/requests/network/network_tests.rb         |  57 ---------
 tests/hp/requests/network/port_tests.rb            |  71 -----------
 tests/hp/requests/network/router_tests.rb          | 108 -----------------
 .../requests/network/security_group_rule_tests.rb  |  58 ---------
 tests/hp/requests/network/security_group_tests.rb  |  48 --------
 tests/hp/requests/network/subnet_tests.rb          |  71 -----------
 tests/hp/requests/storage/container_tests.rb       |  86 --------------
 tests/hp/requests/storage/object_tests.rb          | 121 -------------------
 tests/hp/storage_tests.rb                          |  28 -----
 tests/hp/user_agent_tests.rb                       |  13 --
 110 files changed, 4703 deletions(-)
 delete mode 100644 tests/hp/block_storage_tests.rb
 delete mode 100644 tests/hp/cdn_tests.rb
 delete mode 100644 tests/hp/compute_tests.rb
 delete mode 100644 tests/hp/models/block_storage/bootable_volume_tests.rb
 delete mode 100644 tests/hp/models/block_storage/snapshot_tests.rb
 delete mode 100644 tests/hp/models/block_storage/volume_tests.rb
 delete mode 100644 tests/hp/models/block_storage_v2/snapshot_tests.rb
 delete mode 100644 tests/hp/models/block_storage_v2/snapshots_tests.rb
 delete mode 100644 tests/hp/models/block_storage_v2/volume_backup_tests.rb
 delete mode 100644 tests/hp/models/block_storage_v2/volume_backups_tests.rb
 delete mode 100644 tests/hp/models/block_storage_v2/volume_tests.rb
 delete mode 100644 tests/hp/models/block_storage_v2/volumes_tests.rb
 delete mode 100644 tests/hp/models/compute/address_tests.rb
 delete mode 100644 tests/hp/models/compute/addresses_tests.rb
 delete mode 100644 tests/hp/models/compute/key_pair_tests.rb
 delete mode 100644 tests/hp/models/compute/key_pairs_tests.rb
 delete mode 100644 tests/hp/models/compute/metadata_image_tests.rb
 delete mode 100644 tests/hp/models/compute/metadata_server_tests.rb
 delete mode 100644 tests/hp/models/compute/security_group_tests.rb
 delete mode 100644 tests/hp/models/compute/security_groups_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/address_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/addresses_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/availability_zone_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/availability_zones_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/key_pair_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/key_pairs_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/metadata_image_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/metadata_server_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/server_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/servers_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/volume_attachment_tests.rb
 delete mode 100644 tests/hp/models/compute_v2/volume_attachments_tests.rb
 delete mode 100644 tests/hp/models/dns/domain_tests.rb
 delete mode 100644 tests/hp/models/dns/domains_tests.rb
 delete mode 100644 tests/hp/models/dns/record_tests.rb
 delete mode 100644 tests/hp/models/dns/records_tests.rb
 delete mode 100644 tests/hp/models/lb/algorithms_tests.rb
 delete mode 100644 tests/hp/models/lb/load_balancer_node_tests.rb
 delete mode 100644 tests/hp/models/lb/load_balancer_nodes_tests.rb
 delete mode 100644 tests/hp/models/lb/load_balancer_tests.rb
 delete mode 100644 tests/hp/models/lb/load_balancer_virtual_ips_tests.rb
 delete mode 100644 tests/hp/models/lb/load_balancers_tests.rb
 delete mode 100644 tests/hp/models/lb/protocols_tests.rb
 delete mode 100644 tests/hp/models/network/floating_ip_tests.rb
 delete mode 100644 tests/hp/models/network/floating_ips_tests.rb
 delete mode 100644 tests/hp/models/network/network_tests.rb
 delete mode 100644 tests/hp/models/network/networks_tests.rb
 delete mode 100644 tests/hp/models/network/port_tests.rb
 delete mode 100644 tests/hp/models/network/ports_tests.rb
 delete mode 100644 tests/hp/models/network/router_tests.rb
 delete mode 100644 tests/hp/models/network/routers_tests.rb
 delete mode 100644 tests/hp/models/network/security_group_rule_tests.rb
 delete mode 100644 tests/hp/models/network/security_group_rules_tests.rb
 delete mode 100644 tests/hp/models/network/security_group_tests.rb
 delete mode 100644 tests/hp/models/network/security_groups_tests.rb
 delete mode 100644 tests/hp/models/network/subnet_tests.rb
 delete mode 100644 tests/hp/models/network/subnets_tests.rb
 delete mode 100644 tests/hp/models/storage/directories_tests.rb
 delete mode 100644 tests/hp/models/storage/directory_tests.rb
 delete mode 100644 tests/hp/models/storage/file_tests.rb
 delete mode 100644 tests/hp/models/storage/files_tests.rb
 delete mode 100644 tests/hp/requests/block_storage/bootable_volume_tests.rb
 delete mode 100644 tests/hp/requests/block_storage/snapshot_tests.rb
 delete mode 100644 tests/hp/requests/block_storage/volume_tests.rb
 delete mode 100644 tests/hp/requests/block_storage_v2/snapshot_tests.rb
 delete mode 100644 tests/hp/requests/block_storage_v2/volume_backup_tests.rb
 delete mode 100644 tests/hp/requests/block_storage_v2/volume_tests.rb
 delete mode 100644 tests/hp/requests/cdn/container_tests.rb
 delete mode 100644 tests/hp/requests/compute/address_tests.rb
 delete mode 100644 tests/hp/requests/compute/flavor_tests.rb
 delete mode 100644 tests/hp/requests/compute/image_tests.rb
 delete mode 100644 tests/hp/requests/compute/key_pair_tests.rb
 delete mode 100644 tests/hp/requests/compute/metadata_tests.rb
 delete mode 100644 tests/hp/requests/compute/persistent_server_tests.rb
 delete mode 100644 tests/hp/requests/compute/security_group_rule_tests.rb
 delete mode 100644 tests/hp/requests/compute/security_group_tests.rb
 delete mode 100644 tests/hp/requests/compute/server_address_tests.rb
 delete mode 100644 tests/hp/requests/compute/server_tests.rb
 delete mode 100644 tests/hp/requests/compute/server_volume_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/address_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/availability_zone_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/flavor_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/image_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/key_pair_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/metadata_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/persistent_server_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/server_address_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/server_security_group_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/server_tests.rb
 delete mode 100644 tests/hp/requests/compute_v2/server_volume_tests.rb
 delete mode 100644 tests/hp/requests/dns/domain_tests.rb
 delete mode 100644 tests/hp/requests/dns/records_tests.rb
 delete mode 100644 tests/hp/requests/lb/algorithms_tests.rb
 delete mode 100644 tests/hp/requests/lb/limits_tests.rb
 delete mode 100644 tests/hp/requests/lb/load_balancer_nodes_tests.rb
 delete mode 100644 tests/hp/requests/lb/load_balancer_tests.rb
 delete mode 100644 tests/hp/requests/lb/protocols_tests.rb
 delete mode 100644 tests/hp/requests/lb/versions_tests.rb
 delete mode 100644 tests/hp/requests/lb/virtual_ips_tests.rb
 delete mode 100644 tests/hp/requests/network/floating_ip_tests.rb
 delete mode 100644 tests/hp/requests/network/network_tests.rb
 delete mode 100644 tests/hp/requests/network/port_tests.rb
 delete mode 100644 tests/hp/requests/network/router_tests.rb
 delete mode 100644 tests/hp/requests/network/security_group_rule_tests.rb
 delete mode 100644 tests/hp/requests/network/security_group_tests.rb
 delete mode 100644 tests/hp/requests/network/subnet_tests.rb
 delete mode 100644 tests/hp/requests/storage/container_tests.rb
 delete mode 100644 tests/hp/requests/storage/object_tests.rb
 delete mode 100644 tests/hp/storage_tests.rb
 delete mode 100644 tests/hp/user_agent_tests.rb

diff --git a/tests/hp/block_storage_tests.rb b/tests/hp/block_storage_tests.rb
deleted file mode 100644
index 9b36b96..0000000
--- a/tests/hp/block_storage_tests.rb
+++ /dev/null
@@ -1,47 +0,0 @@
-require 'date'
-
-Shindo.tests('Fog::HP::BlockStorage', ['hp', 'blockstorage']) do
-  credentials = {
-    :auth_token => 'auth_token',
-    :endpoint_url => 'http://127.0.0.1/bpath/',
-    :service_catalog => {
-      :"Block Storage" => {
-      :zone => 'http://127.0.0.1/bpath/'}},
-    :expires => (DateTime.now + 1).to_s
-  }
-  options = {
-    :hp_access_key => 'key',
-    :hp_secret_key => 'secret',
-    :hp_tenant_id => 'tenant',
-    :hp_avl_zone => 'zone',
-    :hp_auth_uri => 'https://region-a.geo-1.identity.hpcloudsvc.com:35357/v2.0/tokens',
-    :credentials => credentials
-  }
-  tests('Test good credentials').returns(credentials) do
-    conn = Fog::HP::BlockStorage::Real.new(options)
-    conn.credentials
-  end
-  tests('Test expired credentials') do
-    credentials[:expires] = (DateTime.now - 1).to_s
-    raises(Excon::Errors::Unauthorized) { Fog::HP::BlockStorage::Real.new(options) }
-  end
-  tests('Test no expires') do
-    credentials[:expires] = nil
-    raises(Excon::Errors::Unauthorized) { Fog::HP::BlockStorage::Real.new(options) }
-  end
-  tests('Test no creds') do
-    options[:credentials] = nil
-    raises(Excon::Errors::Unauthorized) { Fog::HP::BlockStorage::Real.new(options) }
-  end
-  tests('Test no service') do
-    options[:credentials] = credentials
-    options[:credentials][:service_catalog] = {
-      :"CDN" => {
-      :zone => 'http://127.0.0.1/bpath/'}},
-    raises(Excon::Errors::Unauthorized) { Fog::HP::BlockStorage::Real.new(options) }
-  end
-  tests('Test no creds') do
-    options[:credentials][:service_catalog] = nil
-    raises(Excon::Errors::Unauthorized) { Fog::HP::BlockStorage::Real.new(options) }
-  end
-end
diff --git a/tests/hp/cdn_tests.rb b/tests/hp/cdn_tests.rb
deleted file mode 100644
index 8e3d14c..0000000
--- a/tests/hp/cdn_tests.rb
+++ /dev/null
@@ -1,23 +0,0 @@
-Shindo.tests('Fog::CDN::HP', ['hp', 'cdn']) do
-  credentials = {
-    :auth_token => 'auth_token',
-    :endpoint_url => 'http://127.0.0.1/cdnpath/',
-    :cdn_endpoint_url => 'http://127.0.0.1/cdnpath/',
-    :service_catalog => {
-      :"CDN" => {
-      :zone => 'http://127.0.0.1/cdnpath/'}},
-    :expires => (DateTime.now + 1).to_s
-  }
-  options = {
-    :hp_access_key => 'key',
-    :hp_secret_key => 'secret',
-    :hp_tenant_id => 'tenant',
-    :hp_avl_zone => 'zone',
-    :hp_auth_uri => 'https://region-a.geo-1.identity.hpcloudsvc.com:35357/v2.0/tokens',
-    :credentials => credentials
-  }
-  tests('Test cached CDN credentials').returns(credentials) do
-    conn = Fog::CDN::HP::Real.new(options)
-    conn.credentials
-  end
-end
diff --git a/tests/hp/compute_tests.rb b/tests/hp/compute_tests.rb
deleted file mode 100644
index 63a1aad..0000000
--- a/tests/hp/compute_tests.rb
+++ /dev/null
@@ -1,22 +0,0 @@
-Shindo.tests('Fog::Compute::HP', ['hp', 'compute']) do
-  credentials = {
-    :auth_token => 'auth_token',
-    :endpoint_url => 'http://127.0.0.1/computepath/',
-    :service_catalog => {
-      :"Compute" => {
-      :zone => 'http://127.0.0.1/computepath/'}},
-    :expires => (DateTime.now + 1).to_s
-  }
-  options = {
-    :hp_access_key => 'key',
-    :hp_secret_key => 'secret',
-    :hp_tenant_id => 'tenant',
-    :hp_avl_zone => 'zone',
-    :hp_auth_uri => 'https://region-a.geo-1.identity.hpcloudsvc.com:35357/v2.0/tokens',
-    :credentials => credentials
-  }
-  tests('Test cached Compute credentials').returns(credentials) do
-    conn = Fog::Compute::HP::Real.new(options)
-    conn.credentials
-  end
-end
diff --git a/tests/hp/models/block_storage/bootable_volume_tests.rb b/tests/hp/models/block_storage/bootable_volume_tests.rb
deleted file mode 100644
index 10a5cde..0000000
--- a/tests/hp/models/block_storage/bootable_volume_tests.rb
+++ /dev/null
@@ -1,23 +0,0 @@
-Shindo.tests("HP::BlockStorage | bootable volumes", ['hp', 'block_storage', 'volumes']) do
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-  model_tests(HP[:block_storage].bootable_volumes, {:name => "fogbvoltests", :description => "fogbvoltests-desc", :size => 10, :image_id => @base_image_id}, true)
-
-  tests("new volume") do
-    @volume = HP[:block_storage].bootable_volumes.create(:name => "testbvol", :size => 10, :image_id => @base_image_id)
-    @volume.wait_for { ready? } unless Fog.mocking?
-
-    test("get(#{@volume.id})") do
-      HP[:block_storage].bootable_volumes.get(@volume.id) != nil?
-    end
-
-    test("has_attachments?") do
-      @volume.has_attachments? == false
-    end
-    after do
-      @volume.destroy
-    end
-  end
-
-end
diff --git a/tests/hp/models/block_storage/snapshot_tests.rb b/tests/hp/models/block_storage/snapshot_tests.rb
deleted file mode 100644
index 4b5935f..0000000
--- a/tests/hp/models/block_storage/snapshot_tests.rb
+++ /dev/null
@@ -1,23 +0,0 @@
-Shindo.tests("HP::BlockStorage | snapshots", ['hp', 'block_storage', 'snapshots']) do
-
-  @volume = HP[:block_storage].volumes.create(:name => "testsnapvol", :size => 1)
-  @volume.wait_for { ready? } unless Fog.mocking?
-
-  model_tests(HP[:block_storage].snapshots, {:name => "fogsnaptests", :description => "fogsnaptests-desc", :volume_id => @volume.id}, true)
-
-  tests("new snapshot") do
-    @snapshot = HP[:block_storage].snapshots.create(:name => "testvol", :volume_id => @volume.id)
-    @snapshot.wait_for { ready? } unless Fog.mocking?
-
-    test("get(#{@snapshot.id})") do
-      HP[:block_storage].snapshots.get(@snapshot.id) != nil?
-    end
-
-    after do
-      @snapshot.destroy
-    end
-  end
-
-  @volume.destroy
-
-end
diff --git a/tests/hp/models/block_storage/volume_tests.rb b/tests/hp/models/block_storage/volume_tests.rb
deleted file mode 100644
index cf93470..0000000
--- a/tests/hp/models/block_storage/volume_tests.rb
+++ /dev/null
@@ -1,21 +0,0 @@
-Shindo.tests("HP::BlockStorage | volumes", ['hp', 'block_storage', 'volumes']) do
-
-  model_tests(HP[:block_storage].volumes, {:name => "fogvoltests", :description => "fogvoltests-desc", :size => 1}, true)
-
-  tests("new volume") do
-    @volume = HP[:block_storage].volumes.create(:name => "testvol", :size => 1)
-    @volume.wait_for { ready? } unless Fog.mocking?
-
-    test("get(#{@volume.id})") do
-      HP[:block_storage].volumes.get(@volume.id) != nil?
-    end
-
-    test("has_attachments?") do
-      @volume.has_attachments? == false
-    end
-    after do
-      @volume.destroy
-    end
-  end
-
-end
diff --git a/tests/hp/models/block_storage_v2/snapshot_tests.rb b/tests/hp/models/block_storage_v2/snapshot_tests.rb
deleted file mode 100644
index 84a98da..0000000
--- a/tests/hp/models/block_storage_v2/snapshot_tests.rb
+++ /dev/null
@@ -1,22 +0,0 @@
-Shindo.tests("HP::BlockStorageV2 | snapshot model", ['hp', 'v2', 'block_storage', 'snapshots']) do
-
-  @volume = HP[:block_storage_v2].volumes.create(:name => 'testsnap2vol', :size => 1)
-  @volume.wait_for { ready? } unless Fog.mocking?
-
-  model_tests(HP[:block_storage_v2].snapshots, {:name => 'fogsnap2tests', :description => 'fogsnaptests-desc', :volume_id => @volume.id}, true) do
-    test("get(#{@instance.id})") do
-      HP[:block_storage_v2].snapshots.get(@instance.id) != nil?
-    end
-
-    test("update(#{@instance.id}") do
-      @instance.name = 'Updated'
-      @instance.save
-      @instance.reload
-      @instance.name == 'Updated'
-    end
-
-  end
-
-  @volume.destroy
-
-end
diff --git a/tests/hp/models/block_storage_v2/snapshots_tests.rb b/tests/hp/models/block_storage_v2/snapshots_tests.rb
deleted file mode 100644
index f4f1645..0000000
--- a/tests/hp/models/block_storage_v2/snapshots_tests.rb
+++ /dev/null
@@ -1,10 +0,0 @@
-Shindo.tests("HP::BlockStorageV2 | snapshots collection", ['hp', 'v2', 'block_storage', 'snapshots']) do
-
-  @volume = HP[:block_storage_v2].volumes.create(:name => 'testsnap2vol', :size => 1)
-  @volume.wait_for { ready? } unless Fog.mocking?
-
-  collection_tests(HP[:block_storage_v2].snapshots, {:name => 'fogsnap2tests', :description => 'fogsnaptests-desc', :volume_id => @volume.id}, true)
-
-  @volume.destroy
-
-end
diff --git a/tests/hp/models/block_storage_v2/volume_backup_tests.rb b/tests/hp/models/block_storage_v2/volume_backup_tests.rb
deleted file mode 100644
index d52447c..0000000
--- a/tests/hp/models/block_storage_v2/volume_backup_tests.rb
+++ /dev/null
@@ -1,22 +0,0 @@
-Shindo.tests("HP::BlockStorage | volume backup model", ['hp', 'v2', 'block_storage', 'backup']) do
-
-  @volume = HP[:block_storage_v2].volumes.create(:name => 'fogvolbkp2tests', :description => 'fogvolbkp2tests-desc', :size => 1)
-  @volume.wait_for { ready? } unless Fog.mocking?
-
-  model_tests(HP[:block_storage_v2].volume_backups, {:name => 'fogbkp2tests', :description => 'fogbkp2tests-desc', :volume_id => @volume.id}, true) do
-
-    # restore to new volume
-    tests('restore()').succeeds do
-      @instance.restore
-    end
-
-    # restore to specified volume
-    tests("restore(#{@volume.id})").succeeds do
-      @instance.restore(@volume.id)
-    end
-
-  end
-
-  @volume.destroy
-
-end
diff --git a/tests/hp/models/block_storage_v2/volume_backups_tests.rb b/tests/hp/models/block_storage_v2/volume_backups_tests.rb
deleted file mode 100644
index 3365821..0000000
--- a/tests/hp/models/block_storage_v2/volume_backups_tests.rb
+++ /dev/null
@@ -1,9 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | volume backups collection", ['hp', 'v2', 'block_storage', 'backup']) do
-
-  @volume = HP[:block_storage_v2].volumes.create(:name => 'fogvolbkp2tests', :description => 'fogvolbkp2tests-desc', :size => 1)
-  @volume.wait_for { ready? } unless Fog.mocking?
-
-  collection_tests(HP[:block_storage_v2].volume_backups, {:name => 'fogbkp2tests', :description => 'fogbkp2tests-desc', :volume_id => @volume.id}, true)
-
-  @volume.destroy
-end
diff --git a/tests/hp/models/block_storage_v2/volume_tests.rb b/tests/hp/models/block_storage_v2/volume_tests.rb
deleted file mode 100644
index 960ad27..0000000
--- a/tests/hp/models/block_storage_v2/volume_tests.rb
+++ /dev/null
@@ -1,22 +0,0 @@
-Shindo.tests("HP::BlockStorage | volume model", ['hp', 'v2', 'block_storage', 'volumes']) do
-
-  model_tests(HP[:block_storage_v2].volumes, {:name => 'fogvol2tests', :description => 'fogvol2tests-desc', :size => 1}, true) do
-
-    test("get(#{@instance.id})") do
-      HP[:block_storage_v2].volumes.get(@instance.id) != nil?
-    end
-
-    test("update(#{@instance.id})") do
-      @instance.name = 'fogvol2tests Updated'
-      @instance.save
-      @instance.reload
-      @instance.name == 'fogvol2tests Updated'
-    end
-
-    test("has_attachments?") do
-      @instance.has_attachments? == false
-    end
-
-  end
-
-end
diff --git a/tests/hp/models/block_storage_v2/volumes_tests.rb b/tests/hp/models/block_storage_v2/volumes_tests.rb
deleted file mode 100644
index 22e048c..0000000
--- a/tests/hp/models/block_storage_v2/volumes_tests.rb
+++ /dev/null
@@ -1,5 +0,0 @@
-Shindo.tests("HP::BlockStorage | volumes collection", ['hp', 'v2', 'block_storage', 'volumes']) do
-
-  collection_tests(HP[:block_storage_v2].volumes, {:name => 'fogvol2tests', :description => 'fogvol2tests-desc', :size => 1}, true)
-
-end
diff --git a/tests/hp/models/compute/address_tests.rb b/tests/hp/models/compute/address_tests.rb
deleted file mode 100644
index 137ae74..0000000
--- a/tests/hp/models/compute/address_tests.rb
+++ /dev/null
@@ -1,18 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | address", ['hp']) do
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-  model_tests(Fog::Compute[:hp].addresses, {}, true) do
-
-    @server = Fog::Compute[:hp].servers.create(:name => "fogservertests", :flavor_id => 100, :image_id => @base_image_id)
-    @server.wait_for { ready? }
-
-    tests('#server=').succeeds do
-      @instance.server = @server
-    end
-
-    @server.destroy
-
-  end
-
-end
diff --git a/tests/hp/models/compute/addresses_tests.rb b/tests/hp/models/compute/addresses_tests.rb
deleted file mode 100644
index a6065be..0000000
--- a/tests/hp/models/compute/addresses_tests.rb
+++ /dev/null
@@ -1,5 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | addresses", ['hp']) do
-
-  collection_tests(Fog::Compute[:hp].addresses, {}, true)
-
-end
diff --git a/tests/hp/models/compute/key_pair_tests.rb b/tests/hp/models/compute/key_pair_tests.rb
deleted file mode 100644
index edacef6..0000000
--- a/tests/hp/models/compute/key_pair_tests.rb
+++ /dev/null
@@ -1,26 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | key_pair", ['hp']) do
-
-  model_tests(Fog::Compute[:hp].key_pairs, {:name => 'fogkeyname'}, true)
-
-  after do
-    @keypair.destroy
-  end
-
-  tests("new keypair") do
-    @keypair = Fog::Compute[:hp].key_pairs.create(:name => 'testkey')
-
-    test ("writable?") do
-      @keypair.writable? == true
-    end
-  end
-
-  tests("existing keypair") do
-    Fog::Compute[:hp].key_pairs.create(:name => 'testkey')
-    @keypair = Fog::Compute[:hp].key_pairs.get('testkey')
-
-    test("writable?") do
-      @keypair.writable? == false
-    end
-  end
-
-end
diff --git a/tests/hp/models/compute/key_pairs_tests.rb b/tests/hp/models/compute/key_pairs_tests.rb
deleted file mode 100644
index a49b96c..0000000
--- a/tests/hp/models/compute/key_pairs_tests.rb
+++ /dev/null
@@ -1,5 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | key_pairs", ['hp']) do
-
-  collection_tests(Fog::Compute[:hp].key_pairs, {:name => 'fogkeyname'}, true)
-
-end
diff --git a/tests/hp/models/compute/metadata_image_tests.rb b/tests/hp/models/compute/metadata_image_tests.rb
deleted file mode 100644
index 5cad29b..0000000
--- a/tests/hp/models/compute/metadata_image_tests.rb
+++ /dev/null
@@ -1,60 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | metadata for images", ['hp']) do
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-  @server = Fog::Compute[:hp].servers.create(:name => "fogsermdtests", :flavor_id => 100, :image_id => @base_image_id)
-  @server.wait_for { ready? }
-  response = @server.create_image("fogimgmetadatatests", :metadata => {'Meta1' => 'MetaValue1', 'Meta2' => 'MetaValue2'})
-  unless Fog.mocking?
-    sleep(10)
-  end
-  new_image_id = response.headers["Location"].split("/")[5]
-  @image = Fog::Compute[:hp].images.get(new_image_id)
-  tests('success') do
-
-    tests("#all").succeeds do
-      @image.metadata.all
-    end
-
-    tests("#get('Meta1')").succeeds do
-      pending if Fog.mocking?
-      @image.metadata.get('Meta1')
-    end
-
-    tests("#update({'Meta3' => 'MetaValue3'})").succeeds do
-      @data = @image.metadata.update({'Meta3' => 'MetaValue3'})
-      test("metadata has updated correctly") do
-        @image.metadata.get('Meta3').value == "MetaValue3"
-      end
-    end
-
-    tests("#set({'Meta4' => 'MetaValue4'})").succeeds do
-      @data = @image.metadata.set({'Meta4' => 'MetaValue4'})
-      test("metadata has set correctly") do
-        @image.metadata.get('Meta4').value == "MetaValue4"
-      end
-    end
-
-    tests("#save").succeeds do
-      m = @image.metadata.new(:key => 'Meta5', :value => 'MetaValue5')
-      @data = m.save
-      test("metadata has saved correctly") do
-        @image.metadata.get('Meta5').value == "MetaValue5"
-      end
-    end
-
-    tests("#destroy('Meta5')").succeeds do
-      @image.metadata.destroy('Meta5')
-      test("metadata has been destroyed") do
-        @image.metadata.get('Meta5') == nil
-      end
-    end
-
-  end
-
-  unless Fog.mocking?
-    @image.destroy
-  end
-  @server.destroy
-
-end
diff --git a/tests/hp/models/compute/metadata_server_tests.rb b/tests/hp/models/compute/metadata_server_tests.rb
deleted file mode 100644
index 5f01f29..0000000
--- a/tests/hp/models/compute/metadata_server_tests.rb
+++ /dev/null
@@ -1,54 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | metadata for servers", ['hp']) do
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-  @server = Fog::Compute[:hp].servers.create(:name => "fogsermetadatatests", :flavor_id => 100, :image_id => @base_image_id, :metadata => {'Meta1' => 'MetaValue1', 'Meta2' => 'MetaValue2'})
-  @server.wait_for { ready? }
-
-  tests('success') do
-
-    tests("#all").succeeds do
-      @server.metadata.all
-    end
-
-    tests("#get('Meta1')").succeeds do
-      @data = @server.metadata.get('Meta1')
-      test("metadata gets correct value") do
-        @data.value == "MetaValue1"
-      end
-    end
-
-    tests("#update({'Meta3' => 'MetaValue3'})").succeeds do
-      @data = @server.metadata.update({'Meta3' => 'MetaValue3'})
-      test("metadata has updated correctly") do
-        @server.metadata.get('Meta3').value == "MetaValue3"
-      end
-    end
-
-    tests("#set({'Meta4' => 'MetaValue4'})").succeeds do
-      @data = @server.metadata.set({'Meta4' => 'MetaValue4'})
-      test("metadata has set correctly") do
-        @server.metadata.get('Meta4').value == "MetaValue4"
-      end
-    end
-
-    tests("#save").succeeds do
-      m = @server.metadata.new(:key => 'Meta5', :value => 'MetaValue5')
-      @data = m.save
-      test("metadata has saved correctly") do
-        @server.metadata.get('Meta5').value == "MetaValue5"
-      end
-    end
-
-    tests("#destroy('Meta5')").succeeds do
-      @data = @server.metadata.destroy('Meta5')
-      test("metadata has been destroyed") do
-        @server.metadata.get('Meta5') == nil
-      end
-    end
-
-  end
-
-  @server.destroy
-
-end
diff --git a/tests/hp/models/compute/security_group_tests.rb b/tests/hp/models/compute/security_group_tests.rb
deleted file mode 100644
index b23b65e..0000000
--- a/tests/hp/models/compute/security_group_tests.rb
+++ /dev/null
@@ -1,38 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | security_group", ['hp']) do
-  # Disabled due to https://github.com/fog/fog/1546
-  pending
-
-  model_tests(Fog::Compute[:hp].security_groups, {:name => 'foggroupname', :description => 'foggroupdescription'}, true)
-
-  tests("a group with trailing whitespace") do
-    @group = Fog::Compute[:hp].security_groups.create(:name => "   foggroup with spaces   ", :description => "   fog group desc   ")
-
-    test("all spaces are removed from name") do
-      @group.name == "   foggroup with spaces   ".strip!
-    end
-
-    test("all spaces are removed from description") do
-      @group.description == "   fog group desc   ".strip!
-    end
-
-    @other_group = Fog::Compute[:hp].security_groups.create(:name => 'other group', :description => 'another group')
-
-    test("authorize access by another security group") do
-      sgrule = @group.create_rule(80..80, "tcp", nil, @other_group.id)
-      @sg_rule_id = sgrule.body['security_group_rule']['id']
-      @group.reload
-      s = @group.rules.select {|r| r['id'] == @sg_rule_id unless r.nil?}
-      s[0]['id'] == @sg_rule_id
-    end
-
-    test("revoke access from another security group") do
-      @group.delete_rule(@sg_rule_id)
-      @group.reload
-      s = @group.rules.select {|r| r['id'] == @sg_rule_id unless r.nil?}
-      s.empty?
-    end
-
-    @other_group.destroy
-    @group.destroy
-  end
-end
diff --git a/tests/hp/models/compute/security_groups_tests.rb b/tests/hp/models/compute/security_groups_tests.rb
deleted file mode 100644
index bf9f7b1..0000000
--- a/tests/hp/models/compute/security_groups_tests.rb
+++ /dev/null
@@ -1,5 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | security_groups", ['hp']) do
-
-  collection_tests(Fog::Compute[:hp].security_groups, {:name => 'foggroupname', :description => 'foggroupdescription'}, true)
-
-end
diff --git a/tests/hp/models/compute_v2/address_tests.rb b/tests/hp/models/compute_v2/address_tests.rb
deleted file mode 100644
index facbca3..0000000
--- a/tests/hp/models/compute_v2/address_tests.rb
+++ /dev/null
@@ -1,23 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | address model", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-  model_tests(service.addresses, {}, true) do
-
-    @server = service.servers.create(:name => 'fogseraddtests', :flavor_id => 100, :image_id => @base_image_id)
-    @server.wait_for { ready? }
-
-    tests('#server=').succeeds do
-      @instance.server = @server
-      test('server attached') do
-        @instance.instance_id == @server.id
-      end
-    end
-
-    @server.destroy
-
-  end
-
-end
diff --git a/tests/hp/models/compute_v2/addresses_tests.rb b/tests/hp/models/compute_v2/addresses_tests.rb
deleted file mode 100644
index 1fc99bf..0000000
--- a/tests/hp/models/compute_v2/addresses_tests.rb
+++ /dev/null
@@ -1,7 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | addresses collection", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  collection_tests(service.addresses, {}, true)
-
-end
diff --git a/tests/hp/models/compute_v2/availability_zone_tests.rb b/tests/hp/models/compute_v2/availability_zone_tests.rb
deleted file mode 100644
index 2aab2cf..0000000
--- a/tests/hp/models/compute_v2/availability_zone_tests.rb
+++ /dev/null
@@ -1,11 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | availability zone model", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @zones = service.availability_zones
-
-  tests('#available?').succeeds do
-    @zones.first.respond_to?('available?')
-  end
-
-end
diff --git a/tests/hp/models/compute_v2/availability_zones_tests.rb b/tests/hp/models/compute_v2/availability_zones_tests.rb
deleted file mode 100644
index f914203..0000000
--- a/tests/hp/models/compute_v2/availability_zones_tests.rb
+++ /dev/null
@@ -1,13 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | availability zones collection", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  tests('#all').succeeds do
-    @zones = service.availability_zones
-  end
-
-  tests('#get').succeeds do
-    @zones.get('az1').name == 'az1'
-  end
-
-end
diff --git a/tests/hp/models/compute_v2/key_pair_tests.rb b/tests/hp/models/compute_v2/key_pair_tests.rb
deleted file mode 100644
index 7551b8f..0000000
--- a/tests/hp/models/compute_v2/key_pair_tests.rb
+++ /dev/null
@@ -1,28 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | key_pair model", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  model_tests(service.key_pairs, {:name => 'fogkeyname'}, true)
-
-  after do
-    @keypair.destroy
-  end
-
-  tests('new keypair') do
-    @keypair = service.key_pairs.create(:name => 'fogtestkey')
-
-    test('writable?') do
-      @keypair.writable? == true
-    end
-  end
-
-  tests('existing keypair') do
-    service.key_pairs.create(:name => 'fogtestkey')
-    @keypair = service.key_pairs.get('fogtestkey')
-
-    test('writable?') do
-      @keypair.writable? == false
-    end
-  end
-
-end
diff --git a/tests/hp/models/compute_v2/key_pairs_tests.rb b/tests/hp/models/compute_v2/key_pairs_tests.rb
deleted file mode 100644
index a7c0b67..0000000
--- a/tests/hp/models/compute_v2/key_pairs_tests.rb
+++ /dev/null
@@ -1,7 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | key pairs collection", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  collection_tests(service.key_pairs, {:name => 'fogkeyname'}, true)
-
-end
diff --git a/tests/hp/models/compute_v2/metadata_image_tests.rb b/tests/hp/models/compute_v2/metadata_image_tests.rb
deleted file mode 100644
index b368560..0000000
--- a/tests/hp/models/compute_v2/metadata_image_tests.rb
+++ /dev/null
@@ -1,60 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | metadata for images", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-  @server = service.servers.create(:name => 'fogsermdtests', :flavor_id => 100, :image_id => @base_image_id)
-  @server.wait_for { ready? }
-  @image = @server.create_image('fogimgmetadatatests', :metadata => {'Meta1' => 'MetaValue1', 'Meta2' => 'MetaValue2'})
-  @image.wait_for { ready? }
-  @image.reload
-
-  tests('success') do
-
-    tests('#all').succeeds do
-      @image.metadata.all
-    end
-
-    tests("#get('Meta1')").succeeds do
-      pending if Fog.mocking?
-      @image.metadata.get('Meta1')
-    end
-
-    tests("#update({'Meta3' => 'MetaValue3'})").succeeds do
-      @data = @image.metadata.update({'Meta3' => 'MetaValue3'})
-      test('metadata has updated correctly') do
-        @image.metadata.get('Meta3').value == 'MetaValue3'
-      end
-    end
-
-    tests("#set({'Meta4' => 'MetaValue4'})").succeeds do
-      @data = @image.metadata.set({'Meta4' => 'MetaValue4'})
-      test('metadata has set correctly') do
-        @image.metadata.get('Meta4').value == 'MetaValue4'
-      end
-    end
-
-    tests("#save").succeeds do
-      m = @image.metadata.new(:key => 'Meta5', :value => 'MetaValue5')
-      @data = m.save
-      test('metadata has saved correctly') do
-        @image.metadata.get('Meta5').value == 'MetaValue5'
-      end
-    end
-
-    tests("#destroy('Meta5')").succeeds do
-      @image.metadata.destroy('Meta5')
-      test('metadata has been destroyed') do
-        @image.metadata.get('Meta5') == nil
-      end
-    end
-
-  end
-
-  unless Fog.mocking?
-    @image.destroy
-  end
-  @server.destroy
-
-end
diff --git a/tests/hp/models/compute_v2/metadata_server_tests.rb b/tests/hp/models/compute_v2/metadata_server_tests.rb
deleted file mode 100644
index c7891a4..0000000
--- a/tests/hp/models/compute_v2/metadata_server_tests.rb
+++ /dev/null
@@ -1,56 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | metadata for servers", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-  @server = service.servers.create(:name => 'fogsermetadatatests', :flavor_id => 100, :image_id => @base_image_id, :metadata => {'Meta1' => 'MetaValue1', 'Meta2' => 'MetaValue2'})
-  @server.wait_for { ready? }
-
-  tests('success') do
-
-    tests('#all').succeeds do
-      @server.metadata.all
-    end
-
-    tests("#get('Meta1')").succeeds do
-      @data = @server.metadata.get('Meta1')
-      test('metadata gets correct value') do
-        @data.value == 'MetaValue1'
-      end
-    end
-
-    tests("#update({'Meta3' => 'MetaValue3'})").succeeds do
-      @data = @server.metadata.update({'Meta3' => 'MetaValue3'})
-      test('metadata has updated correctly') do
-        @server.metadata.get('Meta3').value == 'MetaValue3'
-      end
-    end
-
-    tests("#set({'Meta4' => 'MetaValue4'})").succeeds do
-      @data = @server.metadata.set({'Meta4' => 'MetaValue4'})
-      test('metadata has set correctly') do
-        @server.metadata.get('Meta4').value == 'MetaValue4'
-      end
-    end
-
-    tests('#save').succeeds do
-      m = @server.metadata.new(:key => 'Meta5', :value => 'MetaValue5')
-      @data = m.save
-      test('metadata has saved correctly') do
-        @server.metadata.get('Meta5').value == 'MetaValue5'
-      end
-    end
-
-    tests("#destroy('Meta5')").succeeds do
-      @data = @server.metadata.destroy('Meta5')
-      test('metadata has been destroyed') do
-        @server.metadata.get('Meta5') == nil
-      end
-    end
-
-  end
-
-  @server.destroy
-
-end
diff --git a/tests/hp/models/compute_v2/server_tests.rb b/tests/hp/models/compute_v2/server_tests.rb
deleted file mode 100644
index bb00ed6..0000000
--- a/tests/hp/models/compute_v2/server_tests.rb
+++ /dev/null
@@ -1,45 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | server model", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-  model_tests(service.servers, {:name => 'fogservertest', :flavor_id => 100, :image_id => @base_image_id}, true) do
-
-    @server = service.servers.create(:name => 'fogservertest', :flavor_id => 100, :image_id => @base_image_id)
-
-    tests('#console_output(10)').succeeds do
-      @server.console_output(10)
-    end
-
-    tests('#vnc_console_url').succeeds do
-      @server.vnc_console_url
-    end
-
-    tests("#create_image('fogimgfromserver')").succeeds do
-      @server.create_image('fogimgfromserver')
-    end
-
-    tests("#reboot('SOFT')").succeeds do
-      pending unless Fog.mocking?
-      @server.reboot('SOFT')
-    end
-
-    tests("#rebuild(#{@base_image_id}, 'fogrebuildserver')").succeeds do
-      pending
-      @server.rebuild(@base_image_id, 'fogrebuildserver')
-    end
-
-    tests('#add_security_group("default")').succeeds do
-      @server.add_security_group('default')
-    end
-
-    tests('#remove_security_group("default")').succeeds do
-      @server.remove_security_group('default')
-    end
-
-    @server.destroy
-
-  end
-
-end
diff --git a/tests/hp/models/compute_v2/servers_tests.rb b/tests/hp/models/compute_v2/servers_tests.rb
deleted file mode 100644
index 27a655b..0000000
--- a/tests/hp/models/compute_v2/servers_tests.rb
+++ /dev/null
@@ -1,9 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | servers collection", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-  collection_tests(service.servers, {:name => 'fogservercolltest', :flavor_id => 100, :image_id => @base_image_id}, true)
-
-end
diff --git a/tests/hp/models/compute_v2/volume_attachment_tests.rb b/tests/hp/models/compute_v2/volume_attachment_tests.rb
deleted file mode 100644
index 2e9709d..0000000
--- a/tests/hp/models/compute_v2/volume_attachment_tests.rb
+++ /dev/null
@@ -1,40 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | volume_attachment model", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-  @server = service.servers.create(:name => 'fogserattachtests', :flavor_id => 100, :image_id => @base_image_id)
-  @server.wait_for { ready? }
-  @volume = HP[:block_storage_v2].volumes.create(:name => 'fogvolumetest', :size => 1)
-  @volume.wait_for { ready? }
-
-  tests('success') do
-
-    tests('#create').succeeds do
-      volume_attachment = @server.volume_attachments.create(:server_id => @server.id, :volume_id => @volume.id, :device => '/dev/sdf')
-      test('volume attached to server') do
-        volume_attachment.server_id == @server.id
-      end
-    end
-
-    tests('#get').succeeds do
-      volume_attachment = @server.volume_attachments.get(@volume.id)
-      test('get server in volume attachment') do
-        volume_attachment.server_id == @server.id
-      end
-      test('get volume in volume attachment') do
-        volume_attachment.id == @volume.id
-      end
-    end
-
-    tests('#detach').succeeds do
-      volume_attachment = @server.volume_attachments.get(@volume.id)
-      volume_attachment.detach
-    end
-
-  end
-
-  @volume.destroy
-  @server.destroy
-end
diff --git a/tests/hp/models/compute_v2/volume_attachments_tests.rb b/tests/hp/models/compute_v2/volume_attachments_tests.rb
deleted file mode 100644
index c5d280e..0000000
--- a/tests/hp/models/compute_v2/volume_attachments_tests.rb
+++ /dev/null
@@ -1,17 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | volume attachments collection", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-  @server = service.servers.create(:name => 'fogserverattachtest', :flavor_id => 100, :image_id => @base_image_id)
-  @server.wait_for { ready? }
-  @volume = HP[:block_storage_v2].volumes.create(:name => 'fogvolumetest', :size => 1)
-  @volume.wait_for { ready? }
-
-  collection_tests(@server.volume_attachments, {:server_id => @server.id, :volume_id => @volume.id, :device => '/dev/sdf'}, true)
-
-  @volume.destroy
-  @server.destroy
-
-end
diff --git a/tests/hp/models/dns/domain_tests.rb b/tests/hp/models/dns/domain_tests.rb
deleted file mode 100644
index cf69f43..0000000
--- a/tests/hp/models/dns/domain_tests.rb
+++ /dev/null
@@ -1,25 +0,0 @@
-Shindo.tests('HP::DNS | domain model', ['hp', 'dns', 'domain']) do
-
-  attributes = {:name => 'www.fogtest.com.', :email => 'test@fogtest.com'}
-  model_tests(HP[:dns].domains, attributes, true)
-
-  tests('success') do
-
-    tests('#create').succeeds do
-      attributes = {:name => 'www.fogtest.com.', :email => 'test@fogtest.com', :ttl => 3600}
-      @domain = HP[:dns].domains.create(attributes)
-      !@domain.id.nil?
-    end
-
-    tests('Update via #save').succeeds do
-      @domain.email = 'update@fogtest.com'
-      @domain.save
-    end
-
-    tests('#destroy').succeeds do
-      @domain.destroy
-    end
-
-  end
-
-end
diff --git a/tests/hp/models/dns/domains_tests.rb b/tests/hp/models/dns/domains_tests.rb
deleted file mode 100644
index fa3f06e..0000000
--- a/tests/hp/models/dns/domains_tests.rb
+++ /dev/null
@@ -1,14 +0,0 @@
-Shindo.tests('HP::DNS | domains collection', ['hp', 'dns', 'domains']) do
-
-  attributes = {:name => 'www.fogtest.com.', :email => 'test@fogtest.com', :ttl => 3600}
-  collection_tests(HP[:dns].domains, attributes, true)
-
-  tests('success') do
-
-    tests('#all').succeeds do
-      HP[:dns].domains.all
-    end
-
-  end
-
-end
diff --git a/tests/hp/models/dns/record_tests.rb b/tests/hp/models/dns/record_tests.rb
deleted file mode 100644
index ae06a12..0000000
--- a/tests/hp/models/dns/record_tests.rb
+++ /dev/null
@@ -1,29 +0,0 @@
-Shindo.tests('HP::DNS | record model', ['hp', 'dns', 'record']) do
-
-  @domain = HP[:dns].domains.create({:name => 'www.fogtest.com.', :email => 'test@fogtest.com'})
-
-  attributes = {:domain_id => @domain.id, :name => 'www.fogtest.com.', :type => 'A', :data => '15.185.100.152'}
-  model_tests(@domain.records, attributes, true)
-
-  tests('success') do
-
-    tests('#create').succeeds do
-      attributes = {:domain_id => @domain.id, :name => 'www.fogtest.com.', :type => 'A', :data => '15.185.200.152', :description => 'test record'}
-      @record = HP[:dns].records.create(attributes)
-      !@record.id.nil?
-    end
-
-    tests('Update via #save').succeeds do
-      @record.name = 'www.fogupdate.com.'
-      @record.description = 'desc for record'
-      @record.save
-    end
-
-    tests('#destroy').succeeds do
-      @record.destroy
-    end
-
-  end
-
-  @domain.destroy
-end
diff --git a/tests/hp/models/dns/records_tests.rb b/tests/hp/models/dns/records_tests.rb
deleted file mode 100644
index 17ec76d..0000000
--- a/tests/hp/models/dns/records_tests.rb
+++ /dev/null
@@ -1,9 +0,0 @@
-Shindo.tests('HP::DNS | records collection', ['hp', 'dns', 'records']) do
-
-  @domain = HP[:dns].domains.create({:name => 'www.fogtest.com.', :email => 'test@fogtest.com'})
-
-  attributes = {:domain_id => @domain.id, :name => 'www.fogtest.com.', :type => 'A', :data => '15.185.172.152'}
-  collection_tests(@domain.records, attributes, true)
-
-  @domain.destroy
-end
diff --git a/tests/hp/models/lb/algorithms_tests.rb b/tests/hp/models/lb/algorithms_tests.rb
deleted file mode 100644
index 1e342e3..0000000
--- a/tests/hp/models/lb/algorithms_tests.rb
+++ /dev/null
@@ -1,15 +0,0 @@
-Shindo.tests('HP::LB | algorithms collection', ['hp', 'lb', 'algorithms']) do
-
-  tests('success') do
-
-    tests('#all').succeeds do
-      HP[:lb].algorithms
-    end
-
-    tests('#get("ROUND_ROBIN")').succeeds do
-      HP[:lb].algorithms.get("ROUND_ROBIN")
-    end
-
-  end
-
-end
diff --git a/tests/hp/models/lb/load_balancer_node_tests.rb b/tests/hp/models/lb/load_balancer_node_tests.rb
deleted file mode 100644
index c222c40..0000000
--- a/tests/hp/models/lb/load_balancer_node_tests.rb
+++ /dev/null
@@ -1,9 +0,0 @@
-Shindo.tests('HP::LB | load balancer node model', ['hp', 'lb', 'node']) do
-
-  attributes = {:name => 'fog-lb', :nodes => [{'address' => '15.185.1.1', 'port' => '80'}]}
-  @lb = HP[:lb].load_balancers.create(attributes)
-
-  attributes = {:address => '15.185.1.1', :port => '80'}
-  model_tests(@lb.nodes, attributes, true)
-
-end
diff --git a/tests/hp/models/lb/load_balancer_nodes_tests.rb b/tests/hp/models/lb/load_balancer_nodes_tests.rb
deleted file mode 100644
index 993bb9f..0000000
--- a/tests/hp/models/lb/load_balancer_nodes_tests.rb
+++ /dev/null
@@ -1,27 +0,0 @@
-Shindo.tests('HP::LB | load balancer nodes collection', ['hp', 'lb', 'node']) do
-
-  attributes = {:name => 'fog-lb', :nodes => [{'address' => '15.185.1.1', 'port' => '80'}]}
-  @lb = HP[:lb].load_balancers.create(attributes)
-
-  attributes = {:address => '15.185.1.1', :port => '80'}
-  collection_tests(@lb.nodes, attributes, true)
-
-  tests('success') do
-
-    attributes = {:address => '15.185.1.1', :port => '80'}
-    @node = @lb.nodes.create(attributes)
-
-    tests('#all').succeeds do
-      @lb.nodes.all
-    end
-
-    tests("#get(#{@node.id})").succeeds do
-      @lb.nodes.get(@node.id)
-    end
-
-    @node.destroy
-  end
-
-  @lb.destroy
-
-end
diff --git a/tests/hp/models/lb/load_balancer_tests.rb b/tests/hp/models/lb/load_balancer_tests.rb
deleted file mode 100644
index 74bf4c2..0000000
--- a/tests/hp/models/lb/load_balancer_tests.rb
+++ /dev/null
@@ -1,6 +0,0 @@
-Shindo.tests('HP::LB | load balancer model', ['hp', 'lb', 'load_balancer']) do
-
-  attributes = {:name => 'fog-lb', :nodes => [{'address' => '15.185.1.1', 'port' => '80'}]}
-  model_tests(HP[:lb].load_balancers, attributes, true)
-
-end
diff --git a/tests/hp/models/lb/load_balancer_virtual_ips_tests.rb b/tests/hp/models/lb/load_balancer_virtual_ips_tests.rb
deleted file mode 100644
index e9472e1..0000000
--- a/tests/hp/models/lb/load_balancer_virtual_ips_tests.rb
+++ /dev/null
@@ -1,22 +0,0 @@
-Shindo.tests('HP::LB | load balancer virtual ips collection', ['hp', 'lb', 'virtual_ip']) do
-
-  attributes = {:name => 'fog-lb', :nodes => [{'address' => '15.185.1.1', 'port' => '80'}]}
-  @lb = HP[:lb].load_balancers.create(attributes)
-
-  tests('success') do
-
-    @vip = HP[:lb].virtual_ips(:load_balancer => @lb).all.first
-
-    tests('#all').succeeds do
-      HP[:lb].virtual_ips(:load_balancer => @lb).all
-    end
-
-    tests("#get(#{@vip.id})").succeeds do
-      HP[:lb].virtual_ips(:load_balancer => @lb).get(@vip.id)
-    end
-
-  end
-
-  @lb.destroy
-
-end
diff --git a/tests/hp/models/lb/load_balancers_tests.rb b/tests/hp/models/lb/load_balancers_tests.rb
deleted file mode 100644
index 4d231ef..0000000
--- a/tests/hp/models/lb/load_balancers_tests.rb
+++ /dev/null
@@ -1,22 +0,0 @@
-Shindo.tests('HP::LB | load balancer collection', ['hp', 'lb', 'load_balancer']) do
-
-  attributes = {:name => 'fog-lb', :nodes => [{'address' => '15.185.1.1', 'port' => '80'}]}
-  collection_tests(HP[:lb].load_balancers, attributes, true)
-
-  tests('success') do
-
-    attributes = {:name => 'fog-lb', :nodes => [{'address' => '15.185.1.1', 'port' => '80'}]}
-    @lb = HP[:lb].load_balancers.create(attributes)
-
-    tests('#all').succeeds do
-      HP[:lb].load_balancers.all
-    end
-
-    tests("#get(#{@lb.id})").succeeds do
-      HP[:lb].load_balancers.get(@lb.id)
-    end
-
-    @lb.destroy
-  end
-
-end
diff --git a/tests/hp/models/lb/protocols_tests.rb b/tests/hp/models/lb/protocols_tests.rb
deleted file mode 100644
index 55342ca..0000000
--- a/tests/hp/models/lb/protocols_tests.rb
+++ /dev/null
@@ -1,15 +0,0 @@
-Shindo.tests('HP::LB | protocol collection', ['hp', 'lb', 'protocol']) do
-
-  tests('success') do
-
-    tests('#all').succeeds do
-      HP[:lb].protocols
-    end
-
-    tests('#get("HTTP")').succeeds do
-      HP[:lb].protocols.get('HTTP')
-    end
-
-  end
-
-end
diff --git a/tests/hp/models/network/floating_ip_tests.rb b/tests/hp/models/network/floating_ip_tests.rb
deleted file mode 100644
index b1f8e91..0000000
--- a/tests/hp/models/network/floating_ip_tests.rb
+++ /dev/null
@@ -1,37 +0,0 @@
-Shindo.tests('HP::Network | networking floating ip model', ['hp', 'networking', 'floatingip']) do
-
-  @ext_network = HP[:network].networks.all({'router:external'=>true}).first
-
-  attributes = {:floating_network_id => @ext_network.id}
-  model_tests(HP[:network].floating_ips, attributes, true)
-
-  tests('success') do
-
-    @network = HP[:network].networks.create(:name => 'my_network')
-    attributes = {:name => 'port1', :network_id => @network.id}
-    @port = HP[:network].ports.create(attributes)
-
-    tests('#create').succeeds do
-      attributes = {:floating_network_id => @ext_network.id}
-      @fip = HP[:network].floating_ips.create(attributes)
-      @fip.wait_for { ready? } unless Fog.mocking?
-      !@fip.id.nil?
-    end
-
-    tests("#associate_port(#{@port.id})").succeeds do
-      @fip.associate_port(@port.id)
-    end
-
-    # this will delete the port as well
-    tests('#disassociate_port').succeeds do
-      @fip.disassociate_port
-    end
-
-    tests('#destroy').succeeds do
-      @fip.destroy
-    end
-
-    @network.destroy
-  end
-
-end
diff --git a/tests/hp/models/network/floating_ips_tests.rb b/tests/hp/models/network/floating_ips_tests.rb
deleted file mode 100644
index 5fc986e..0000000
--- a/tests/hp/models/network/floating_ips_tests.rb
+++ /dev/null
@@ -1,8 +0,0 @@
-Shindo.tests('HP::Network | networking floating ips collection', ['hp', 'networking', 'floatingip']) do
-
-  @ext_network = HP[:network].networks.all({'router:external'=>true}).first
-
-  attributes = {:floating_network_id => @ext_network.id}
-  collection_tests(HP[:network].floating_ips, attributes, true)
-
-end
diff --git a/tests/hp/models/network/network_tests.rb b/tests/hp/models/network/network_tests.rb
deleted file mode 100644
index 61d6fb5..0000000
--- a/tests/hp/models/network/network_tests.rb
+++ /dev/null
@@ -1,25 +0,0 @@
-Shindo.tests('HP::Network | networking network model', ['hp', 'networking', 'network']) do
-
-  model_tests(HP[:network].networks, {:name => 'fognetwork'}, true)
-
-  tests('success') do
-
-    tests('#create').succeeds do
-      attributes = {:name => 'my_network', :admin_state_up => true, :shared => false}
-      @network = HP[:network].networks.create(attributes)
-      @network.wait_for { ready? } unless Fog.mocking?
-      !@network.id.nil?
-    end
-
-    tests('#save').succeeds do
-      @network.name = 'my_network_upd'
-      @network.save
-    end
-
-    tests('#destroy').succeeds do
-      @network.destroy
-    end
-
-  end
-
-end
diff --git a/tests/hp/models/network/networks_tests.rb b/tests/hp/models/network/networks_tests.rb
deleted file mode 100644
index fd95e37..0000000
--- a/tests/hp/models/network/networks_tests.rb
+++ /dev/null
@@ -1,15 +0,0 @@
-Shindo.tests('HP::Network | networking networks collection', ['hp', 'networking', 'network']) do
-
-  attributes = {:name => 'my_network', :admin_state_up => true, :shared => false}
-  collection_tests(HP[:network].networks, attributes, true)
-
-  tests('success') do
-
-    tests('#all(filter)').succeeds do
-      networks = HP[:network].networks.all({'router:external'=>true})
-      networks.first.router_external == true
-    end
-
-  end
-
-end
diff --git a/tests/hp/models/network/port_tests.rb b/tests/hp/models/network/port_tests.rb
deleted file mode 100644
index 726a189..0000000
--- a/tests/hp/models/network/port_tests.rb
+++ /dev/null
@@ -1,30 +0,0 @@
-Shindo.tests('HP::Network | networking port model', ['hp', 'networking', 'port']) do
-
-  @network = HP[:network].networks.create(:name => 'my_network')
-
-  attributes = {:name => 'fogport', :network_id => @network.id}
-  model_tests(HP[:network].ports, attributes, true)
-
-  tests('success') do
-
-    tests('#create').succeeds do
-      attributes = {:name => 'my_port', :network_id => @network.id}
-      @port = HP[:network].ports.create(attributes)
-      @port.wait_for { ready? } unless Fog.mocking?
-      !@port.id.nil?
-    end
-
-    tests('#save').succeeds do
-      @port.name = 'my_port_upd'
-      @port.save
-    end
-
-    tests('#destroy').succeeds do
-      @port.destroy
-    end
-
-  end
-
-  @network.destroy
-
-end
diff --git a/tests/hp/models/network/ports_tests.rb b/tests/hp/models/network/ports_tests.rb
deleted file mode 100644
index 9e2164f..0000000
--- a/tests/hp/models/network/ports_tests.rb
+++ /dev/null
@@ -1,21 +0,0 @@
-Shindo.tests('HP::Network | networking ports collection', ['hp', 'networking', 'port']) do
-
-  @network = HP[:network].networks.create(:name => 'my_network')
-
-  attributes = {:name => 'my_port', :network_id => @network.id}
-  collection_tests(HP[:network].ports, attributes, true)
-
-  tests('success') do
-
-    attributes = {:name => 'fogport', :network_id => @network.id}
-    @port = HP[:network].ports.create(attributes)
-
-    tests('#all(filter)').succeeds do
-      HP[:network].ports.all({:name => 'fogport'})
-    end
-
-    @port.destroy
-  end
-
-  @network.destroy
-end
diff --git a/tests/hp/models/network/router_tests.rb b/tests/hp/models/network/router_tests.rb
deleted file mode 100644
index 4baa0fc..0000000
--- a/tests/hp/models/network/router_tests.rb
+++ /dev/null
@@ -1,55 +0,0 @@
-Shindo.tests('HP::Network | networking router model', ['hp', 'networking', 'router']) do
-
-  # needed to test router_interface calls
-  @network = HP[:network].networks.create(:name => 'fognetwork')
-  @subnet = HP[:network].subnets.create({:name => 'fogsubnet', :network_id => @network.id, :cidr => '13.13.13.13/13', :ip_version => 4})
-  @port = HP[:network].ports.create({:name => 'fogport', :network_id => @network.id})
-
-  attributes = {:name => 'fogrouter', :admin_state_up => true}
-  model_tests(HP[:network].routers, attributes, true)
-
-  tests('success') do
-
-    tests('#create').succeeds do
-      attributes = {:name => 'my_router', :admin_state_up => true}
-      @router = HP[:network].routers.create(attributes)
-      @router.wait_for { ready? } unless Fog.mocking?
-      !@router.id.nil?
-    end
-
-    tests('#save').succeeds do
-      @router.name = 'my_router_upd'
-      @router.save
-    end
-
-    tests("#add_interface(#{@subnet.id}, nil) - with subnet").succeeds do
-      @router.add_interface(@subnet.id)
-    end
-    #tests("#remove_interface(#{@subnet.id}, nil) - with subnet").succeeds do
-    #  @router.remove_interface(@subnet.id)
-    #end
-    tests("#add_interface(nil, #{@port.id}) - with port").succeeds do
-      @router.add_interface(nil, @port.id)
-    end
-    ## deletes the port as well
-    tests("#remove_interface(nil, #{@port.id}) - with port").succeeds do
-      @router.remove_interface(nil, @port.id)
-    end
-
-    tests("#add_interface(#{@subnet.id}, #{@port.id}) - with both").succeeds do
-      @router.add_interface(@subnet.id, @port.id) == false
-    end
-    tests("#add_interface(#{@subnet.id}, #{@port.id}) - with both").succeeds do
-      @router.remove_interface(@subnet.id, @port.id) == false
-    end
-
-    tests('#destroy').succeeds do
-      @router.destroy
-    end
-
-  end
-
-  @subnet.destroy
-  @network.destroy
-
-end
diff --git a/tests/hp/models/network/routers_tests.rb b/tests/hp/models/network/routers_tests.rb
deleted file mode 100644
index dcd1a00..0000000
--- a/tests/hp/models/network/routers_tests.rb
+++ /dev/null
@@ -1,19 +0,0 @@
-Shindo.tests('HP::Network | networking routers collection', ['hp', 'networking', 'router']) do
-
-  attributes = {:name => 'my_router', :admin_state_up => true}
-  collection_tests(HP[:network].routers, attributes, true)
-
-  tests('success') do
-
-    attributes = {:name => 'fogrouter', :admin_state_up => true}
-    @router = HP[:network].routers.create(attributes)
-
-    tests('#all(filter)').succeeds do
-      routers = HP[:network].routers.all({:name => 'fogrouter'})
-      routers.first.name == 'fogrouter'
-    end
-
-    @router.destroy
-  end
-
-end
diff --git a/tests/hp/models/network/security_group_rule_tests.rb b/tests/hp/models/network/security_group_rule_tests.rb
deleted file mode 100644
index 1259269..0000000
--- a/tests/hp/models/network/security_group_rule_tests.rb
+++ /dev/null
@@ -1,25 +0,0 @@
-Shindo.tests('HP::Network | networking security group rule model', ['hp', 'networking', 'securitygroup']) do
-
-  @secgroup = HP[:network].security_groups.create({:name => 'fogsecgroup'})
-
-  attributes = {:security_group_id => @secgroup.id, :direction => 'ingress'}
-  model_tests(HP[:network].security_group_rules, attributes, true)
-
-  tests('success') do
-
-    tests('#create').succeeds do
-      attributes = {:security_group_id => @secgroup.id, :direction => 'ingress', :protocol => 'tcp',
-        :port_range_min => 22, :port_range_max => 22, :remote_ip_prefix => '0.0.0.0/0'}
-      @secgrouprule = HP[:network].security_group_rules.create(attributes)
-      @secgrouprule.wait_for { ready? } unless Fog.mocking?
-      !@secgrouprule.id.nil?
-    end
-
-    tests('#destroy').succeeds do
-      @secgrouprule.destroy
-    end
-
-  end
-
-  @secgroup.destroy
-end
diff --git a/tests/hp/models/network/security_group_rules_tests.rb b/tests/hp/models/network/security_group_rules_tests.rb
deleted file mode 100644
index c08baee..0000000
--- a/tests/hp/models/network/security_group_rules_tests.rb
+++ /dev/null
@@ -1,23 +0,0 @@
-Shindo.tests('HP::Network | networking security group rules collection', ['hp', 'networking', 'securitygroup']) do
-
-  @secgroup = HP[:network].security_groups.create({:name => 'my_secgroup'})
-
-  attributes = {:security_group_id => @secgroup.id, :direction => 'ingress'}
-  collection_tests(HP[:network].security_group_rules, attributes, true)
-
-  tests('success') do
-
-    attributes = {:security_group_id => @secgroup.id, :direction => 'ingress', :protocol => 'tcp',
-      :port_range_min => 22, :port_range_max => 22, :remote_ip_prefix => '0.0.0.0/0'}
-    @secgrouprule = HP[:network].security_group_rules.create(attributes)
-
-    tests('#all(filter)').succeeds do
-      secgrouprule = HP[:network].security_group_rules.all({:direction => 'ingress'})
-      secgrouprule.first.direction == 'ingress'
-    end
-
-    @secgrouprule.destroy
-  end
-
-  @secgroup.destroy
-end
diff --git a/tests/hp/models/network/security_group_tests.rb b/tests/hp/models/network/security_group_tests.rb
deleted file mode 100644
index f9d5ed8..0000000
--- a/tests/hp/models/network/security_group_tests.rb
+++ /dev/null
@@ -1,20 +0,0 @@
-Shindo.tests('HP::Network | networking security group model', ['hp', 'networking', 'securitygroup']) do
-
-  model_tests(HP[:network].security_groups, {:name => 'fogsecgroup'}, true)
-
-  tests('success') do
-
-    tests('#create').succeeds do
-      attributes = {:name => 'my_secgroup', :description => 'my sec group desc'}
-      @secgroup = HP[:network].security_groups.create(attributes)
-      @secgroup.wait_for { ready? } unless Fog.mocking?
-      !@secgroup.id.nil?
-    end
-
-    tests('#destroy').succeeds do
-      @secgroup.destroy
-    end
-
-  end
-
-end
diff --git a/tests/hp/models/network/security_groups_tests.rb b/tests/hp/models/network/security_groups_tests.rb
deleted file mode 100644
index 33b5cad..0000000
--- a/tests/hp/models/network/security_groups_tests.rb
+++ /dev/null
@@ -1,20 +0,0 @@
-Shindo.tests('HP::Network | networking security groups collection', ['hp', 'networking', 'securitygroup']) do
-
-  attributes = {:name => 'my_secgroup', :description => 'my sec group desc'}
-  collection_tests(HP[:network].security_groups, attributes, true)
-
-  tests('success') do
-
-    attributes = {:name => 'fogsecgroup', :description => 'fog sec group desc'}
-    @secgroup = HP[:network].security_groups.create(attributes)
-
-    tests('#all(filter)').succeeds do
-      secgroup = HP[:network].security_groups.all({:name => 'fogsecgroup'})
-      secgroup.first.name == 'fogsecgroup'
-    end
-
-    @secgroup.destroy
-
-  end
-
-end
diff --git a/tests/hp/models/network/subnet_tests.rb b/tests/hp/models/network/subnet_tests.rb
deleted file mode 100644
index 9fbfbab..0000000
--- a/tests/hp/models/network/subnet_tests.rb
+++ /dev/null
@@ -1,30 +0,0 @@
-Shindo.tests('HP::Network | networking subnet model', ['hp', 'networking', 'subnet']) do
-
-  @network = HP[:network].networks.create(:name => 'my_network')
-
-  attributes = {:name => 'fogsubnet', :network_id => @network.id, :cidr => '11.11.11.11/11', :ip_version => 4}
-  model_tests(HP[:network].subnets, attributes, true)
-
-  tests('success') do
-
-    tests('#create').succeeds do
-      attributes = {:name => 'my_subnet', :network_id => @network.id, :cidr => '12.12.12.12/12', :ip_version => 4}
-      @subnet = HP[:network].subnets.create(attributes)
-      @subnet.wait_for { ready? } unless Fog.mocking?
-      !@subnet.id.nil?
-    end
-
-    tests('#save').succeeds do
-      @subnet.name = 'my_subnet_upd'
-      @subnet.save
-    end
-
-    tests('#destroy').succeeds do
-      @subnet.destroy
-    end
-
-  end
-
-  @network.destroy
-
-end
diff --git a/tests/hp/models/network/subnets_tests.rb b/tests/hp/models/network/subnets_tests.rb
deleted file mode 100644
index ecac30f..0000000
--- a/tests/hp/models/network/subnets_tests.rb
+++ /dev/null
@@ -1,22 +0,0 @@
-Shindo.tests('HP::Network | networking subnets collection', ['hp', 'networking', 'subnet']) do
-
-  @network = HP[:network].networks.create(:name => 'my_network')
-
-  attributes = {:name => 'my_subnet', :network_id => @network.id, :cidr => '11.11.11.11/11', :ip_version => 4}
-  collection_tests(HP[:network].subnets, attributes, true)
-
-  tests('success') do
-
-    attributes = {:name => 'fogsubnet', :network_id => @network.id, :cidr => '12.12.12.12/12', :ip_version => 4}
-    @subnet = HP[:network].subnets.create(attributes)
-
-    tests('#all(filter)').succeeds do
-      subnets = HP[:network].subnets.all({:cidr => '12.12.12.12/12'})
-      subnets.first.cidr == '12.12.12.12/12'
-    end
-
-    @subnet.destroy
-  end
-
-  @network.destroy
-end
diff --git a/tests/hp/models/storage/directories_tests.rb b/tests/hp/models/storage/directories_tests.rb
deleted file mode 100644
index ea9a947..0000000
--- a/tests/hp/models/storage/directories_tests.rb
+++ /dev/null
@@ -1,23 +0,0 @@
-Shindo.tests("Fog::Storage[:hp] | directories", ['hp', 'storage']) do
-
-  collection_tests(Fog::Storage[:hp].directories, {:key => "fogdirtests"}, true)
-
-  tests('success') do
-
-    tests("#create('fogdirtests')").succeeds do
-      Fog::Storage[:hp].directories.create(:key => 'fogdirtests')
-    end
-
-    tests("#head('fogdirtests')").succeeds do
-      Fog::Storage[:hp].directories.head('fogdirtests')
-    end
-
-    tests("#get('fogdirtests')").succeeds do
-      @directory = Fog::Storage[:hp].directories.get('fogdirtests')
-    end
-
-    @directory.destroy
-
-  end
-
-end
diff --git a/tests/hp/models/storage/directory_tests.rb b/tests/hp/models/storage/directory_tests.rb
deleted file mode 100644
index cf7648f..0000000
--- a/tests/hp/models/storage/directory_tests.rb
+++ /dev/null
@@ -1,131 +0,0 @@
-Shindo.tests("Fog::Storage[:hp] | directory", ['hp', 'storage']) do
-
-  model_tests(Fog::Storage[:hp].directories, {:key => "fogdirtests"}, true) do
-
-    tests('success') do
-
-      tests("#grant('pr')").succeeds do
-        @instance.grant('pr')
-        tests("public?").returns(true) do
-          @instance.public?
-        end
-      end
-
-      tests("#revoke('pr')").succeeds do
-        @instance.revoke('pr')
-        tests("public?").returns(false) do
-          @instance.public?
-        end
-      end
-
-      @instance.files.create(:key => 'sample.txt', :body => lorem_file)
-      tests("#files").succeeds do
-        @instance.files
-      end
-      @instance.files.get('sample.txt').destroy
-
-      tests("#cdn_enable=(true)").succeeds do
-        pending if Fog.mocking?
-        @instance.cdn_enable=(true)
-        tests("cdn_enabled?").returns(true) do
-          pending if Fog.mocking?
-          @instance.cdn_enable?
-        end
-      end
-
-      tests("#cdn_public_url").succeeds do
-        pending if Fog.mocking?
-        @instance.cdn_public_url
-      end
-
-      tests("#cdn_public_ssl_url").succeeds do
-        pending if Fog.mocking?
-        @instance.cdn_public_ssl_url
-      end
-
-      # metadata tests
-      tests('#metadata.all').succeeds do
-        @instance.metadata.all
-      end
-
-      tests('#metadata.set').succeeds do
-        @instance.metadata.set('X-Container-Meta-One' => 'One')
-      end
-
-      tests('#metadata.get set meta').succeeds do
-        meta = @instance.metadata.get('X-Container-Meta-One')
-        tests('gets correct value') do
-          meta.value == 'One'
-        end
-        meta
-      end
-
-      tests('#metadata.update').succeeds do
-        @instance.metadata.update('X-Container-Meta-One' => 'One Updated')
-      end
-
-      tests('#metadata.get updated meta').succeeds do
-        meta = @instance.metadata.get('X-Container-Meta-One')
-        tests('gets correct value') do
-          meta.value == 'One Updated'
-        end
-        meta
-      end
-
-      # metadata set via setter
-      tests('#metadata=').succeeds do
-        @instance.metadata = {'X-Container-Meta-Two' => 'Two'}
-        @instance.save
-      end
-
-      tests('#metadata.get set meta via setter').succeeds do
-        meta = @instance.metadata.get('X-Container-Meta-Two')
-        tests('gets correct value') do
-          meta.value == 'Two'
-        end
-        meta
-      end
-
-      #metadata set via Meta object
-      tests('metadata set via Meta object').succeeds do
-        m = Fog::Storage::HP::Meta.new
-        m.key = 'X-Container-Meta-Three'
-        m.value = 'Three'
-        @instance.metadata << m
-        @instance.save
-      end
-
-      tests('#metadata.get set via Meta object').succeeds do
-        meta = @instance.metadata.get('X-Container-Meta-Three')
-        tests('gets correct value') do
-          meta.value == 'Three'
-        end
-        meta
-      end
-
-      # invalid metadata
-      tests("#metadata.get('invalid-meta')").succeeds do
-        meta = @instance.metadata.get('X-Container-Meta-InValidMeta')
-        tests('gets nil') do
-          meta == nil
-        end
-        meta
-      end
-
-    end
-
-    tests('failure') do
-
-      tests("#grant('invalid-acl')").raises(ArgumentError) do
-        @instance.grant('invalid-acl')
-      end
-
-      tests("#revoke('invalid-acl')").raises(ArgumentError) do
-        @instance.revoke('invalid-acl')
-      end
-
-    end
-
-  end
-
-end
diff --git a/tests/hp/models/storage/file_tests.rb b/tests/hp/models/storage/file_tests.rb
deleted file mode 100644
index 1f69982..0000000
--- a/tests/hp/models/storage/file_tests.rb
+++ /dev/null
@@ -1,44 +0,0 @@
-Shindo.tests("Fog::Storage[:hp] | directory", ['hp', 'storage']) do
-
-  file_attributes = {
-    :key => 'fog_file_tests',
-    :body => lorem_file,
-    :public => true
-  }
-
-  directory_attributes = {
-    :key => 'fogfilestests'
-  }
-
-  @directory = Fog::Storage[:hp].directories.create(directory_attributes)
-
-  model_tests(@directory.files, file_attributes, true) do
-
-    @file = @directory.files.get('fog_file_tests')
-
-    tests('success') do
-
-      tests("#directory").returns(@directory.key) do
-        @file.directory.key
-      end
-
-      tests("#cdn_public_url").succeeds do
-        pending if Fog.mocking?
-        @file.cdn_public_url
-      end
-
-      tests("#cdn_public_ssl_url").succeeds do
-        pending if Fog.mocking?
-        @file.cdn_public_ssl_url
-      end
-
-      tests("#temp_signed_url(60, 'GET')").succeeds do
-        @file.temp_signed_url(60, 'GET')
-      end
-
-    end
-  end
-
-  @directory.destroy
-
-end
diff --git a/tests/hp/models/storage/files_tests.rb b/tests/hp/models/storage/files_tests.rb
deleted file mode 100644
index 4665b20..0000000
--- a/tests/hp/models/storage/files_tests.rb
+++ /dev/null
@@ -1,38 +0,0 @@
-Shindo.tests("Fog::Storage[:hp] | files", ['hp', 'storage']) do
-
-  file_attributes = {
-    :key => 'fog_files_tests',
-    :body => lorem_file
-  }
-
-  directory_attributes = {
-    :key => 'fogfilestests'
-  }
-
-  collection_tests(Fog::Storage[:hp].directories.create(directory_attributes).files, file_attributes, true)
-
-  @directory = Fog::Storage[:hp].directories.create(directory_attributes)
-  @file = @directory.files.create(file_attributes)
-
-  tests('success') do
-
-    tests("#get_url('#{@directory.key}')").succeeds do
-      @directory.files.get_url(@directory.key)
-    end
-
-    tests("#get_cdn_url('#{@directory.key}')").succeeds do
-      pending if Fog.mocking?
-      @directory.files.get_cdn_url(@directory.key)
-    end
-
-    tests("#get_cdn_ssl_url('#{@directory.key}')").succeeds do
-      pending if Fog.mocking?
-      @directory.files.get_cdn_ssl_url(@directory.key)
-    end
-
-  end
-
-  @file.destroy
-  @directory.destroy
-
-end
diff --git a/tests/hp/requests/block_storage/bootable_volume_tests.rb b/tests/hp/requests/block_storage/bootable_volume_tests.rb
deleted file mode 100644
index 81df3e1..0000000
--- a/tests/hp/requests/block_storage/bootable_volume_tests.rb
+++ /dev/null
@@ -1,78 +0,0 @@
-Shindo.tests("HP::BlockStorage | bootable volume requests", ['hp', 'block_storage', 'volumes']) do
-
-  @volume_format = {
-    'status'             => String,
-    'displayDescription' => Fog::Nullable::String,
-    'availabilityZone'   => String,
-    'displayName'        => Fog::Nullable::String,
-    'attachments'        => [Fog::Nullable::Hash],
-    'volumeType'         => Fog::Nullable::String,
-    'snapshotId'         => Fog::Nullable::String,
-    'size'               => Integer,
-    'id'                 => Integer,
-    'createdAt'          => String,
-    'metadata'           => Fog::Nullable::Hash
-  }
-
-  @boot_volume_format = {
-    'status'             => String,
-    'displayDescription' => Fog::Nullable::String,
-    'availabilityZone'   => String,
-    'displayName'        => Fog::Nullable::String,
-    'attachments'        => [Fog::Nullable::Hash],
-    'volumeType'         => Fog::Nullable::String,
-    'snapshotId'         => Fog::Nullable::String,
-    'source_image_id'    => Fog::Nullable::String,
-    'size'               => Integer,
-    'id'                 => Integer,
-    'createdAt'          => String,
-    'metadata'           => Fog::Nullable::Hash
-  }
-
-  @volume_attach_format = {
-    "volumeId" => Integer,
-    "id"       => Integer
-  }
-
-  tests('success') do
-
-    @volume_id = nil
-    @volume_name = "fogbvolumetests"
-    @volume_desc = @volume_name + " desc"
-    @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-    tests("#create_volume(#{@volume_name}, #{@volume_desc}, 10, {'imageRef' => '#{@base_image_id}'})").formats(@volume_format) do
-      data = HP[:block_storage].create_volume(@volume_name, @volume_desc, 10, {'imageRef' => "#{@base_image_id}"}).body['volume']
-      @volume_id = data['id']
-      data
-    end
-
-    HP[:block_storage].volumes.get(@volume_id).wait_for { ready? }
-    tests("#get_bootable_volume_details(#{@volume_id})").formats(@boot_volume_format) do
-      HP[:block_storage].get_bootable_volume_details(@volume_id).body['volume']
-    end
-
-    tests("#list_bootable_volumes").formats({'volumes' => [@boot_volume_format]}) do
-      HP[:block_storage].list_bootable_volumes.body
-    end
-
-    HP[:block_storage].volumes.get(@volume_id).wait_for { ready? }
-    tests("#delete_volume(#{@volume_id})").succeeds do
-      HP[:block_storage].delete_volume(@volume_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests("#get_bootable_volume_details(0)").raises(Fog::HP::BlockStorage::NotFound) do
-      HP[:block_storage].get_bootable_volume_details(0)
-    end
-
-    tests("#delete_volume(0)").raises(Fog::HP::BlockStorage::NotFound) do
-      HP[:block_storage].delete_volume(0)
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/block_storage/snapshot_tests.rb b/tests/hp/requests/block_storage/snapshot_tests.rb
deleted file mode 100644
index 851faf9..0000000
--- a/tests/hp/requests/block_storage/snapshot_tests.rb
+++ /dev/null
@@ -1,56 +0,0 @@
-Shindo.tests('HP::BlockStorage | snapshot requests', ['hp', 'block_storage', 'snapshots']) do
-
-  @snapshot_format = {
-    'status'             => String,
-    'displayDescription' => Fog::Nullable::String,
-    'displayName'        => Fog::Nullable::String,
-    'volumeId'           => Integer,
-    'size'               => Integer,
-    'id'                 => Integer,
-    'createdAt'          => String
-  }
-
-  tests('success') do
-
-    @snapshot_id = nil
-    @snapshot_name = "fogsnapshottests"
-    @snapshot_desc = @snapshot_name + " desc"
-
-    @volume = HP[:block_storage].volumes.create(:name => 'fogvolforsnap', :size => 1)
-    @volume.wait_for { ready? }
-
-    tests("#create_snapshot(#{@snapshot_name}, #{@snapshot_desc}, #{@volume.id})").formats(@snapshot_format) do
-      data = HP[:block_storage].create_snapshot(@snapshot_name, @snapshot_desc, @volume.id).body['snapshot']
-      @snapshot_id = data['id']
-      data
-    end
-
-    tests("#get_snapshot_details(#{@snapshot_id})").formats(@snapshot_format) do
-      HP[:block_storage].get_snapshot_details(@snapshot_id).body['snapshot']
-    end
-
-    tests('#list_snapshots').formats({'snapshots' => [@snapshot_format]}) do
-      HP[:block_storage].list_snapshots.body
-    end
-
-    tests("#delete_snapshot(#{@snapshot_id})").succeeds do
-      HP[:block_storage].delete_snapshot(@snapshot_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#get_snapshot_details(0)').raises(Fog::HP::BlockStorage::NotFound) do
-      HP[:block_storage].get_snapshot_details(0)
-    end
-
-    tests("#delete_snapshot(0)").raises(Fog::HP::BlockStorage::NotFound) do
-      HP[:block_storage].delete_snapshot(0)
-    end
-
-  end
-
-  @volume.destroy
-
-end
diff --git a/tests/hp/requests/block_storage/volume_tests.rb b/tests/hp/requests/block_storage/volume_tests.rb
deleted file mode 100644
index 3a2716b..0000000
--- a/tests/hp/requests/block_storage/volume_tests.rb
+++ /dev/null
@@ -1,94 +0,0 @@
-Shindo.tests("HP::BlockStorage | volume requests", ['hp', 'block_storage', 'volumes']) do
-
-  @volume_format = {
-    'status'             => String,
-    'displayDescription' => Fog::Nullable::String,
-    'availabilityZone'   => String,
-    'displayName'        => Fog::Nullable::String,
-    'attachments'        => [Fog::Nullable::Hash],
-    'volumeType'         => Fog::Nullable::String,
-    'snapshotId'         => Fog::Nullable::String,
-    'size'               => Integer,
-    'id'                 => Integer,
-    'createdAt'          => String,
-    'metadata'           => Fog::Nullable::Hash
-  }
-
-  @volume_attach_format = {
-    "volumeId" => Integer,
-    "id"       => Integer
-  }
-
-  tests('success') do
-
-    @volume_id = nil
-    @volume_name = "fogvolumetests"
-    @volume_desc = @volume_name + " desc"
-    @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-    @server = Fog::Compute[:hp].servers.create(:name => 'fogvoltests', :flavor_id => 100, :image_id => @base_image_id)
-    @server.wait_for { ready? }
-
-    tests("#create_volume(#{@volume_name}, #{@volume_desc}, 1)").formats(@volume_format) do
-      data = HP[:block_storage].create_volume(@volume_name, @volume_desc, 1).body['volume']
-      @volume_id = data['id']
-      data
-    end
-
-    HP[:block_storage].volumes.get(@volume_id).wait_for { ready? }
-    tests("#get_volume_details(#{@volume_id})").formats(@volume_format) do
-      HP[:block_storage].get_volume_details(@volume_id).body['volume']
-    end
-
-    tests('#list_volumes').formats({'volumes' => [@volume_format]}) do
-      HP[:block_storage].list_volumes.body
-    end
-
-    HP[:block_storage].volumes.get(@volume_id).wait_for { ready? }
-    tests("#attach_volume(#{@server.id}, #{@volume_id}, '/dev/sdg')").formats(@volume_attach_format) do
-      Fog::Compute[:hp].attach_volume(@server.id, @volume_id, "/dev/sdg").body['volumeAttachment']
-    end
-
-    HP[:block_storage].volumes.get(@volume_id).wait_for { in_use? } unless Fog.mocking?
-    tests("#detach_volume(#{@server.id}, #{@volume_id})").succeeds do
-      Fog::Compute[:hp].detach_volume(@server.id, @volume_id)
-    end
-
-    HP[:block_storage].volumes.get(@volume_id).wait_for { ready? }
-    tests("#delete_volume(#{@volume_id})").succeeds do
-      HP[:block_storage].delete_volume(@volume_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#get_volume_details(0)').raises(Fog::HP::BlockStorage::NotFound) do
-      HP[:block_storage].get_volume_details(0)
-    end
-
-    tests("#attach_volume(0, 0, '/dev/sdg')").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].attach_volume(0, 0, "/dev/sdg")
-    end
-    tests("#attach_volume(#{@server.id}, 0, '/dev/sdg')").raises(Fog::HP::BlockStorage::NotFound) do
-      pending if Fog.mocking?
-      Fog::Compute[:hp].attach_volume(@server.id, 0, "/dev/sdg")
-    end
-
-    tests("#detach_volume(0, 0)").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].detach_volume(0, 0)
-    end
-    tests("#detach_volume(#{@server.id}, 0)").raises(Fog::HP::BlockStorage::NotFound) do
-      pending if Fog.mocking?
-      Fog::Compute[:hp].detach_volume(@server.id, 0)
-    end
-
-    tests("#delete_volume(0)").raises(Fog::HP::BlockStorage::NotFound) do
-      HP[:block_storage].delete_volume(0)
-    end
-
-  end
-
-  @server.destroy
-
-end
diff --git a/tests/hp/requests/block_storage_v2/snapshot_tests.rb b/tests/hp/requests/block_storage_v2/snapshot_tests.rb
deleted file mode 100644
index f95a4d8..0000000
--- a/tests/hp/requests/block_storage_v2/snapshot_tests.rb
+++ /dev/null
@@ -1,69 +0,0 @@
-Shindo.tests('HP::BlockStorageV2 | snapshot requests', ['hp', 'v2', 'block_storage', 'snapshots']) do
-
-  @snapshot_format = {
-    'status'              => String,
-    'display_description' => Fog::Nullable::String,
-    'display_name'        => Fog::Nullable::String,
-    'volume_id'           => String,
-    'size'                => Integer,
-    'id'                  => String,
-    'created_at'          => String,
-    'metadata'            => Fog::Nullable::Hash
-  }
-
-  tests('success') do
-
-    @snapshot_id = nil
-    @snapshot_name = 'fogsnapshot2tests'
-    @snapshot_desc = @snapshot_name + ' desc'
-
-    @volume = HP[:block_storage_v2].volumes.create(:name => 'fogvol2forsnap', :size => 1)
-    @volume.wait_for { ready? }
-
-    tests("#create_snapshot(#{@volume.id}, {'display_name' => #{@snapshot_name}, 'display_description' => #{@snapshot_desc} })").formats(@snapshot_format) do
-      data = HP[:block_storage_v2].create_snapshot(@volume.id, {'display_name' => @snapshot_name, 'display_description' => @snapshot_desc} ).body['snapshot']
-      @snapshot_id = data['id']
-      data
-    end
-
-    tests("#get_snapshot_details(#{@snapshot_id})").formats(@snapshot_format) do
-      HP[:block_storage_v2].get_snapshot_details(@snapshot_id).body['snapshot']
-    end
-
-    tests("#update_snapshot(#{@snapshot_id}, 'display_name' => '#{@snapshot_name} Updated')").formats(@snapshot_format) do
-      HP[:block_storage_v2].update_snapshot(@snapshot_id, 'display_name' => "#{@snapshot_name} Updated").body['snapshot']
-    end
-
-    tests('#list_snapshots').formats({'snapshots' => [@snapshot_format]}) do
-      HP[:block_storage_v2].list_snapshots.body
-    end
-
-    tests('#list_snapshots_detail').formats({'snapshots' => [@snapshot_format]}) do
-      HP[:block_storage_v2].list_snapshots_detail.body
-    end
-
-    tests("#delete_snapshot(#{@snapshot_id})").succeeds do
-      HP[:block_storage_v2].delete_snapshot(@snapshot_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#get_snapshot_details(0)').raises(Fog::HP::BlockStorageV2::NotFound) do
-      HP[:block_storage_v2].get_snapshot_details(0)
-    end
-
-    tests('#update_snapshot(0)').raises(Fog::HP::BlockStorageV2::NotFound) do
-      HP[:block_storage_v2].update_snapshot(0)
-    end
-
-    tests('#delete_snapshot(0)').raises(Fog::HP::BlockStorageV2::NotFound) do
-      HP[:block_storage_v2].delete_snapshot(0)
-    end
-
-  end
-
-  @volume.destroy
-
-end
diff --git a/tests/hp/requests/block_storage_v2/volume_backup_tests.rb b/tests/hp/requests/block_storage_v2/volume_backup_tests.rb
deleted file mode 100644
index 18437b1..0000000
--- a/tests/hp/requests/block_storage_v2/volume_backup_tests.rb
+++ /dev/null
@@ -1,117 +0,0 @@
-Shindo.tests("Fog::HP::BlockStorageV2 | volume backup requests", ['hp', 'v2', 'block_storage', 'volume_backup']) do
-
-  @backup_details_format = {
-    'id'                  => String,
-    'status'              => String,
-    'name'                => Fog::Nullable::String,
-    'description'         => Fog::Nullable::String,
-    'container'           => String,
-    'availability_zone'   => String,
-    'created_at'          => String,
-    'volume_id'           => String,
-    'size'                => Integer,
-    'links'               => [Fog::Nullable::Hash],
-    'fail_reason'         => Fog::Nullable::String,
-    'object_count'        => Integer
-  }
-
-  @backup_format = {
-    'id'     => String,
-    'name'   => Fog::Nullable::String,
-    'links'  => [Fog::Nullable::Hash]
-  }
-
-  @restore_format = {
-    'backup_id' => String,
-    'volume_id' => String
-  }
-
-  tests('success') do
-
-    @backup_id = nil
-    @backup_name = 'fogvolbackup2tests'
-    @backup_desc = @backup_name + ' desc'
-
-    @volume = HP[:block_storage_v2].volumes.create(:name => 'fogvol2forbackup', :size => 1)
-    @volume.wait_for { ready? }
-
-    @target_volume = HP[:block_storage_v2].volumes.create(:name => 'fogtargetvolume', :size => 2)
-    @target_volume.wait_for { ready? }
-
-    tests("#create_volume_backup(#{@volume.id}, {'name' => #{@backup_name}, 'description' => #{@backup_desc}, 'container' => 'my_backups')").formats(@backup_format) do
-      data = HP[:block_storage_v2].create_volume_backup(@volume.id, {'name' => @backup_name, 'description' => @backup_desc, 'container' => 'my_backups'}).body['backup']
-      @backup_id = data['id']
-      data
-    end
-
-    tests("#get_volume_backup_details(#{@backup_id})").formats(@backup_details_format) do
-      HP[:block_storage_v2].get_volume_backup_details(@backup_id).body['backup']
-    end
-
-    tests('#list_volume_backups').formats({'backups' => [@backup_format]}) do
-      HP[:block_storage_v2].list_volume_backups.body
-    end
-
-    tests('#list_volume_backups_detail').formats({'backups' => [@backup_details_format]}) do
-      HP[:block_storage_v2].list_volume_backups_detail.body
-    end
-
-    # restore into new volume
-    tests("#restore_volume_backup(#{@backup_id}").formats(@restore_format) do
-      data = HP[:block_storage_v2].restore_volume_backup(@backup_id).body['restore']
-      restored_volume_id = data['volume_id']
-      restored_volume = HP[:block_storage_v2].get_volume_details(restored_volume_id).body['volume']
-      test ('should create a new volume with backup restored') do
-        restored_volume['display_name'] == @volume.name
-        restored_volume['display_description'] == @volume.description
-        restored_volume['availability_zone'] == @volume.availability_zone
-        restored_volume['size'] == @volume.size
-      end
-      data
-    end
-
-    ## restore into existing volume
-    tests("#restore_volume_backup(#{@backup_id}, {'volume_id' => #{@target_volume.id}}").formats(@restore_format) do
-      data = HP[:block_storage_v2].restore_volume_backup(@backup_id, {'volume_id' => @target_volume.id}).body['restore']
-      restored_volume_id = data['volume_id']
-      restored_volume = HP[:block_storage_v2].get_volume_details(restored_volume_id).body['volume']
-      test ('should overwrite the existing volume with backup restored') do
-        restored_volume['id'] == @target_volume.id
-        restored_volume['display_name'] == @volume.name
-        restored_volume['display_description'] == @volume.description
-        restored_volume['availability_zone'] == @volume.availability_zone
-        restored_volume['size'] == @volume.size
-      end
-      data
-    end
-    #
-    tests("#delete_volume_backup(#{@backup_id})").succeeds do
-      HP[:block_storage_v2].delete_volume_backup(@backup_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#get_volume_backup_details("0")').raises(Fog::HP::BlockStorageV2::NotFound) do
-      HP[:block_storage_v2].get_volume_backup_details('0')
-    end
-
-    tests('#restore_volume_backup("0")').raises(Fog::HP::BlockStorageV2::NotFound) do
-      HP[:block_storage_v2].restore_volume_backup('0')
-    end
-
-    tests("#restore_volume_backup(#{@backup_id}, '0')").raises(Fog::HP::BlockStorageV2::NotFound) do
-      HP[:block_storage_v2].restore_volume_backup(@backup_id, '0')
-    end
-
-    tests('#delete_volume_backup("0")').raises(Fog::HP::BlockStorageV2::NotFound) do
-      HP[:block_storage_v2].delete_volume_backup('0')
-    end
-
-  end
-
-  @target_volume.destroy
-  @volume.destroy
-
-end
diff --git a/tests/hp/requests/block_storage_v2/volume_tests.rb b/tests/hp/requests/block_storage_v2/volume_tests.rb
deleted file mode 100644
index 646ca13..0000000
--- a/tests/hp/requests/block_storage_v2/volume_tests.rb
+++ /dev/null
@@ -1,106 +0,0 @@
-Shindo.tests("Fog::HP::BlockStorageV2 | volume requests", ['hp', 'v2', 'block_storage', 'volumes']) do
-
-  compute_service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @volume_format = {
-    'id'                  => String,
-    'display_name'        => Fog::Nullable::String,
-    'display_description' => Fog::Nullable::String,
-    'size'                => Integer,
-    'status'              => String,
-    'volume_type'         => Fog::Nullable::String,
-    'snapshot_id'         => Fog::Nullable::String,
-    'source_volid'        => Fog::Nullable::String,
-    'bootable'            => Fog::Boolean,
-    'created_at'          => String,
-    'availability_zone'   => String,
-    'attachments'         => [Fog::Nullable::Hash],
-    'metadata'            => Fog::Nullable::Hash
-  }
-
-  @volume_attach_format = {
-    'device'    => String,
-    'serverId'  => String,
-    'volumeId'  => String,
-    'id'        => String
-  }
-
-  tests('success') do
-
-    @volume_id = nil
-    @volume_name = 'fogvolume2tests'
-    @volume_desc = @volume_name + ' desc'
-    @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-    @server = compute_service.servers.create(:name => 'fogvoltests', :flavor_id => 100, :image_id => @base_image_id)
-    @server.wait_for { ready? }
-
-    tests("#create_volume('display_name' => #{@volume_name}, 'display_description' => #{@volume_desc}, 'size' => 1)").formats(@volume_format) do
-      data = HP[:block_storage_v2].create_volume('display_name' => @volume_name, 'display_description' => @volume_desc, 'size' => 1).body['volume']
-      @volume_id = data['id']
-      data
-    end
-
-    tests("#get_volume_details(#{@volume_id})").formats(@volume_format) do
-      HP[:block_storage_v2].get_volume_details(@volume_id).body['volume']
-    end
-
-    tests("#update_volume(#{@volume_id}, 'display_name' => #{@volume_name}+' Upd'").formats(@volume_format) do
-      data = HP[:block_storage_v2].update_volume(@volume_id, 'display_name' => @volume_name).body['volume']
-      @volume_id = data['id']
-      data
-    end
-
-    tests('#list_volumes').formats({'volumes' => [@volume_format]}) do
-      HP[:block_storage_v2].list_volumes.body
-    end
-
-    tests('#list_volumes_detail').formats({'volumes' => [@volume_format]}) do
-      HP[:block_storage_v2].list_volumes_detail.body
-    end
-
-    tests("#attach_volume(#{@server.id}, #{@volume_id}, '/dev/sdg')").formats(@volume_attach_format) do
-      compute_service.attach_volume(@server.id, @volume_id, "/dev/sdg").body['volumeAttachment']
-    end
-
-    tests("#detach_volume(#{@server.id}, #{@volume_id})").succeeds do
-      compute_service.detach_volume(@server.id, @volume_id)
-    end
-
-    tests("#delete_volume(#{@volume_id})").succeeds do
-      HP[:block_storage_v2].delete_volume(@volume_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#get_volume_details(0)').raises(Fog::HP::BlockStorageV2::NotFound) do
-      HP[:block_storage_v2].get_volume_details(0)
-    end
-
-    tests("#attach_volume(0, 0, '/dev/sdg')").raises(Fog::Compute::HPV2::NotFound) do
-      compute_service.attach_volume(0, 0, "/dev/sdg")
-    end
-    tests("#attach_volume(#{@server.id}, 0, '/dev/sdg')").raises(Fog::HP::BlockStorageV2::NotFound) do
-      pending if Fog.mocking?
-      compute_service.attach_volume(@server.id, 0, "/dev/sdg")
-    end
-
-    tests('#detach_volume(0, 0)').raises(Fog::Compute::HPV2::NotFound) do
-      compute_service.detach_volume(0, 0)
-    end
-    tests("#detach_volume(#{@server.id}, 0)").raises(Fog::HP::BlockStorageV2::NotFound) do
-      pending if Fog.mocking?
-      compute_service.detach_volume(@server.id, 0)
-    end
-
-    tests('#delete_volume(0)').raises(Fog::HP::BlockStorageV2::NotFound) do
-      HP[:block_storage_v2].delete_volume(0)
-    end
-
-  end
-
-  @server.destroy
-
-end
diff --git a/tests/hp/requests/cdn/container_tests.rb b/tests/hp/requests/cdn/container_tests.rb
deleted file mode 100644
index c1d8910..0000000
--- a/tests/hp/requests/cdn/container_tests.rb
+++ /dev/null
@@ -1,56 +0,0 @@
-Shindo.tests("Fog::CDN[:hp] | container requests", ['hp']) do
-
-  @cdn_containers_format = [{
-    'x-cdn-ssl-uri' => String,
-    'cdn_enabled'   => Fog::Boolean,
-    'name'          => String,
-    'x-cdn-uri'     => String,
-    'ttl'           => Integer,
-    'log_retention' => Fog::Boolean
-  }]
-
-  tests('success') do
-
-    tests("#put_container('fogcdncontainertests')").succeeds do
-      Fog::CDN[:hp].put_container('fogcdncontainertests')
-    end
-
-    tests("duplicate #put_container('fogcdncontainertests')").succeeds do
-      Fog::CDN[:hp].put_container('fogcdncontainertests')
-    end
-
-    tests("#get_containers").formats(@cdn_containers_format) do
-      Fog::CDN[:hp].get_containers.body
-    end
-
-    tests("#post_container('fogcdncontainertests', {'x-ttl' => 3200})").succeeds do
-      Fog::CDN[:hp].post_container('fogcdncontainertests', {'x-ttl' => 3200})
-    end
-
-    tests("#head_container('fogcdncontainertests')").succeeds do
-      Fog::CDN[:hp].head_container('fogcdncontainertests')
-    end
-
-    tests("#delete_container('fogcdncontainertests')").succeeds do
-      Fog::CDN[:hp].delete_container('fogcdncontainertests')
-    end
-
-  end
-
-  tests('failure') do
-
-    tests("#post_container('fognoncdncontainer', {'x-ttl' => 3200})").raises(Fog::CDN::HP::NotFound) do
-      Fog::CDN[:hp].post_container('fogcdnnoncontainer', {'x-ttl' => 3200})
-    end
-
-    tests("#head_container('fognoncdncontainer')").raises(Fog::CDN::HP::NotFound) do
-      Fog::CDN[:hp].head_container('fognoncdncontainer')
-    end
-
-    tests("#delete_container('fognoncdncontainer')").raises(Fog::CDN::HP::NotFound) do
-      Fog::CDN[:hp].delete_container('fognoncdncontainer')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute/address_tests.rb b/tests/hp/requests/compute/address_tests.rb
deleted file mode 100644
index 84c0b57..0000000
--- a/tests/hp/requests/compute/address_tests.rb
+++ /dev/null
@@ -1,72 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | address requests", ['hp', 'address']) do
-
-  @floating_ips_format = {
-    'instance_id' => Fog::Nullable::Integer,
-    'ip'          => Fog::Nullable::String,
-    'fixed_ip'    => Fog::Nullable::String,
-    'id'          => Integer
-  }
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-  tests('success') do
-
-    tests("#list_addresses").formats({'floating_ips' => [@floating_ips_format]}) do
-      Fog::Compute[:hp].list_addresses.body
-    end
-
-    tests("#allocate_address").formats(@floating_ips_format) do
-      data = Fog::Compute[:hp].allocate_address.body['floating_ip']
-      @address_id = data['id']
-      @ip_address = data['ip']
-      data
-    end
-
-    tests("#get_address('#{@address_id}')").formats(@floating_ips_format) do
-      Fog::Compute[:hp].get_address(@address_id).body['floating_ip']
-    end
-
-    @server = Fog::Compute[:hp].servers.create(:name => 'fogaddresstests', :flavor_id => 100, :image_id => @base_image_id)
-    @server.wait_for { ready? }
-
-    tests("#associate_address('#{@server.id}', '#{@ip_address}')").succeeds do
-      Fog::Compute[:hp].associate_address(@server.id, @ip_address)
-      tests("#get_address").returns(@ip_address, "server has associated ip address") do
-        @server.reload
-        @server.addresses['private'][1]['addr']
-      end
-    end
-
-    tests("#disassociate_address('#{@server.id}', '#{@ip_address}')").succeeds do
-      Fog::Compute[:hp].disassociate_address(@server.id, @ip_address)
-    end
-
-    @server.destroy
-
-    tests("#release_address('#{@address_id}')").succeeds do
-      Fog::Compute[:hp].release_address(@address_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests("#get_address('invalidaddress', 'invalidip')").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].get_address('invalidaddress')
-    end
-
-    tests("#associate_address('invalidserver', 'invalidip')").raises(Excon::Errors::InternalServerError) do
-      Fog::Compute[:hp].associate_address('invalidserver', 'invalidip')
-    end
-
-    tests("#disassociate_address('invalidserver', 'invalidip')").raises(Excon::Errors::InternalServerError) do
-      Fog::Compute[:hp].disassociate_address('invalidserver', 'invalidip')
-    end
-
-    tests("#release_address('invalidaddress')").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].release_address('invalidaddress')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute/flavor_tests.rb b/tests/hp/requests/compute/flavor_tests.rb
deleted file mode 100644
index 6e723fa..0000000
--- a/tests/hp/requests/compute/flavor_tests.rb
+++ /dev/null
@@ -1,45 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | flavor requests", ['hp']) do
-
-  @flavor_format = {
-    'rxtx_quota' => Integer,
-    'rxtx_cap'   => Integer,
-    'vcpus'      => Integer,
-    'swap'       => Integer,
-    'disk'       => Integer,
-    'ram'        => Integer,
-    'id'         => Integer,
-    'links'      => [Hash],
-    'name'       => String
-  }
-
-  @list_flavors_format = {
-    'id'    => Integer,
-    'name'  => String,
-    'links' => [Hash]
-  }
-
-  tests('success') do
-
-    tests('#list_flavors').formats({'flavors' => [@list_flavors_format]}) do
-      Fog::Compute[:hp].list_flavors.body
-    end
-
-    tests('#get_flavor_details(1)').formats(@flavor_format) do
-      Fog::Compute[:hp].get_flavor_details(1).body['flavor']
-    end
-
-    tests('#list_flavors_detail').formats({'flavors' => [@flavor_format]}) do
-      Fog::Compute[:hp].list_flavors_detail.body
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#get_flavor_details(9999)').raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].get_flavor_details(9999)
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute/image_tests.rb b/tests/hp/requests/compute/image_tests.rb
deleted file mode 100644
index 0520f41..0000000
--- a/tests/hp/requests/compute/image_tests.rb
+++ /dev/null
@@ -1,79 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | image requests", ['hp']) do
-
-  @image_format = {
-    'id'        => String,
-    'links'     => [Hash],
-    'metadata'  => Fog::Nullable::Hash,
-    'server'    => Fog::Nullable::Hash,
-    'name'      => String,
-    'progress'  => Fog::Nullable::Integer,
-    'status'    => String,
-    'created'   => Fog::Nullable::String,
-    'updated'   => Fog::Nullable::String
-  }
-
-  @list_images_format = {
-    'id'        => String,
-    'links'     => Fog::Nullable::Array,
-    'name'      => String
-  }
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-  tests('success') do
-    @server_name = "fogservertest"
-    @image_name  = "fogimagetest"
-    @server = Fog::Compute[:hp].servers.create(:name => @server_name, :flavor_id => 100, :image_id => @base_image_id)
-    @server.wait_for { ready? }
-    @image_id = nil
-
-    tests("#create_image(#{@server.id}, #{@image_name})").formats({}) do
-      response = Fog::Compute[:hp].create_image(@server.id, @image_name)
-      # no data is returned for the call, so get id off the header
-      @image_id = response.headers["Location"].split("/")[5]
-      {}
-    end
-
-    unless Fog.mocking?
-      Fog::Compute[:hp].images.get(@image_id).wait_for { ready? }
-    end
-
-    tests("#get_image_details(#{@image_id})").formats(@image_format) do
-      pending if Fog.mocking?
-      Fog::Compute[:hp].get_image_details(@image_id).body['image']
-    end
-
-    tests('#list_images').formats({'images' => [@list_images_format]}) do
-      Fog::Compute[:hp].list_images.body
-    end
-
-    tests('#list_images_detail').formats({'images' => [@image_format]}) do
-      Fog::Compute[:hp].list_images_detail.body
-    end
-
-    unless Fog.mocking?
-      Fog::Compute[:hp].images.get(@image_id).wait_for { ready? }
-    end
-
-    tests("#delete_image(#{@image_id})").succeeds do
-      pending if Fog.mocking?
-      Fog::Compute[:hp].delete_image(@image_id)
-    end
-
-    @server.destroy
-
-  end
-
-  tests('failure') do
-
-    tests('#delete_image(0)').raises(Excon::Errors::InternalServerError) do
-      Fog::Compute[:hp].delete_image(0)
-    end
-
-    tests('#get_image_details(0)').raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].get_image_details(0)
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute/key_pair_tests.rb b/tests/hp/requests/compute/key_pair_tests.rb
deleted file mode 100644
index 27ae7c4..0000000
--- a/tests/hp/requests/compute/key_pair_tests.rb
+++ /dev/null
@@ -1,65 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | key pair requests", ['hp']) do
-
-  tests('success') do
-
-    @keypair_format = {
-      'public_key'   => String,
-      'fingerprint'  => String,
-      'name'         => String
-    }
-
-    @keypairs_format = {
-      'keypairs' => [{
-        'keypair' => {
-          'public_key'   => String,
-          'fingerprint'  => String,
-          'name'         => Fog::Nullable::String
-        }
-      }]
-    }
-
-    @key_pair_name = 'fog_create_key_pair'
-    @public_key_material = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA1SL+kgze8tvSFW6Tyj3RyZc9iFVQDiCKzjgwn2tS7hyWxaiDhjfY2mBYSZwFdKN+ZdsXDJL4CPutUg4DKoQneVgIC1zuXrlpPbaT0Btu2aFd4qNfJ85PBrOtw2GrWZ1kcIgzZ1mMbQt6i1vhsySD2FEj+5kGHouNxQpI5dFR5K+nGgcTLFGnzb/MPRBk136GVnuuYfJ2I4va/chstThoP8UwnoapRHcBpwTIfbmmL91BsRVqjXZEUT73nxpxFeXXidYwhHio+5dXwE0aM/783B/3cPG6FVoxrBvjoNpQpAcEyjtRh9lpwHZtSEW47WNzpIW3PhbQ8j4MryznqF1Rhw=='
-
-    tests("#create_key_pair('#{@key_pair_name}')").formats({'keypair' => @keypair_format.merge({'private_key' => String, 'user_id' => String})}) do
-      body = Fog::Compute[:hp].create_key_pair(@key_pair_name).body
-      tests("private_key").returns(OpenSSL::PKey::RSA, "is a valid private RSA key") do
-        OpenSSL::PKey::RSA.new(body['keypair']['private_key']).class
-      end
-      body
-    end
-
-    tests('#list_key_pairs').formats(@keypairs_format) do
-      Fog::Compute[:hp].list_key_pairs.body
-    end
-
-    tests("#delete_key_pair('#{@key_pair_name}')").succeeds do
-      Fog::Compute[:hp].delete_key_pair(@key_pair_name)
-    end
-
-    tests("#create_key_pair('fog_import_key_pair', '#{@public_key_material}')").formats({'keypair' => @keypair_format.merge({'user_id' => String})}) do
-      Fog::Compute[:hp].create_key_pair('fog_import_key_pair', @public_key_material).body
-    end
-
-    tests("#delete_key_pair('fog_import_key_pair)").succeeds do
-      Fog::Compute[:hp].delete_key_pair('fog_import_key_pair')
-    end
-
-  end
-  tests('failure') do
-
-    tests("#delete_key_pair('not_a_key_name')").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].delete_key_pair('not_a_key_name')
-    end
-
-    @key_pair = Fog::Compute[:hp].key_pairs.create(:name => 'fog_key_pair')
-
-    tests("duplicate #create_key_pair('#{@key_pair.name}')").raises(Excon::Errors::BadRequest) do
-      Fog::Compute[:hp].create_key_pair(@key_pair.name)
-    end
-
-    @key_pair.destroy
-
-  end
-
-end
diff --git a/tests/hp/requests/compute/metadata_tests.rb b/tests/hp/requests/compute/metadata_tests.rb
deleted file mode 100644
index 1094cdd..0000000
--- a/tests/hp/requests/compute/metadata_tests.rb
+++ /dev/null
@@ -1,70 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | metadata requests", ['hp']) do
-
-  @metadata_format = {
-    'metadata'  => Fog::Nullable::Hash
-  }
-  @metaitem_format = {
-    'meta'  => Fog::Nullable::Hash
-  }
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-  tests('success') do
-    @server_name = "fogmetadatatest"
-    @server = Fog::Compute[:hp].servers.create(:name => @server_name, :flavor_id => 100, :image_id => @base_image_id, :metadata => {'Meta1' => 'MetaValue1', 'Meta2' => 'MetaValue2'} )
-    @server.wait_for { ready? }
-
-    tests("#list_metadata('servers', #{@server.id})").formats(@metadata_format) do
-      metadata = Fog::Compute[:hp].list_metadata('servers', @server.id).body
-      test ("metadata exists") do
-        metadata['metadata']['Meta1'] == "MetaValue1"
-      end
-      metadata
-    end
-
-    tests("#set_metadata('servers', #{@server.id}, {'MetaNew3' => 'MetaNewValue3'})").formats(@metadata_format) do
-      data = Fog::Compute[:hp].set_metadata('servers', @server.id, {'MetaNew3' => 'MetaNewValue3'}).body
-      test ("metadata set correctly") do
-        metadata = Fog::Compute[:hp].list_metadata('servers', @server.id).body
-        metadata['metadata']['MetaNew3'] == "MetaNewValue3"
-      end
-      data
-    end
-
-    tests("#update_metadata('servers', #{@server.id}, {'MetaUpd4' => 'MetaUpdValue4'})").formats(@metadata_format) do
-      data = Fog::Compute[:hp].update_metadata('servers', @server.id, {'MetaUpd4' => 'MetaUpdValue4'}).body
-      test ("metadata updated correctly") do
-        metadata = Fog::Compute[:hp].list_metadata('servers', @server.id).body
-        metadata['metadata']['MetaUpd4'] == "MetaUpdValue4"
-      end
-      data
-    end
-
-    tests("#get_meta('servers', #{@server.id}, 'MetaNew3')").formats(@metaitem_format) do
-      mitem = Fog::Compute[:hp].get_meta('servers', @server.id, 'MetaNew3').body
-      test ("metadata item exists") do
-        mitem['meta']['MetaNew3'] == "MetaNewValue3"
-      end
-      mitem
-    end
-
-    tests("#update_meta('servers', #{@server.id}, 'MetaNew3', 'MetaUpdValue3')").formats(@metaitem_format) do
-      mitem = Fog::Compute[:hp].update_meta('servers', @server.id, 'MetaNew3', 'MetaUpdValue3').body
-      test ("metadata item updated correctly") do
-        mitem['meta']['MetaNew3'] == "MetaUpdValue3"
-      end
-      mitem
-    end
-
-    tests("#delete_meta('servers', #{@server.id}, 'MetaNew3')").succeeds do
-      data = Fog::Compute[:hp].delete_meta('servers', @server.id, 'MetaNew3').body
-      test ("metadata item deleted correctly") do
-        metadata = Fog::Compute[:hp].list_metadata('servers', @server.id).body
-        metadata['metadata'].fetch('MetaNew3', nil) == nil
-      end
-      data
-    end
-
-    @server.destroy
-  end
-end
diff --git a/tests/hp/requests/compute/persistent_server_tests.rb b/tests/hp/requests/compute/persistent_server_tests.rb
deleted file mode 100644
index 5d6df7e..0000000
--- a/tests/hp/requests/compute/persistent_server_tests.rb
+++ /dev/null
@@ -1,66 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | persistent server requests", ['hp', 'compute']) do
-
-  @server_format = {
-    'addresses'   => Fog::Nullable::Hash,
-    'flavor'      => Hash,
-    'id'          => Integer,
-    'links'       => [Hash],
-    'hostId'      => String,
-    'metadata'    => Fog::Nullable::Hash,
-    'name'        => String,
-    'accessIPv4'  => Fog::Nullable::String,
-    'accessIPv6'  => Fog::Nullable::String,
-    'progress'    => Fog::Nullable::Integer,
-    'status'      => String,
-    'created'     => String,
-    'updated'     => String,
-    'user_id'     => String,
-    'tenant_id'   => String,
-    'uuid'        => String,
-    'config_drive' => Fog::Nullable::String,
-    'security_groups' => [Hash],
-    'key_name'    => Fog::Nullable::String
-  }
-
-  @volume = HP[:block_storage].volumes.create(:name => 'fogvoltests', :description => 'fog vol test desc', :size => 1)
-  @volume.wait_for { ready? }
-
-  tests('success') do
-
-    @server_id = nil
-    @server_name = "fogpersservertests"
-    @block_device_mapping = [{ 'volume_size' => '',
-                               'volume_id' => "#{@volume.id}",
-                               'delete_on_termination' => '0',
-                               'device_name' => 'vda'
-                            }]
-
-    tests("#create_persistent_server(#{@server_name}, 100, #{@block_device_mapping})").formats(@server_format.merge('adminPass' => String)) do
-      data = Fog::Compute[:hp].create_persistent_server(@server_name, 100, @block_device_mapping).body['server']
-      @server_id = data['id']
-      data
-    end
-
-    Fog::Compute[:hp].servers.get(@server_id).wait_for { ready? }
-
-    tests("#get_server_details(#{@server_id})").formats(@server_format) do
-      Fog::Compute[:hp].get_server_details(@server_id).body['server']
-    end
-
-    tests("#delete_server(#{@server_id})").succeeds do
-      Fog::Compute[:hp].delete_server(@server_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests("#create_persistent_server(#{@server_name}, 100, nil)").raises(Excon::Errors::BadRequest) do
-      Fog::Compute[:hp].create_persistent_server(@server_name, 100, nil)
-    end
-
-  end
-
-  HP[:block_storage].delete_volume(@volume.id)
-
-end
diff --git a/tests/hp/requests/compute/security_group_rule_tests.rb b/tests/hp/requests/compute/security_group_rule_tests.rb
deleted file mode 100644
index c447c1d..0000000
--- a/tests/hp/requests/compute/security_group_rule_tests.rb
+++ /dev/null
@@ -1,54 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | security group requests", ['hp']) do
-
-  @security_group_rule_format = {
-    'from_port'       => Integer,
-    'group'           => Fog::Nullable::Hash,
-    'ip_protocol'     => String,
-    'to_port'         => Integer,
-    'parent_group_id' => Integer,
-    'ip_range'        => {
-      'cidr' => String
-    },
-    'id'              => Integer
-  }
-
-  tests('success') do
-    @security_group = Fog::Compute[:hp].security_groups.create(:name => 'fog_security_group', :description => 'tests group')
-
-    tests("tcp #create_security_group_rule('#{@security_group.id}', 'tcp', '80', '80', '0.0.0.0/0'}')").formats({'security_group_rule' => @security_group_rule_format}) do
-      data = Fog::Compute[:hp].create_security_group_rule(@security_group.id, 'tcp', '80', '80', '0.0.0.0/0').body
-      @sec_group_rule_id_1 = data['security_group_rule']['id']
-      data
-    end
-
-    tests("icmp #create_security_group_rule('#{@security_group.id}', 'icmp', '-1', '-1', '0.0.0.0/0'}')").formats({'security_group_rule' => @security_group_rule_format}) do
-      data = Fog::Compute[:hp].create_security_group_rule(@security_group.id, 'icmp', '-1', '-1', '0.0.0.0/0').body
-      @sec_group_rule_id_2 = data['security_group_rule']['id']
-      data
-    end
-
-    tests("tcp #delete_security_group_rule('#{@sec_group_rule_id_1}')").succeeds do
-      Fog::Compute[:hp].delete_security_group_rule(@sec_group_rule_id_1).body
-    end
-
-    tests("icmp #delete_security_group_rule('#{@sec_group_rule_id_2}')").succeeds do
-      Fog::Compute[:hp].delete_security_group_rule(@sec_group_rule_id_2).body
-    end
-
-    @security_group.destroy
-
-  end
-
-  tests('failure') do
-
-    tests("#create_security_group_rule(0, 'tcp', '80', '80', '0.0.0.0/0'}')").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].create_security_group_rule(0, 'tcp', '80', '80', '0.0.0.0/0')
-    end
-
-    tests("#delete_security_group_rule(0)").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].delete_security_group_rule(0)
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute/security_group_tests.rb b/tests/hp/requests/compute/security_group_tests.rb
deleted file mode 100644
index d93939d..0000000
--- a/tests/hp/requests/compute/security_group_tests.rb
+++ /dev/null
@@ -1,63 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | security group requests", ['hp']) do
-
-  @security_groups_format = {
-    'security_groups' => [{
-      'rules'       => [Fog::Nullable::Hash],
-      'tenant_id'   => String,
-      'id'          => Integer,
-      'name'        => String,
-      'description' => String
-    }]
-  }
-
-  @security_group_format = {
-    'rules'       => [Fog::Nullable::Hash],
-    'tenant_id'   => String,
-    'id'          => Integer,
-    'name'        => String,
-    'description' => String
-  }
-
-  tests('success') do
-
-    tests("#create_security_group('fog_security_group', 'tests group')").formats({'security_group' => @security_group_format}) do
-      data = Fog::Compute[:hp].create_security_group('fog_security_group', 'tests group').body
-      @sec_group_id = data['security_group']['id']
-      data
-    end
-
-    tests("#get_security_group('#{@sec_group_id}')").formats({'security_group' => @security_group_format}) do
-      Fog::Compute[:hp].get_security_group(@sec_group_id).body
-    end
-
-    tests("#list_security_groups").formats(@security_groups_format) do
-      Fog::Compute[:hp].list_security_groups.body
-    end
-
-    tests("#delete_security_group('#{@sec_group_id}')").succeeds do
-      Fog::Compute[:hp].delete_security_group(@sec_group_id).body
-    end
-
-  end
-
-  tests('failure') do
-
-    @security_group = Fog::Compute[:hp].security_groups.create(:name => 'fog_security_group_fail', :description => 'tests group')
-
-    tests("duplicate #create_security_group(#{@security_group.name}, #{@security_group.description})").raises(Excon::Errors::BadRequest) do
-      Fog::Compute[:hp].create_security_group(@security_group.name, @security_group.description)
-    end
-
-    tests("#get_security_group(0)").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].get_security_group(0)
-    end
-
-    tests("#delete_security_group(0)").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].delete_security_group(0)
-    end
-
-    @security_group.destroy
-
-  end
-
-end
diff --git a/tests/hp/requests/compute/server_address_tests.rb b/tests/hp/requests/compute/server_address_tests.rb
deleted file mode 100644
index 2b96994..0000000
--- a/tests/hp/requests/compute/server_address_tests.rb
+++ /dev/null
@@ -1,45 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | address requests", ['hp']) do
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-  tests('success') do
-    @server = Fog::Compute[:hp].servers.create(:name => 'fogaddresstests', :flavor_id => 100, :image_id => @base_image_id)
-    @server.wait_for { ready? }
-    @address = Fog::Compute[:hp].addresses.create
-    @address.server = @server
-
-    # the network name is currently named 'private'
-    tests("#list_server_addresses(#{@server.id})").formats({'addresses' => {"private" => [{'version' => Integer, 'addr' => String}]}}) do
-      Fog::Compute[:hp].list_server_addresses(@server.id).body
-    end
-
-    tests("#list_server_private_addresses(#{@server.id}, 'private')").formats({'private' => [{'version' => Integer, 'addr' => String}]}) do
-      Fog::Compute[:hp].list_server_private_addresses(@server.id, 'private').body
-    end
-
-    tests("#list_server_public_addresses(#{@server.id}, 'private')").formats({'public' => [{'version' => Integer, 'addr' => String}]}) do
-      Fog::Compute[:hp].list_server_public_addresses(@server.id, 'private').body
-    end
-
-    @address.destroy
-    @server.destroy
-
-  end
-
-  tests('failure') do
-
-    tests("#list_server_addresses(0)").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].list_server_addresses(0)
-    end
-
-    tests("#list_server_private_addresses(0, 'private')").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].list_server_private_addresses(0, 'private')
-    end
-
-    tests("#list_server_public_addresses(0, 'private')").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].list_server_public_addresses(0, 'private')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute/server_tests.rb b/tests/hp/requests/compute/server_tests.rb
deleted file mode 100644
index a3ba1a6..0000000
--- a/tests/hp/requests/compute/server_tests.rb
+++ /dev/null
@@ -1,126 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | server requests", ['hp']) do
-
-  @server_format = {
-    'addresses'   => Fog::Nullable::Hash,
-    'flavor'      => Hash,
-    'id'          => Integer,
-    'image'       => Hash,
-    'links'       => [Hash],
-    'hostId'      => String,
-    'metadata'    => Fog::Nullable::Hash,
-    'name'        => String,
-    'accessIPv4'  => Fog::Nullable::String,
-    'accessIPv6'  => Fog::Nullable::String,
-    'progress'    => Fog::Nullable::Integer,
-    'status'      => String,
-    'created'     => String,
-    'updated'     => String,
-    'user_id'     => String,
-    'tenant_id'   => String,
-    'uuid'        => String,
-    'config_drive' => Fog::Nullable::String,
-    'security_groups' => [Hash],
-    'key_name'    => Fog::Nullable::String
-  }
-
-  @list_servers_format = {
-    'uuid'  => Fog::Nullable::String,
-    'links' => [Hash],
-    'name'  => String,
-    'id'    => Integer
-  }
-
-  @get_console_output_format = {
-    'output' => String
-  }
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-  tests('success') do
-
-    @server_id = nil
-    @server_name = "fogservertests"
-
-    tests("#create_server(#{@server_name}, 100, #{@base_image_id})").formats(@server_format.merge('adminPass' => String)) do
-      data = Fog::Compute[:hp].create_server(@server_name, 100, @base_image_id).body['server']
-      @server_id = data['id']
-      data
-    end
-
-    Fog::Compute[:hp].servers.get(@server_id).wait_for { ready? }
-
-    tests("#get_server_details(#{@server_id})").formats(@server_format) do
-      Fog::Compute[:hp].get_server_details(@server_id).body['server']
-    end
-
-    tests('#list_servers').formats({'servers' => [@list_servers_format]}) do
-      Fog::Compute[:hp].list_servers.body
-    end
-
-    tests('#list_servers_detail').formats({'servers' => [@server_format]}) do
-      Fog::Compute[:hp].list_servers_detail.body
-    end
-
-    Fog::Compute[:hp].servers.get(@server_id).wait_for { ready? }
-
-    tests("#update_server(#{@server_id}, :name => 'fogupdateserver')").succeeds do
-      Fog::Compute[:hp].update_server(@server_id, :name => 'fogupdateserver')
-    end
-
-    Fog::Compute[:hp].servers.get(@server_id).wait_for { ready? }
-
-    tests("#reboot_server(#{@server_id}, 'SOFT')").succeeds do
-      Fog::Compute[:hp].reboot_server(@server_id, 'SOFT')
-    end
-
-    Fog::Compute[:hp].servers.get(@server_id).wait_for { ready? }
-
-    tests("#reboot_server(#{@server_id}, 'HARD')").succeeds do
-      Fog::Compute[:hp].reboot_server(@server_id, 'HARD')
-    end
-
-    Fog::Compute[:hp].servers.get(@server_id).wait_for { ready? }
-
-    tests("#change_password_server(#{@server_id}, 'new_password')").succeeds do
-      Fog::Compute[:hp].change_password_server(@server_id, 'new_password')
-    end
-
-    Fog::Compute[:hp].servers.get(@server_id).wait_for { ready? }
-
-    tests("#get_console_output('#{@server_id}', 10)").formats(@get_console_output_format) do
-      Fog::Compute[:hp].get_console_output(@server_id, 10).body
-    end
-
-    Fog::Compute[:hp].servers.get(@server_id).wait_for { ready? }
-
-    tests("#delete_server(#{@server_id})").succeeds do
-      Fog::Compute[:hp].delete_server(@server_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#delete_server(0)').raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].delete_server(0)
-    end
-
-    tests('#get_server_details(0)').raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].get_server_details(0)
-    end
-
-    tests("#update_server(0, :name => 'fognonserver')").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].update_server(0, :name => 'fognonserver')
-    end
-
-    tests('#reboot_server(0)').raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].reboot_server(0)
-    end
-
-    tests("#change_password_server(0}, 'new_password')").raises(Excon::Errors::InternalServerError) do
-      Fog::Compute[:hp].change_password_server(0, 'new_password')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute/server_volume_tests.rb b/tests/hp/requests/compute/server_volume_tests.rb
deleted file mode 100644
index 51b07a7..0000000
--- a/tests/hp/requests/compute/server_volume_tests.rb
+++ /dev/null
@@ -1,75 +0,0 @@
-Shindo.tests("Fog::Compute[:hp] | volume requests", ['hp', 'compute', 'volumes']) do
-
-  @list_volume_attachments_format = {
-    'volumeAttachments' => [{
-      'device'   => String,
-      'serverId' => Integer,
-      'id'       => Integer,
-      'volumeId' => Integer
-    }]
-  }
-
-  @volume_attachment_format = {
-    'volumeAttachment' => {
-      "volumeId" => Integer,
-      "id"       => Integer
-    }
-  }
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || 1242
-
-  @server = Fog::Compute[:hp].servers.create(:name => 'fogservoltests', :flavor_id => 100, :image_id => @base_image_id)
-  @server.wait_for { ready? }
-
-  tests('success') do
-    response = HP[:block_storage].create_volume('fogvoltest', 'fogvoltest desc', 1)
-    @volume_id = response.body['volume']['id']
-    @device = "\/dev\/sdf"
-
-    HP[:block_storage].volumes.get(@volume_id).wait_for { ready? }
-    tests("#attach_volume(#{@server.id}, #{@volume_id}, #{@device}").formats(@volume_attachment_format) do
-      Fog::Compute[:hp].attach_volume(@server.id, @volume_id, @device).body
-    end
-
-    HP[:block_storage].volumes.get(@volume_id).wait_for { in_use? } unless Fog.mocking?
-    tests("#detach_volume(#{@server.id}, #{@volume_id}").succeeds do
-      Fog::Compute[:hp].detach_volume(@server.id, @volume_id)
-    end
-
-    HP[:block_storage].volumes.get(@volume_id).wait_for { ready? }
-    tests("#list_server_volumes(#{@server.id})").formats(@list_volume_attachments_format) do
-      Fog::Compute[:hp].list_server_volumes(@server.id).body
-    end
-
-  end
-
-  tests('failure') do
-
-    tests("#list_server_volumes(0)").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].list_server_volumes(0)
-    end
-
-    tests("#attach_volume(#{@server.id}, 0, #{@device})").raises(Fog::Compute::HP::NotFound) do
-      pending if Fog.mocking?
-      Fog::Compute[:hp].attach_volume(@server.id, 0, @device)
-    end
-
-    tests("#attach_volume(0, #{@volume_id}, #{@device})").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].attach_volume(0, @volume_id, @device)
-    end
-
-    tests("#detach_volume(#{@server.id}, 0)").raises(Fog::Compute::HP::NotFound) do
-      pending if Fog.mocking?
-      Fog::Compute[:hp].detach_volume(@server.id, 0)
-    end
-
-    tests("#detach_volume(0, #{@volume_id})").raises(Fog::Compute::HP::NotFound) do
-      Fog::Compute[:hp].detach_volume(0, @volume_id)
-    end
-
-  end
-
-  HP[:block_storage].delete_volume(@volume_id)
-  Fog::Compute[:hp].delete_server(@server.id)
-
-end
diff --git a/tests/hp/requests/compute_v2/address_tests.rb b/tests/hp/requests/compute_v2/address_tests.rb
deleted file mode 100644
index 7dea3a5..0000000
--- a/tests/hp/requests/compute_v2/address_tests.rb
+++ /dev/null
@@ -1,80 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | address requests", ['hp', 'v2', 'compute', 'address']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @floating_ips_format = {
-    'instance_id' => Fog::Nullable::String,
-    'ip'          => Fog::Nullable::String,
-    'fixed_ip'    => Fog::Nullable::String,
-    'id'          => String
-  }
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || "7f60b54c-cd15-433f-8bed-00acbcd25a17"
-
-  tests('success') do
-
-    @server_name = 'fogservertest'
-    @server_id = nil
-
-    @server = service.servers.create(:name => @server_name, :flavor_id => 100, :image_id => @base_image_id)
-    @server.wait_for { ready? }
-    #data = service.create_server(@server_name, 100, @base_image_id).body['server']
-    #@server_id = data['id']
-
-    tests("#list_addresses").formats({'floating_ips' => [@floating_ips_format]}) do
-      service.list_addresses.body
-    end
-
-    tests("#allocate_address").formats(@floating_ips_format) do
-      data = service.allocate_address.body['floating_ip']
-      @address_id = data['id']
-      @ip_address = data['ip']
-      data
-    end
-
-    tests("#get_address('#{@address_id}')").formats(@floating_ips_format) do
-      service.get_address(@address_id).body['floating_ip']
-    end
-
-    tests("#associate_address('#{@server.id}', '#{@ip_address}')").succeeds do
-      service.associate_address(@server.id, @ip_address)
-      #tests("#get_address").returns(@ip_address, "server has associated ip address") do
-      #  @server.reload
-      #  @server.addresses['custom'][0]['addr']
-      #end
-    end
-
-    #tests("#disassociate_address('#{@server.id}', '#{@ip_address}')").succeeds do
-    #  service.disassociate_address(@server.id, @ip_address)
-    #end
-
-    tests("#release_address('#{@address_id}')").succeeds do
-      service.release_address(@address_id)
-    end
-
-    @server.destroy
-    #service.delete_server(@server_id)
-
-  end
-
-  tests('failure') do
-
-    tests("#get_address('invalidaddress', 'invalidip')").raises(Fog::Compute::HPV2::NotFound) do
-      service.get_address('invalidaddress')
-    end
-
-    tests("#associate_address('invalidserver', 'invalidip')").raises(Excon::Errors::InternalServerError) do
-      service.associate_address('invalidserver', 'invalidip')
-    end
-
-    tests("#disassociate_address('invalidserver', 'invalidip')").raises(Excon::Errors::InternalServerError) do
-      service.disassociate_address('invalidserver', 'invalidip')
-    end
-
-    tests("#release_address('invalidaddress')").raises(Fog::Compute::HPV2::NotFound) do
-      service.release_address('invalidaddress')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute_v2/availability_zone_tests.rb b/tests/hp/requests/compute_v2/availability_zone_tests.rb
deleted file mode 100644
index d3438e1..0000000
--- a/tests/hp/requests/compute_v2/availability_zone_tests.rb
+++ /dev/null
@@ -1,19 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | availability_zone requests", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @zone_format = {
-    'zoneName'    => String,
-    'zoneState'   => Hash,
-    'hosts'       => nil
-  }
-
-  tests('success') do
-
-    tests('#list_availability_zones').formats([@zone_format]) do
-      service.list_availability_zones.body['availabilityZoneInfo']
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute_v2/flavor_tests.rb b/tests/hp/requests/compute_v2/flavor_tests.rb
deleted file mode 100644
index 7626ef5..0000000
--- a/tests/hp/requests/compute_v2/flavor_tests.rb
+++ /dev/null
@@ -1,45 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | flavor requests", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @flavor_format = {
-    'id'         => String,
-    'name'       => String,
-    'vcpus'      => Integer,
-    'disk'       => Integer,
-    'ram'        => Integer,
-    'OS-FLV-EXT-DATA:ephemeral' => Integer,
-    'links'      => [Hash]
-  }
-
-  @list_flavors_format = {
-    'id'    => String,
-    'name'  => String,
-    'links' => [Hash]
-  }
-
-  tests('success') do
-
-    tests('#list_flavors').formats({'flavors' => [@list_flavors_format]}) do
-      service.list_flavors.body
-    end
-
-    tests('#get_flavor_details("1")').formats(@flavor_format) do
-      service.get_flavor_details("1").body['flavor']
-    end
-
-    tests('#list_flavors_detail').formats({'flavors' => [@flavor_format]}) do
-      service.list_flavors_detail.body
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#get_flavor_details("9999")').raises(Fog::Compute::HPV2::NotFound) do
-      service.get_flavor_details('9999')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute_v2/image_tests.rb b/tests/hp/requests/compute_v2/image_tests.rb
deleted file mode 100644
index a77f63f..0000000
--- a/tests/hp/requests/compute_v2/image_tests.rb
+++ /dev/null
@@ -1,86 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | image requests", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @image_format = {
-    'id'        => String,
-    'links'     => [Hash],
-    'metadata'  => Fog::Nullable::Hash,
-    'server'    => Fog::Nullable::Hash,
-    'name'      => String,
-    'progress'  => Fog::Nullable::Integer,
-    'minDisk'   => Fog::Nullable::Integer,
-    'minRam'    => Fog::Nullable::Integer,
-    'status'    => String,
-    'created'   => Fog::Nullable::String,
-    'updated'   => Fog::Nullable::String
-  }
-
-  @list_images_format = {
-    'id'        => String,
-    'links'     => Fog::Nullable::Array,
-    'name'      => String
-  }
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || "7f60b54c-cd15-433f-8bed-00acbcd25a17"
-
-  tests('success') do
-    @server_name = 'fogservertest'
-    @image_name  = 'fogimagetest'
-    @image_id = nil
-    @server_id = nil
-
-    # check to see if there are any existing servers, otherwise create one
-    if (data = service.list_servers(:status => 'ACTIVE').body['servers'][0])
-      @server_id = data['id']
-    else
-      #@server = service.servers.create(:name => @server_name, :flavor_id => 100, :image_id => @base_image_id)
-      #@server.wait_for { ready? }
-      data = service.create_server(@server_name, 100, @base_image_id).body['server']
-      @server_id = data['id']
-    end
-
-    tests("#create_image(#{@server_id}, #{@image_name})").formats({}) do
-      response = service.create_image(@server_id, @image_name)
-      # no data is returned for the call, so get id off the header
-      @image_id = response.headers["Location"].split("/")[5]
-      {}
-    end
-
-    #unless Fog.mocking?
-    #  service.images.get(@image_id).wait_for { ready? }
-    #end
-
-    tests("#get_image_details(#{@image_id})").formats(@image_format) do
-      service.get_image_details(@image_id).body['image']
-    end
-
-    tests('#list_images').formats({'images' => [@list_images_format]}) do
-      service.list_images.body
-    end
-
-    tests('#list_images_detail').formats({'images' => [@image_format]}) do
-      service.list_images_detail.body
-    end
-
-    tests("#delete_image(#{@image_id})").succeeds do
-      service.delete_image(@image_id)
-    end
-
-    service.delete_server(@server_id)
-
-  end
-
-  tests('failure') do
-
-    tests('#delete_image("0")').raises(Fog::Compute::HPV2::NotFound) do
-      service.delete_image('0')
-    end
-
-    tests('#get_image_details("0")').raises(Fog::Compute::HPV2::NotFound) do
-      service.get_image_details('0')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute_v2/key_pair_tests.rb b/tests/hp/requests/compute_v2/key_pair_tests.rb
deleted file mode 100644
index aad11ea..0000000
--- a/tests/hp/requests/compute_v2/key_pair_tests.rb
+++ /dev/null
@@ -1,66 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | key pair requests", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  tests('success') do
-
-    @keypair_format = {
-      'public_key'   => String,
-      'fingerprint'  => String,
-      'name'         => String
-    }
-
-    @keypairs_format = {
-      'keypairs' => [{
-        'keypair' => {
-          'public_key'   => String,
-          'fingerprint'  => String,
-          'name'         => Fog::Nullable::String
-        }
-      }]
-    }
-
-    @key_pair_name = 'fog_create_key_pair'
-    @public_key_material = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA1SL+kgze8tvSFW6Tyj3RyZc9iFVQDiCKzjgwn2tS7hyWxaiDhjfY2mBYSZwFdKN+ZdsXDJL4CPutUg4DKoQneVgIC1zuXrlpPbaT0Btu2aFd4qNfJ85PBrOtw2GrWZ1kcIgzZ1mMbQt6i1vhsySD2FEj+5kGHouNxQpI5dFR5K+nGgcTLFGnzb/MPRBk136GVnuuYfJ2I4va/chstThoP8UwnoapRHcBpwTIfbmmL91BsRVqjXZEUT73nxpxFeXXidYwhHio+5dXwE0aM/783B/3cPG6FVoxrBvjoNpQpAcEyjtRh9lpwHZtSEW47WNzpIW3PhbQ8j4MryznqF1Rhw=='
-
-    tests("#create_key_pair('#{@key_pair_name}')").formats({'keypair' => @keypair_format.merge({'private_key' => String, 'user_id' => String})}) do
-      body = service.create_key_pair(@key_pair_name).body
-      tests("private_key").returns(OpenSSL::PKey::RSA, "is a valid private RSA key") do
-        OpenSSL::PKey::RSA.new(body['keypair']['private_key']).class
-      end
-      body
-    end
-
-    tests('#list_key_pairs').formats(@keypairs_format) do
-      service.list_key_pairs.body
-    end
-
-    tests("#get_key_pair(#{@key_pair_name})").formats({'keypair' => @keypair_format}) do
-      service.get_key_pair(@key_pair_name).body
-    end
-
-    tests("#delete_key_pair('#{@key_pair_name}')").succeeds do
-      service.delete_key_pair(@key_pair_name)
-    end
-
-    tests("#create_key_pair('fog_import_key_pair', '#{@public_key_material}')").formats({'keypair' => @keypair_format.merge({'user_id' => String})}) do
-      service.create_key_pair('fog_import_key_pair', @public_key_material).body
-    end
-
-    tests("#delete_key_pair('fog_import_key_pair)").succeeds do
-      service.delete_key_pair('fog_import_key_pair')
-    end
-
-  end
-  tests('failure') do
-
-    tests("#get_key_pair('not_a_key_name')").raises(Fog::Compute::HPV2::NotFound) do
-      service.get_key_pair('not_a_key_name')
-    end
-
-    tests("#delete_key_pair('not_a_key_name')").raises(Fog::Compute::HPV2::NotFound) do
-      service.delete_key_pair('not_a_key_name')
-    end
-  end
-
-end
diff --git a/tests/hp/requests/compute_v2/metadata_tests.rb b/tests/hp/requests/compute_v2/metadata_tests.rb
deleted file mode 100644
index fda13f9..0000000
--- a/tests/hp/requests/compute_v2/metadata_tests.rb
+++ /dev/null
@@ -1,101 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | metadata requests", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @metadata_format = {
-    'metadata'  => Fog::Nullable::Hash
-  }
-  @metaitem_format = {
-    'meta'  => Fog::Nullable::Hash
-  }
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || "7f60b54c-cd15-433f-8bed-00acbcd25a17"
-
-  tests('success') do
-    @server_name = 'fogmetadatatest'
-    @server_id = nil
-    # check to see if there are any existing servers, otherwise create one
-    if (data = service.list_servers(:status => 'ACTIVE').body['servers'][0])
-      @server_id = data['id']
-    else
-      #@server = service.servers.create(:name => @server_name, :flavor_id => 100, :image_id => @base_image_id, :metadata => {'Meta1' => 'MetaValue1', 'Meta2' => 'MetaValue2'} )
-      #@server.wait_for { ready? }
-      data = service.create_server(@server_name, 100, @base_image_id, {'metadata' => {'Meta1' => 'MetaValue1', 'Meta2' => 'MetaValue2'} }).body['server']
-      @server_id = data['id']
-    end
-
-    tests("#list_metadata('servers', #{@server_id})").formats(@metadata_format) do
-      metadata = service.list_metadata('servers', @server_id).body
-      test ("metadata exists") do
-        metadata['metadata']['Meta1'] == "MetaValue1"
-      end
-      metadata
-    end
-
-    tests("#set_metadata('servers', #{@server_id}, {'MetaNew3' => 'MetaNewValue3'})").formats(@metadata_format) do
-      data = service.set_metadata('servers', @server_id, {'MetaNew3' => 'MetaNewValue3'}).body
-      test ("metadata set correctly") do
-        metadata = service.list_metadata('servers', @server_id).body
-        metadata['metadata']['MetaNew3'] == "MetaNewValue3"
-      end
-      data
-    end
-
-    tests("#update_metadata('servers', #{@server_id}, {'MetaUpd4' => 'MetaUpdValue4'})").formats(@metadata_format) do
-      data = service.update_metadata('servers', @server_id, {'MetaUpd4' => 'MetaUpdValue4'}).body
-      test ("metadata updated correctly") do
-        metadata = service.list_metadata('servers', @server_id).body
-        metadata['metadata']['MetaUpd4'] == "MetaUpdValue4"
-      end
-      data
-    end
-
-    tests("#get_meta('servers', #{@server_id}, 'MetaNew3')").formats(@metaitem_format) do
-      mitem = service.get_meta('servers', @server_id, 'MetaNew3').body
-      test ("metadata item exists") do
-        mitem['meta']['MetaNew3'] == "MetaNewValue3"
-      end
-      mitem
-    end
-
-    tests("#update_meta('servers', #{@server_id}, 'MetaNew3', 'MetaUpdValue3')").formats(@metaitem_format) do
-      mitem = service.update_meta('servers', @server_id, 'MetaNew3', 'MetaUpdValue3').body
-      test ("metadata item updated correctly") do
-        mitem['meta']['MetaNew3'] == "MetaUpdValue3"
-      end
-      mitem
-    end
-
-    tests("#delete_meta('servers', #{@server_id}, 'MetaNew3')").succeeds do
-      data = service.delete_meta('servers', @server_id, 'MetaNew3').body
-      test ("metadata item deleted correctly") do
-        metadata = service.list_metadata('servers', @server_id).body
-        metadata['metadata'].fetch('MetaNew3', nil) == nil
-      end
-      data
-    end
-
-    service.delete_server(@server_id)
-
-  end
-
-  tests('failure') do
-
-    tests("#update_metadata('servers', 0, {'MetaUpd4' => 'MetaUpdValue4'})").raises(Fog::Compute::HPV2::NotFound) do
-      service.update_metadata('servers', 0, {'MetaUpd4' => 'MetaUpdValue4'})
-    end
-
-    tests("#get_meta('servers', 0, 'MetaNew3')").raises(Fog::Compute::HPV2::NotFound) do
-      service.get_meta('servers', 0, 'MetaNew3')
-    end
-
-    tests("#update_meta('servers', 0, 'MetaNew3', 'MetaUpdValue3')").raises(Fog::Compute::HPV2::NotFound) do
-      service.update_meta('servers', 0, 'MetaNew3', 'MetaUpdValue3')
-    end
-
-    tests("#delete_meta('servers', 0, 'MetaNew3')").raises(Fog::Compute::HPV2::NotFound) do
-      service.delete_meta('servers', 0, 'MetaNew3')
-    end
-
-  end
-end
diff --git a/tests/hp/requests/compute_v2/persistent_server_tests.rb b/tests/hp/requests/compute_v2/persistent_server_tests.rb
deleted file mode 100644
index e1eba75..0000000
--- a/tests/hp/requests/compute_v2/persistent_server_tests.rb
+++ /dev/null
@@ -1,67 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | persistent server requests", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @server_format = {
-    'addresses'   => Fog::Nullable::Hash,
-    'flavor'      => Hash,
-    'id'          => String,
-    'links'       => [Hash],
-    'hostId'      => String,
-    'metadata'    => Fog::Nullable::Hash,
-    'name'        => String,
-    'accessIPv4'  => Fog::Nullable::String,
-    'accessIPv6'  => Fog::Nullable::String,
-    'progress'    => Fog::Nullable::Integer,
-    'status'      => String,
-    'created'     => String,
-    'updated'     => String,
-    'user_id'     => String,
-    'tenant_id'   => String,
-    'config_drive' => Fog::Nullable::String,
-    'security_groups' => [Hash],
-    'key_name'    => Fog::Nullable::String
-  }
-
-  @volume = HP[:block_storage_v2].volumes.create(:name => 'fogvoltests', :description => 'fog vol test desc', :size => 1)
-  @volume.wait_for { ready? }
-
-  tests('success') do
-
-    @server_id = nil
-    @server_name = 'fogpersservertests'
-    @block_device_mapping = [{ 'volume_size' => '',
-                               'volume_id' => "#{@volume.id}",
-                               'delete_on_termination' => '0',
-                               'device_name' => 'vda'
-                            }]
-
-    tests("#create_persistent_server(#{@server_name}, 101, #{@block_device_mapping})").formats(@server_format.merge('adminPass' => String)) do
-      data = service.create_persistent_server(@server_name, 101, @block_device_mapping).body['server']
-      @server_id = data['id']
-      data
-    end
-
-    service.servers.get(@server_id).wait_for { ready? }
-
-    tests("#get_server_details(#{@server_id})").formats(@server_format) do
-      service.get_server_details(@server_id).body['server']
-    end
-
-    tests("#delete_server(#{@server_id})").succeeds do
-      service.delete_server(@server_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests("#create_persistent_server(#{@server_name}, 101, nil)").raises(Excon::Errors::BadRequest) do
-      service.create_persistent_server(@server_name, 101, nil)
-    end
-
-  end
-
-  HP[:block_storage_v2].delete_volume(@volume.id)
-
-end
diff --git a/tests/hp/requests/compute_v2/server_address_tests.rb b/tests/hp/requests/compute_v2/server_address_tests.rb
deleted file mode 100644
index f06bb16..0000000
--- a/tests/hp/requests/compute_v2/server_address_tests.rb
+++ /dev/null
@@ -1,46 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | server address requests", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-  tests('success') do
-    @server_name = 'fogaddresstests'
-    @server_id = nil
-
-    # check to see if there are any existing servers, otherwise create one
-    if (data = service.list_servers(:status => 'ACTIVE').body['servers'][0])
-      @server_id = data['id']
-    else
-      #@server = service.servers.create(:name => @server_name, :flavor_id => 100, :image_id => @base_image_id)
-      #@server.wait_for { ready? }
-      data = service.create_server(@server_name, 100, @base_image_id).body['server']
-      @server_id = data['id']
-    end
-
-    # the network name is currently named 'private'
-    tests("#list_server_addresses(#{@server_id})").formats({'addresses' => {'hpcloud' => [{'version' => Integer, 'addr' => String}]}}) do
-      service.list_server_addresses(@server_id).body
-    end
-
-    tests("#list_server_addresses_by_network(#{@server_id}, 'network_name')").succeeds do
-      service.list_server_addresses_by_network(@server_id, 'network_name').body
-    end
-
-    service.delete_server(@server_id)
-
-  end
-
-  tests('failure') do
-
-    tests('#list_server_addresses(0)').raises(Fog::Compute::HPV2::NotFound) do
-      service.list_server_addresses(0)
-    end
-
-    tests("#list_server_addresses_by_network(0, 'network_name')").raises(Fog::Compute::HPV2::NotFound) do
-      service.list_server_addresses_by_network(0, 'network_name')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute_v2/server_security_group_tests.rb b/tests/hp/requests/compute_v2/server_security_group_tests.rb
deleted file mode 100644
index 767dfd0..0000000
--- a/tests/hp/requests/compute_v2/server_security_group_tests.rb
+++ /dev/null
@@ -1,42 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | server security group requests", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-  tests('success') do
-
-    @server_name = 'fogsecgrouptests'
-    @server_id = nil
-
-    # create a server without a sec group
-    data = service.create_server(@server_name, 100, @base_image_id).body['server']
-    @server_id = data['id']
-
-    # now add the 'default' sec group to the server
-    tests("#add_security_group(#{@server_id}, 'default')").succeeds do
-      service.add_security_group(@server_id, 'default')
-    end
-
-    # now remove the 'default' sec group to the server
-    tests("#remove_security_group(#{@server_id}, 'default')").succeeds do
-      service.remove_security_group(@server_id, 'default')
-    end
-
-    service.delete_server(@server_id)
-
-  end
-
-  tests('failure') do
-
-    tests("#add_security_group(0, 'default')").raises(Fog::Compute::HPV2::NotFound) do
-      service.add_security_group(0, 'default')
-    end
-
-    tests("#remove_security_group(0, 'default')").raises(Fog::Compute::HPV2::NotFound) do
-      service.remove_security_group(0, 'default')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute_v2/server_tests.rb b/tests/hp/requests/compute_v2/server_tests.rb
deleted file mode 100644
index c19f467..0000000
--- a/tests/hp/requests/compute_v2/server_tests.rb
+++ /dev/null
@@ -1,113 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | server requests", ['hp', 'v2', 'compute']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @server_format = {
-    'addresses'   => Fog::Nullable::Hash,
-    'flavor'      => Hash,
-    'id'          => String,
-    'image'       => Hash,
-    'links'       => [Hash],
-    'hostId'      => String,
-    'metadata'    => Fog::Nullable::Hash,
-    'name'        => String,
-    'accessIPv4'  => Fog::Nullable::String,
-    'accessIPv6'  => Fog::Nullable::String,
-    'progress'    => Fog::Nullable::Integer,
-    'status'      => String,
-    'created'     => String,
-    'updated'     => String,
-    'user_id'     => String,
-    'tenant_id'   => String,
-    'config_drive' => Fog::Nullable::String,
-    'security_groups' => [Hash],
-    'key_name'    => Fog::Nullable::String
-  }
-
-  @list_servers_format = {
-    'links' => [Hash],
-    'name'  => String,
-    'id'    => String
-  }
-
-  @get_console_output_format = {
-    'output' => String
-  }
-
-  @base_image_id = ENV["BASE_IMAGE_ID"] || "7f60b54c-cd15-433f-8bed-00acbcd25a17"
-
-  tests('success') do
-
-    @server_id = nil
-    @server_name = 'fogservertests'
-
-    tests("#create_server(#{@server_name}, 100, #{@base_image_id})").formats(@server_format.merge('adminPass' => String)) do
-      data = service.create_server(@server_name, 100, @base_image_id).body['server']
-      @server_id = data['id']
-      data
-    end
-
-    tests("#get_server_details(#{@server_id})").formats(@server_format) do
-      service.get_server_details(@server_id).body['server']
-    end
-
-    tests('#list_servers').formats({'servers' => [@list_servers_format]}) do
-      service.list_servers.body
-    end
-
-    tests('#list_servers_detail').formats({'servers' => [@server_format]}) do
-      service.list_servers_detail.body
-    end
-
-    tests("#update_server(#{@server_id}, :name => 'fogupdateserver')").succeeds do
-      service.update_server(@server_id, :name => 'fogupdateserver')
-    end
-
-    tests("#reboot_server(#{@server_id}, 'SOFT')").succeeds do
-      pending unless Fog.mocking?
-      service.reboot_server(@server_id, 'SOFT')
-    end
-
-    tests("#get_console_output('#{@server_id}', 10)").formats(@get_console_output_format) do
-      service.get_console_output(@server_id, 10).body
-    end
-
-    #tests("#get_vnc_console('#{@server_id}', 'novnc')").succeeds do
-    #  service.get_console_output(@server_id, 'novnc')
-    #end
-
-    tests("#delete_server(#{@server_id})").succeeds do
-      service.delete_server(@server_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#delete_server(0)').raises(Fog::Compute::HPV2::NotFound) do
-      service.delete_server(0)
-    end
-
-    tests('#get_server_details(0)').raises(Fog::Compute::HPV2::NotFound) do
-      service.get_server_details(0)
-    end
-
-    tests("#update_server(0, :name => 'fognonserver')").raises(Fog::Compute::HPV2::NotFound) do
-      service.update_server(0, :name => 'fognonserver')
-    end
-
-    tests('#reboot_server(0)').raises(Fog::Compute::HPV2::NotFound) do
-      service.reboot_server(0)
-    end
-
-    tests('#get_console_output(0, 10)').raises(Fog::Compute::HPV2::NotFound) do
-      service.get_console_output(0, 10).body
-    end
-
-    #tests("#get_vnc_console(0, 'novnc')").raises(Fog::Compute::HPV2::NotFound) do
-    #  service.get_console_output(0, 'novnc')
-    #end
-
-  end
-
-end
diff --git a/tests/hp/requests/compute_v2/server_volume_tests.rb b/tests/hp/requests/compute_v2/server_volume_tests.rb
deleted file mode 100644
index d3a8460..0000000
--- a/tests/hp/requests/compute_v2/server_volume_tests.rb
+++ /dev/null
@@ -1,84 +0,0 @@
-Shindo.tests("Fog::Compute::HPV2 | volume requests", ['hp', 'v2', 'compute', 'volumes']) do
-
-  service = Fog::Compute.new(:provider => 'HP', :version => :v2)
-
-  @list_volume_attachments_format = {
-    'volumeAttachments' => [{
-      'device'   => String,
-      'serverId' => String,
-      'id'       => String,
-      'volumeId' => String
-    }]
-  }
-
-  @volume_attachment_format = {
-    'volumeAttachment' => {
-      'device'   => String,
-      'serverId' => String,
-      'id'       => String,
-      'volumeId' => String
-    }
-  }
-
-  @base_image_id = ENV['BASE_IMAGE_ID'] || '7f60b54c-cd15-433f-8bed-00acbcd25a17'
-
-  @server = service.servers.create(:name => 'fogservoltests', :flavor_id => 100, :image_id => @base_image_id)
-  @server.wait_for { ready? }
-
-  tests('success') do
-    response = HP[:block_storage_v2].create_volume('display_name' => 'fogvoltest', 'display_description' => 'fogvoltest desc', 'size' => 1)
-    @volume_id = response.body['volume']['id']
-    @device = "\/dev\/sdf"
-
-    tests("#attach_volume(#{@server.id}, #{@volume_id}, #{@device}").formats(@volume_attachment_format) do
-      service.attach_volume(@server.id, @volume_id, @device).body
-    end
-
-    tests("#list_server_volumes(#{@server.id})").formats(@list_volume_attachments_format) do
-      service.list_server_volumes(@server.id).body
-    end
-
-    tests("#get_server_volume_details(#{@server.id}, #{@volume_id})").formats(@volume_attachment_format) do
-      service.get_server_volume_details(@server.id, @volume_id).body
-    end
-
-    tests("#detach_volume(#{@server.id}, #{@volume_id}").succeeds do
-      service.detach_volume(@server.id, @volume_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#list_server_volumes(0)').raises(Fog::Compute::HPV2::NotFound) do
-      service.list_server_volumes(0)
-    end
-
-    tests('#get_server_volume_details(0, 0)').raises(Fog::Compute::HPV2::NotFound) do
-      service.get_server_volume_details(0, 0)
-    end
-
-    tests("#attach_volume(#{@server.id}, 0, #{@device})").raises(Fog::Compute::HPV2::NotFound) do
-      pending if Fog.mocking?
-      service.attach_volume(@server.id, 0, @device)
-    end
-
-    tests("#attach_volume(0, #{@volume_id}, #{@device})").raises(Fog::Compute::HPV2::NotFound) do
-      service.attach_volume(0, @volume_id, @device)
-    end
-
-    tests("#detach_volume(#{@server.id}, 0)").raises(Fog::Compute::HPV2::NotFound) do
-      pending if Fog.mocking?
-      service.detach_volume(@server.id, 0)
-    end
-
-    tests("#detach_volume(0, #{@volume_id})").raises(Fog::Compute::HPV2::NotFound) do
-      service.detach_volume(0, @volume_id)
-    end
-
-  end
-
-  HP[:block_storage_v2].delete_volume(@volume_id)
-  service.delete_server(@server.id)
-
-end
diff --git a/tests/hp/requests/dns/domain_tests.rb b/tests/hp/requests/dns/domain_tests.rb
deleted file mode 100644
index 9cd06c3..0000000
--- a/tests/hp/requests/dns/domain_tests.rb
+++ /dev/null
@@ -1,72 +0,0 @@
-Shindo.tests("HP::DNS | domain requests", ['hp', 'dns', 'domain']) do
-  @domain_format = {
-    'id'          => String,
-    'name'        => String,
-    'description' => String,
-    'ttl'         => Integer,
-    'serial'      => Integer,
-    'email'       => String,
-    'created_at'  => String
-  }
-
-  @server_format = {
-    'id'          => String,
-    'name'        => String,
-    'created_at'  => String,
-    'updated_at'  => String
-  }
-
-  tests('success') do
-
-    @domain_name = 'www.fogtest.com.'
-    @email = 'test@fogtest.com'
-
-    tests("#create_domain(#{@domain_name}, #{@email})").formats(@domain_format) do
-      data = HP[:dns].create_domain(@domain_name, @email).body
-      @domain_id = data['id']
-      data
-    end
-
-    tests('#list_domains').formats({'domains' => [@domain_format]}) do
-      HP[:dns].list_domains.body
-    end
-
-    tests("#get_domain(#{@domain_id})").formats(@domain_format) do
-      HP[:dns].get_domain(@domain_id).body
-    end
-
-    tests("#get_servers_hosting_domain(#{@domain_id})").formats('servers' => [@server_format]) do
-      HP[:dns].get_servers_hosting_domain(@domain_id).body
-    end
-
-    tests("#update_domain(#{@domain_id}, {:email => 'updated@fogtest.com'})").formats(@domain_format) do
-      HP[:dns].update_domain(@domain_id, {:email => 'updated@fogtest.com'}).body
-    end
-
-    tests("#delete_domain(#{@domain_id})").succeeds do
-      HP[:dns].delete_domain(@domain_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests("#get_domain('invalid_domain')").raises(Fog::HP::DNS::NotFound) do
-      HP[:dns].get_domain('invalid_domain')
-    end
-
-    tests("#get_servers_hosting_domain('invalid_domain')").raises(Fog::HP::DNS::NotFound) do
-      HP[:dns].get_servers_hosting_domain('invalid_domain')
-    end
-
-    tests("#update_domain('invalid_domain', {:email => 'updated@fogtest.com'})").raises(Fog::HP::DNS::NotFound) do
-      HP[:dns].update_domain('invalid_domain', {:email => 'updated@fogtest.com'})
-    end
-
-    tests("#delete_domain('invalid_domain')").raises(Fog::HP::DNS::NotFound) do
-      HP[:dns].delete_domain('invalid_domain')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/dns/records_tests.rb b/tests/hp/requests/dns/records_tests.rb
deleted file mode 100644
index 6c0a500..0000000
--- a/tests/hp/requests/dns/records_tests.rb
+++ /dev/null
@@ -1,64 +0,0 @@
-Shindo.tests("HP::DNS | record requests", ['hp', 'dns', 'record']) do
-  @record_format = {
-    'id'          => String,
-    'name'        => String,
-    'description' => String,
-    'type'        => String,
-    'domain_id'   => String,
-    'ttl'         => Integer,
-    'data'        => String,
-    'priority'    => Fog::Nullable::Integer,
-    'created_at'  => String,
-    'updated_at'  => String
-  }
-
-  tests('success') do
-
-    @domain_name = 'www.fogtest.com.'
-    @email = 'test@fogtest.com'
-    @domain_id = HP[:dns].create_domain(@domain_name, @email).body['id']
-    @record_name = 'www.fogtest.com.'
-    @record_data = '15.185.172.152'
-
-    tests("#create_record(#{@domain_id}, #{@record_name}, 'A', #{@record_data})").formats(@record_format) do
-      data = HP[:dns].create_record(@domain_id, @record_name, 'A', @record_data).body
-      @record_id = data['id']
-      data
-    end
-
-    tests("#list_records_in_a_domain(#{@domain_id})").formats({'records' => [@record_format]}) do
-      HP[:dns].list_records_in_a_domain(@domain_id).body
-    end
-
-    tests("#get_record(#{@domain_id}, #{@record_id})").formats(@record_format) do
-      HP[:dns].get_record(@domain_id, @record_id).body
-    end
-
-    tests("#update_record(#{@domain_id}, #{@record_id}, {:description => 'desc for record'})").formats(@record_format) do
-      HP[:dns].update_record(@domain_id, @record_id, {:description => 'desc for record'}).body
-    end
-
-    tests("#delete_record(#{@domain_id}, #{@record_id})").succeeds do
-      HP[:dns].delete_record(@domain_id, @record_id)
-    end
-
-    HP[:dns].delete_domain(@domain_id)
-  end
-
-  tests('failure') do
-
-    tests("#get_record(#{@domain_id}, 'invalid_record')").raises(Fog::HP::DNS::NotFound) do
-      HP[:dns].get_record(@domain_id, 'invalid_record')
-    end
-
-    tests("#update_record(#{@domain_id}, 'invalid_record', {:email => 'updated@fogtest.com'})").raises(Fog::HP::DNS::NotFound) do
-      HP[:dns].update_record(@domain_id, 'invalid_record', {:email => 'updated@fogtest.com'})
-    end
-
-    tests("#delete_record(#{@domain_id}, 'invalid_record')").raises(Fog::HP::DNS::NotFound) do
-      HP[:dns].delete_record(@domain_id, 'invalid_record')
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/lb/algorithms_tests.rb b/tests/hp/requests/lb/algorithms_tests.rb
deleted file mode 100644
index b0b2c69..0000000
--- a/tests/hp/requests/lb/algorithms_tests.rb
+++ /dev/null
@@ -1,14 +0,0 @@
-Shindo.tests("HP::LB | algorithms", ['hp', 'lb', 'algorithms']) do
-  @algo_format = {
-    'name' => String
-  }
-
-  tests('success') do
-
-    tests('#list_algorithms').formats({'algorithms' => [@algo_format]}) do
-      HP[:lb].list_algorithms.body
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/lb/limits_tests.rb b/tests/hp/requests/lb/limits_tests.rb
deleted file mode 100644
index 97f0fb5..0000000
--- a/tests/hp/requests/lb/limits_tests.rb
+++ /dev/null
@@ -1,16 +0,0 @@
-Shindo.tests("HP::LB | limits requests", ['hp', 'lb', 'limits']) do
-  @limits_format = {
-    'maxLoadBalancerNameLength' => Integer,
-    'maxLoadBalancers'          => Integer,
-    'maxNodesPerLoadBalancer'   => Integer,
-    'maxVIPsPerLoadBalancer'    => Integer,
-  }
-
-  tests('success') do
-
-    tests('#list_limits').formats({'limits' => [{'values' => @limits_format }]}) do
-      HP[:lb].list_limits.body
-    end
-  end
-
-end
diff --git a/tests/hp/requests/lb/load_balancer_nodes_tests.rb b/tests/hp/requests/lb/load_balancer_nodes_tests.rb
deleted file mode 100644
index 193774a..0000000
--- a/tests/hp/requests/lb/load_balancer_nodes_tests.rb
+++ /dev/null
@@ -1,46 +0,0 @@
-Shindo.tests('HP::LB | load balancer nodes', ['hp', 'lb', 'nodes']) do
-  @node_format = {
-    'id'        => String,
-    'address'   => String,
-    'port'      => String,
-    'condition' => String,
-    'status'    => String
-  }
-
-  tests('successs') do
-    data = HP[:lb].create_load_balancer('rg-fog-lb2', [{'address' => '15.185.1.1', 'port' => '80'}]).body
-    @lb_id = data['id']
-
-    tests("#create_load_balancer_node(#{@lb_id}, '15.185.2.2', '88')").formats({'nodes' => [@node_format]}) do
-      data = HP[:lb].create_load_balancer_node(@lb_id, '15.185.2.2', '88').body
-      @lb_node_id = data['nodes'][0]['id']
-      data
-    end
-
-    tests("#list_load_balancer_nodes(#{@lb_id})").formats({'nodes' => [@node_format]}) do
-      HP[:lb].list_load_balancer_nodes(@lb_id).body
-    end
-
-    tests("#get_load_balancer_node(#{@lb_id}, #{@lb_node_id})").formats(@node_format) do
-      HP[:lb].get_load_balancer_node(@lb_id, @lb_node_id).body
-    end
-
-    tests("#update_load_balancer_node(#{@lb_id}, #{@lb_node_id}, 'DISABLED')").succeeds do
-      HP[:lb].update_load_balancer_node(@lb_id, @lb_node_id, 'DISABLED')
-    end
-
-    tests("#delete_load_balancer_node(#{@lb_id}, #{@lb_node_id})").succeeds do
-      HP[:lb].delete_load_balancer_node(@lb_id, @lb_node_id)
-    end
-
-    HP[:lb].delete_load_balancer(@lb_id)
-
-  end
-
-  tests('failure') do
-    tests('#list_node_balancer_nodes(0)').raises(Fog::HP::LB::NotFound) do
-      HP[:lb].list_load_balancer_nodes('0')
-    end
-  end
-
-end
diff --git a/tests/hp/requests/lb/load_balancer_tests.rb b/tests/hp/requests/lb/load_balancer_tests.rb
deleted file mode 100644
index 19be317..0000000
--- a/tests/hp/requests/lb/load_balancer_tests.rb
+++ /dev/null
@@ -1,56 +0,0 @@
-Shindo.tests("HP::LB | load balancers requests", ['hp', 'lb', 'load_balancer']) do
-  @lb_format = {
-    'id'        => String,
-    'name'      => String,
-    'protocol'  => String,
-    'port'      => String,
-    'algorithm' => String,
-    'status'    => String,
-    'created'   => String,
-    'updated'   => String,
-    'nodes'     => Array
-  }
-
-  tests('success') do
-    @lb_name = 'fog-lb'
-    @nodes = [{'address' => '15.185.1.1', 'port' => '80'}]
-
-    tests("#create_load_balancer(#{@lb_name}, #{@nodes})").formats(@lb_format) do
-      data = HP[:lb].create_load_balancer(@lb_name, @nodes).body
-      @lb_id = data['id']
-      data
-    end
-
-    tests('#list_load_balancers').formats({'loadBalancers' => [@lb_format]}) do
-      HP[:lb].list_load_balancers.body
-    end
-
-    tests("#get_load_balancer(#{@lb_id})").formats(@lb_format) do
-      HP[:lb].get_load_balancer(@lb_id).body
-    end
-
-    tests("#update_load_balancer(#{@lb_id}, {'name' => 'updated-fog-lb'})").returns('') do
-      HP[:lb].update_load_balancer(@lb_id, {'name' => 'updated-fog-lb'}).body
-    end
-
-    tests("#delete_load_balancer(#{@lb_id})").succeeds do
-      HP[:lb].delete_load_balancer(@lb_id)
-    end
-
-  end
-
-  tests('failure') do
-    tests("#get_load_balancer(0)").raises(Fog::HP::LB::NotFound) do
-      HP[:lb].get_load_balancer('0')
-    end
-
-    tests("#update_load_balancer(0, {'name' => 'updated-fog-lb'})").raises(Fog::HP::LB::NotFound) do
-      HP[:lb].update_load_balancer('0', {'name' => 'updated-fog-lb'})
-    end
-
-    tests("#delete_load_balancer(0)").raises(Fog::HP::LB::NotFound) do
-      HP[:lb].delete_load_balancer('0')
-    end
-  end
-
-end
diff --git a/tests/hp/requests/lb/protocols_tests.rb b/tests/hp/requests/lb/protocols_tests.rb
deleted file mode 100644
index 9b92240..0000000
--- a/tests/hp/requests/lb/protocols_tests.rb
+++ /dev/null
@@ -1,14 +0,0 @@
-Shindo.tests("HP::LB | protocols requests", ['hp', 'lb', 'protocols']) do
-  @protocol_format = {
-    'name'    => String,
-    'port'    => Integer
-  }
-
-  tests('success') do
-
-    tests('#list_protocols').formats({'protocols' => [@protocol_format]}) do
-      HP[:lb].list_protocols.body
-    end
-  end
-
-end
diff --git a/tests/hp/requests/lb/versions_tests.rb b/tests/hp/requests/lb/versions_tests.rb
deleted file mode 100644
index fa2eab8..0000000
--- a/tests/hp/requests/lb/versions_tests.rb
+++ /dev/null
@@ -1,16 +0,0 @@
-Shindo.tests("HP::LB | versions requests", ['hp', 'lb', 'versions']) do
-  @version_format = {
-    'id'        => String,
-    'links'     => [Hash],
-    'status'    => String,
-    'updated'   => String
-  }
-
-  tests('success') do
-
-    tests('#list_versions').formats({'versions' => [@version_format]}) do
-      HP[:lb].list_versions.body
-    end
-  end
-
-end
diff --git a/tests/hp/requests/lb/virtual_ips_tests.rb b/tests/hp/requests/lb/virtual_ips_tests.rb
deleted file mode 100644
index 3011b40..0000000
--- a/tests/hp/requests/lb/virtual_ips_tests.rb
+++ /dev/null
@@ -1,34 +0,0 @@
-Shindo.tests("HP::LB | virtual ips requests", ['hp', 'lb', 'virtual_ips']) do
-  @virtual_ips_format = {
-    'id'        => String,
-    'address'   => String,
-    'type'      => String,
-    'ipVersion' => String
-  }
-
-  tests('success') do
-    @nodes = [{'address' => '15.185.1.1', 'port' => '80'}]
-    @virtual_ip = [{
-                     'ipVersion' => 'IPV4',
-                     'type' => 'PUBLIC',
-                     'id' => '11111111',
-                     'address' => '15.185.3.3'
-                  }]
-    data = HP[:lb].create_load_balancer('rg-fog-lb3', @nodes, {'virtualIps' => @virtual_ip}).body
-    @lb_id = data['id']
-
-    tests('#list_load_balancer_virtual_ips').formats({'virtualIps' => [@virtual_ips_format]}) do
-      HP[:lb].list_load_balancer_virtual_ips(@lb_id).body
-    end
-
-    HP[:lb].delete_load_balancer(@lb_id)
-
-  end
-
-  tests('failure') do
-    tests('#list_load_balancer_virtual_ips(0)').raises(Fog::HP::LB::NotFound) do
-      HP[:lb].list_load_balancer_virtual_ips('0')
-    end
-  end
-
-end
diff --git a/tests/hp/requests/network/floating_ip_tests.rb b/tests/hp/requests/network/floating_ip_tests.rb
deleted file mode 100644
index 6ef9f63..0000000
--- a/tests/hp/requests/network/floating_ip_tests.rb
+++ /dev/null
@@ -1,70 +0,0 @@
-Shindo.tests('HP::Network | networking floating ip requests', ['hp', 'networking', 'floatingip']) do
-
-  @floating_ip_format = {
-    'id'                  => String,
-    'tenant_id'           => String,
-    'floating_network_id' => String,
-    'router_id'           => Fog::Nullable::String,
-    'fixed_ip_address'    => Fog::Nullable::String,
-    'floating_ip_address' => String,
-    'port_id'             => Fog::Nullable::String
-  }
-
-  @ext_network_id = HP[:network].list_networks({'router:external'=>true}).body['networks'][0]['id']
-  s_data = HP[:network].create_port(@ext_network_id, {:name => 'fog_port'}).body['port']
-  @port_id = s_data['id']
-
-  tests('success') do
-
-    @floating_ip_id = nil
-
-    tests("#create_floating_ip(#{@ext_network_id})").formats(@floating_ip_format) do
-      data = HP[:network].create_floating_ip(@ext_network_id).body['floatingip']
-      @floating_ip_id = data['id']
-      data
-    end
-
-    tests('#list_floating_ips').formats({'floatingips' => [@floating_ip_format]}) do
-      HP[:network].list_floating_ips.body
-    end
-
-    tests("#get_floating_ip(#{@floating_ip_id})").formats({'floatingip' => @floating_ip_format}) do
-      HP[:network].get_floating_ip(@floating_ip_id).body
-    end
-
-    tests("#associate_floating_ip(#{@floating_ip_id}, #{@port_id})").formats({'floatingip' => @floating_ip_format}) do
-      HP[:network].associate_floating_ip(@floating_ip_id, @port_id).body
-    end
-
-    tests("#disassociate_floating_ip(#{@floating_ip_id}, nil)").formats({'floatingip' => @floating_ip_format}) do
-      HP[:network].disassociate_floating_ip(@floating_ip_id, nil).body
-    end
-
-    tests("#delete_floating_ip(#{@floating_ip_id})").succeeds do
-      HP[:network].delete_floating_ip(@floating_ip_id)
-    end
-
-  end
-
-  tests('failure') do
-    tests('#get_floating_ip("0")').raises(Fog::HP::Network::NotFound) do
-      HP[:network].get_floating_ip(0)
-    end
-
-    tests("#associate_floating_ip('0', #{@port_id})").raises(Fog::HP::Network::NotFound) do
-      HP[:network].associate_floating_ip('0', @port_id)
-    end
-
-    tests('#disassociate_floating_ip("0")').raises(Fog::HP::Network::NotFound) do
-      HP[:network].disassociate_floating_ip("0")
-    end
-
-    tests('#delete_floating_ip("0")').raises(Fog::HP::Network::NotFound) do
-      HP[:network].delete_floating_ip("0")
-    end
-  end
-
-  # cleanup
-  HP[:network].delete_port(@port_id)
-
-end
diff --git a/tests/hp/requests/network/network_tests.rb b/tests/hp/requests/network/network_tests.rb
deleted file mode 100644
index 7b8ac7f..0000000
--- a/tests/hp/requests/network/network_tests.rb
+++ /dev/null
@@ -1,57 +0,0 @@
-Shindo.tests('HP::Network | networking network requests', ['hp',  'networking', 'network']) do
-
-  @network_format = {
-    'id'              => String,
-    'name'            => Fog::Nullable::String,
-    'tenant_id'       => String,
-    'status'          => String,
-    'subnets'         => Array,
-    'router:external' => Fog::Boolean,
-    'admin_state_up'  => Fog::Boolean,
-    'shared'          => Fog::Boolean
-  }
-
-  tests('success') do
-
-    @network_id = nil
-
-    tests('#create_network').formats(@network_format) do
-      attributes = {:name => 'my_network', :admin_state_up => true, :shared => false}
-      data = HP[:network].create_network(attributes).body['network']
-      @network_id = data['id']
-      data
-    end
-
-    tests('#list_networks').formats({'networks' => [@network_format]}) do
-      HP[:network].list_networks.body
-    end
-
-    tests("#get_network(#{@network_id})").formats({'network' => @network_format}) do
-      HP[:network].get_network(@network_id).body
-    end
-
-    tests("#update_network(#{@network_id})").formats({'network' => @network_format}) do
-      attributes = {:name => 'my_network_upd', :shared => false, :admin_state_up => true}
-      HP[:network].update_network(@network_id, attributes).body
-    end
-
-    tests("#delete_network(#{@network_id})").succeeds do
-      HP[:network].delete_network(@network_id)
-    end
-  end
-
-  tests('failure') do
-    tests('#get_network(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].get_network(0)
-    end
-
-    tests('#update_network(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].update_network(0, {})
-    end
-
-    tests('#delete_network(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].delete_network(0)
-    end
-  end
-
-end
diff --git a/tests/hp/requests/network/port_tests.rb b/tests/hp/requests/network/port_tests.rb
deleted file mode 100644
index 6d49918..0000000
--- a/tests/hp/requests/network/port_tests.rb
+++ /dev/null
@@ -1,71 +0,0 @@
-Shindo.tests('HP::Network | networking port requests', ['hp', 'networking', 'port']) do
-
-  @port_format = {
-    'id'                => String,
-    'name'              => Fog::Nullable::String,
-    'network_id'        => String,
-    'fixed_ips'         => Array,
-    'mac_address'       => String,
-    'status'            => String,
-    'admin_state_up'    => Fog::Boolean,
-    'binding:vif_type'  => String,
-    'device_owner'      => String,
-    'device_id'         => String,
-    'security_groups'   => Array,
-    'tenant_id'         => String
-  }
-
-  n_data = HP[:network].create_network({:name => 'fog_network'}).body['network']
-  @network_id = n_data['id']
-
-  tests('success') do
-
-    @port_id = nil
-
-    tests('#create_port').formats(@port_format) do
-      attributes = {:name => 'myport', :fixed_ips => [],
-                    :mac_address => 'fa:16:3e:71:26:c8', :admin_state_up => true,
-                    :device_owner => '2222222', :device_id => '3333333', :tenant_id => '111111111'}
-      data = HP[:network].create_port(@network_id, attributes).body['port']
-      @port_id = data['id']
-      data
-    end
-
-    tests('#list_port').formats({'ports' => [@port_format]}) do
-      HP[:network].list_ports.body
-    end
-
-    tests("#get_port(#{@port_id})").formats({'port' => @port_format}) do
-      HP[:network].get_port(@port_id).body
-    end
-
-    tests("#update_port(#{@port_id})").formats({'port' => @port_format}) do
-      attributes = {:name => 'myport_upd', :fixed_ips => [],
-                    :admin_state_up => true, :device_owner => 'device_owner',
-                    :device_id => 'device_id'}
-      HP[:network].update_port(@port_id, attributes).body
-    end
-
-    tests("#delete_port(#{@port_id})").succeeds do
-      HP[:network].delete_port(@port_id)
-    end
-  end
-
-  tests('failure') do
-    tests('#get_port(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].get_port(0)
-    end
-
-    tests('#update_port(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].update_port(0, {})
-    end
-
-    tests('#delete_port(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].delete_port(0)
-    end
-  end
-
-  # cleanup
-  HP[:network].delete_network(@network_id)
-
-end
diff --git a/tests/hp/requests/network/router_tests.rb b/tests/hp/requests/network/router_tests.rb
deleted file mode 100644
index f0e3c0f..0000000
--- a/tests/hp/requests/network/router_tests.rb
+++ /dev/null
@@ -1,108 +0,0 @@
-Shindo.tests('HP::Network | networking router requests', ['hp', 'networking', 'router']) do
-
-  @router_format = {
-    'id'                    => String,
-    'name'                  => String,
-    'tenant_id'             => String,
-    'status'                => String,
-    'admin_state_up'        => Fog::Boolean,
-    'external_gateway_info' => Fog::Nullable::Hash
-  }
-
-  @router_interface_format = {
-    'subnet_id'  => String,
-    'port_id'    => String
-  }
-
-  n_data = HP[:network].create_network({:name => 'fog_network'}).body['network']
-  @network_id = n_data['id']
-
-  p_data = HP[:network].create_port(@network_id, {:name => 'fog_port'}).body['port']
-  @port_id = p_data['id']
-
-  tests('success') do
-
-    @router_id = nil
-
-    tests('#create_router').formats(@router_format) do
-      attributes = {:name => 'my_router', :admin_state_up => true}
-      data = HP[:network].create_router(attributes).body['router']
-      @router_id = data['id']
-      data
-    end
-
-    tests('#list_routers').formats({'routers' => [@router_format]}) do
-      HP[:network].list_routers.body
-    end
-
-    tests("#get_router(#{@router_id})").formats({'router' => @router_format}) do
-      HP[:network].get_router(@router_id).body
-    end
-
-    tests("#update_router(#{@router_id})").formats({'router' => @router_format}) do
-      attributes = {
-        :name => 'my_router_upd',
-        :external_gateway_info => { :network_id => '11111111111' },
-        :admin_state_up => true
-      }
-      HP[:network].update_router(@router_id, attributes).body
-    end
-
-    tests("#add_router_interface(#{@router_id}, '1111111111', nil) - using subnet_id").formats(@router_interface_format) do
-      HP[:network].add_router_interface(@router_id, '1111111111', nil).body
-    end
-
-    #tests("#remove_router_interface(#{@router_id}, '1111111111', nil) - using subnet_id").formats('') do
-    #  HP[:network].remove_router_interface(@router_id, '1111111111', nil).body
-    #end
-
-    tests("#add_router_interface(#{@router_id}, nil, #{@port_id}) - using port_id").formats(@router_interface_format) do
-      HP[:network].add_router_interface(@router_id, nil, @port_id).body
-    end
-
-    tests("#add_router_interface(#{@router_id}, '1111111111', '2222222222') - using port_id and subnet_id").raises(ArgumentError) do
-      HP[:network].add_router_interface(@router_id, '1111111111', '2222222222').body
-    end
-
-    tests("#remove_router_interface(#{@router_id}, nil, #{@port_id}) - using port_id").formats('') do
-      HP[:network].remove_router_interface(@router_id, nil, @port_id).body
-    end
-
-    tests("#remove_router_interface(#{@router_id}, '1111111111', '2222222222') - using port_id and subnet_id").raises(ArgumentError) do
-      HP[:network].remove_router_interface(@router_id, '1111111111', '2222222222').body
-    end
-
-    tests("#delete_router(#{@router_id})").succeeds do
-      HP[:network].delete_router(@router_id)
-    end
-  end
-
-  tests('failure') do
-    tests('#get_router(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].get_router(0)
-    end
-
-    tests('#update_router(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].update_router(0, {})
-    end
-
-    tests('#delete_router(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].delete_router(0)
-    end
-
-    tests("#add_router_interface(0, '1111111111')").raises(Fog::HP::Network::NotFound) do
-      HP[:network].add_router_interface(0, '1111111111').body
-    end
-
-    tests("#remove_router_interface(0, '1111111111')").raises(Fog::HP::Network::NotFound) do
-      HP[:network].remove_router_interface(0, '1111111111').body
-    end
-
-  end
-
-  # cleanup
-  # remove_router_interface method removes the port
-  #HP[:network].delete_port(@port_id)
-  HP[:network].delete_network(@network_id)
-
-end
diff --git a/tests/hp/requests/network/security_group_rule_tests.rb b/tests/hp/requests/network/security_group_rule_tests.rb
deleted file mode 100644
index 788571c..0000000
--- a/tests/hp/requests/network/security_group_rule_tests.rb
+++ /dev/null
@@ -1,58 +0,0 @@
-Shindo.tests('HP::Network | networking security group rule requests', ['hp', 'networking', 'securitygroup']) do
-
-  @security_group_rule_format = {
-    'id'                    => String,
-    'remote_group_id'       => Fog::Nullable::String,
-    'direction'             => String,
-    'remote_ip_prefix'      => Fog::Nullable::String,
-    'protocol'              => Fog::Nullable::String,
-    'ethertype'             => String,
-    'port_range_max'        => Fog::Nullable::Integer,
-    'port_range_min'        => Fog::Nullable::Integer,
-    'security_group_id'     => String,
-    'tenant_id'             => String
-  }
-
-  tests('success') do
-
-    attributes = {:name => 'my_security_group', :description => 'tests group'}
-    data = HP[:network].create_security_group(attributes).body['security_group']
-    @sec_group_id = data['id']
-
-    @sec_group_rule_id = nil
-
-    tests("#create_security_group_rule(#{@sec_group_id}, 'ingress', attributes)").formats(@security_group_rule_format) do
-      attributes = {:remote_ip_prefix => '0.0.0.0/0', :protocol => 'tcp', :port_range_min => 22, :port_range_max => 22}
-      data = HP[:network].create_security_group_rule(@sec_group_id, 'ingress', attributes).body['security_group_rule']
-      @sec_group_rule_id = data['id']
-      data
-    end
-
-    tests("#get_security_group_rule('#{@sec_group_rule_id}')").formats(@security_group_rule_format) do
-      HP[:network].get_security_group_rule(@sec_group_rule_id).body['security_group_rule']
-    end
-
-    tests("#list_security_group_rules").formats('security_group_rules' => [@security_group_rule_format]) do
-      HP[:network].list_security_group_rules.body
-    end
-
-    tests("#delete_security_group_rule('#{@sec_group_rule_id}')").succeeds do
-      HP[:network].delete_security_group_rule(@sec_group_rule_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests('#get_security_group_rule(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].get_security_group_rule(0)
-    end
-
-    tests('#delete_security_group_rule(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].delete_security_group_rule(0)
-    end
-
-  end
-
-  HP[:network].delete_security_group(@sec_group_id)
-end
diff --git a/tests/hp/requests/network/security_group_tests.rb b/tests/hp/requests/network/security_group_tests.rb
deleted file mode 100644
index 9d00130..0000000
--- a/tests/hp/requests/network/security_group_tests.rb
+++ /dev/null
@@ -1,48 +0,0 @@
-Shindo.tests('HP::Network | networking security group requests', ['hp', 'networking', 'securitygroup']) do
-
-  @security_group_format = {
-    'id'                    => String,
-    'name'                  => String,
-    'description'           => String,
-    'tenant_id'             => String,
-    'security_group_rules'  => [Hash]
-  }
-
-  tests('success') do
-
-    @sec_group_id = nil
-
-    tests("#create_security_group('fog_security_group', 'tests group')").formats(@security_group_format) do
-      attributes = {:name => 'fog_security_group', :description => 'tests group'}
-      data = HP[:network].create_security_group(attributes).body['security_group']
-      @sec_group_id = data['id']
-      data
-    end
-
-    tests("#get_security_group('#{@sec_group_id}')").formats(@security_group_format) do
-      HP[:network].get_security_group(@sec_group_id).body['security_group']
-    end
-
-    tests("#list_security_groups").formats('security_groups' => [@security_group_format]) do
-      HP[:network].list_security_groups.body
-    end
-
-    tests("#delete_security_group('#{@sec_group_id}')").succeeds do
-      HP[:network].delete_security_group(@sec_group_id)
-    end
-
-  end
-
-  tests('failure') do
-
-    tests("#get_security_group(0)").raises(Fog::HP::Network::NotFound) do
-      HP[:network].get_security_group(0)
-    end
-
-    tests("#delete_security_group(0)").raises(Fog::HP::Network::NotFound) do
-      HP[:network].delete_security_group(0)
-    end
-
-  end
-
-end
diff --git a/tests/hp/requests/network/subnet_tests.rb b/tests/hp/requests/network/subnet_tests.rb
deleted file mode 100644
index f03cdb4..0000000
--- a/tests/hp/requests/network/subnet_tests.rb
+++ /dev/null
@@ -1,71 +0,0 @@
-Shindo.tests('HP::Network | networking subnet requests', ['hp', 'networking', 'subnet']) do
-
-  @subnet_format = {
-    'id'               => String,
-    'name'             => Fog::Nullable::String,
-    'network_id'       => String,
-    'cidr'             => String,
-    'ip_version'       => Integer,
-    'gateway_ip'       => Fog::Nullable::String,
-    'allocation_pools' => Fog::Nullable::Array,
-    'dns_nameservers'  => Fog::Nullable::Array,
-    'host_routes'      => Fog::Nullable::Array,
-    'enable_dhcp'      => Fog::Boolean,
-    'tenant_id'        => String,
-  }
-
-  n_data = HP[:network].create_network({:name => 'fog_network'}).body['network']
-  @network_id = n_data['id']
-
-  tests('success') do
-
-    @subnet_id = nil
-
-    tests('#create_subnet').formats(@subnet_format) do
-      attributes = {:name => 'mysubnet', :gateway_ip => '10.0.3.1',
-                    :allocation_pools => [], :dns_nameservers => [],
-                    :host_routes => [], :enable_dhcp => true, :tenant_id => '111111111'}
-      data = HP[:network].create_subnet(@network_id, '10.0.3.0/24', 4, attributes).body['subnet']
-      @subnet_id = data['id']
-      data
-    end
-
-    tests('#list_subnets').formats({'subnets' => [@subnet_format]}) do
-      HP[:network].list_subnets.body
-    end
-
-    tests("#get_subnet(#{@subnet_id})").formats({'subnet' => @subnet_format}) do
-      HP[:network].get_subnet(@subnet_id).body
-    end
-
-    tests("#update_subnet(#{@subnet_id})").formats({'subnet' => @subnet_format}) do
-      attributes = {:name => 'mysubnet_upd',:gateway_ip => '10.0.3.1',
-                          :dns_nameservers => [], :host_routes => [],
-                          :enable_dhcp => true}
-      HP[:network].update_subnet(@subnet_id, attributes).body
-    end
-
-    tests("#delete_subnet(#{@subnet_id})").succeeds do
-      HP[:network].delete_subnet(@subnet_id)
-    end
-
-  end
-
-  tests('failure') do
-    tests('#get_subnet(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].get_subnet(0)
-    end
-
-    tests('#update_subnet(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].update_subnet(0, {})
-    end
-
-    tests('#delete_subnet(0)').raises(Fog::HP::Network::NotFound) do
-      HP[:network].delete_subnet(0)
-    end
-  end
-
-  # cleanup
-  HP[:network].delete_network(@network_id)
-
-end
diff --git a/tests/hp/requests/storage/container_tests.rb b/tests/hp/requests/storage/container_tests.rb
deleted file mode 100644
index 5998e4d..0000000
--- a/tests/hp/requests/storage/container_tests.rb
+++ /dev/null
@@ -1,86 +0,0 @@
-Shindo.tests("Fog::Storage[:hp] | container requests", ['hp']) do
-
-  @container_format = [String]
-
-  @containers_format = [{
-    'bytes' => Integer,
-    'count' => Integer,
-    'name'  => String
-  }]
-
-  tests('success') do
-
-    tests("#put_container('fogcontainertests')").succeeds do
-      Fog::Storage[:hp].put_container('fogcontainertests')
-    end
-
-    tests("#post_container('fogcontainertests', {'X-Container-Meta-Foo' => 'foometa'})").succeeds do
-      Fog::Storage[:hp].post_container('fogcontainertests', {'X-Container-Meta-Foo' => 'foometa'})
-    end
-
-    tests("#get_container('fogcontainertests')").formats(@container_format) do
-      Fog::Storage[:hp].get_container('fogcontainertests').body
-    end
-
-    tests("#get_containers").formats(@containers_format) do
-      Fog::Storage[:hp].get_containers.body
-    end
-
-    tests("#head_container('fogcontainertests')").succeeds do
-      Fog::Storage[:hp].head_container('fogcontainertests')
-    end
-
-    tests("#head_containers").succeeds do
-      Fog::Storage[:hp].head_containers
-    end
-
-    tests("#delete_container('fogcontainertests')").succeeds do
-      Fog::Storage[:hp].delete_container('fogcontainertests')
-    end
-
-    tests("#put_container('fogacltests', {'X-Container-Read' => 'private'})").succeeds do
-      Fog::Storage[:hp].put_container('fogacltests', {'X-Container-Read' => 'private'})
-    end
-    Fog::Storage[:hp].delete_container('fogacltests')
-
-    tests("#put_container('fogacltests', {'X-Container-Read' => 'public-read'})").succeeds do
-      Fog::Storage[:hp].put_container('fogacltests', {'X-Container-Read' => 'public-read'})
-    end
-    Fog::Storage[:hp].delete_container('fogacltests')
-
-    tests("#put_container('fogacltests', {'X-Container-Read' => 'invalid'})").succeeds do
-      Fog::Storage[:hp].put_container('fogacltests', {'X-Container-Read' => 'invalid'})
-    end
-    Fog::Storage[:hp].delete_container('fogacltests')
-
-  end
-
-  tests('failure') do
-
-    tests("#get_container('fognoncontainer')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].get_container('fognoncontainer')
-    end
-
-    tests("#post_container('fognoncontainer', {})").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].post_container('fognoncontainer', {})
-    end
-
-    tests("#head_container('fognoncontainer')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].head_container('fognoncontainer')
-    end
-
-    tests("#delete_container('fognoncontainer')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].delete_container('fognoncontainer')
-    end
-
-    @container = Fog::Storage[:hp].directories.create(:key => 'fognonempty')
-    @file = @container.files.create(:key => 'foo', :body => 'bar')
-    tests("#delete_container('fognonempty')").raises(Excon::Errors::Conflict) do
-      Fog::Storage[:hp].delete_container('fognonempty')
-    end
-    @file.destroy
-    @container.destroy
-
-  end
-
-end
diff --git a/tests/hp/requests/storage/object_tests.rb b/tests/hp/requests/storage/object_tests.rb
deleted file mode 100644
index 70c3f4e..0000000
--- a/tests/hp/requests/storage/object_tests.rb
+++ /dev/null
@@ -1,121 +0,0 @@
-Shindo.tests("Fog::Storage[:hp] | object requests", ['hp', 'storage']) do
-
-  @directory = Fog::Storage[:hp].directories.create(:key => 'fogobjecttests')
-  @dir_name = @directory.identity
-
-  tests('success') do
-
-    tests("#put_object('#{@dir_name}', 'fog_object')").succeeds do
-      Fog::Storage[:hp].put_object(@dir_name, 'fog_object', lorem_file)
-    end
-
-    tests("#post_object('#{@dir_name}', 'fog_object', {'X-Object-Meta-Foo' => 'foometa'})").succeeds do
-      Fog::Storage[:hp].post_object(@dir_name, 'fog_object', {'X-Object-Meta-Foo' => 'foometa'})
-    end
-
-    tests("#get_object('#{@dir_name}', 'fog_object')").succeeds do
-      Fog::Storage[:hp].get_object(@dir_name, 'fog_object')
-    end
-
-    tests("#get_object('#{@dir_name}', 'fog_object', &block)").returns(lorem_file.read) do
-      data = ''
-      Fog::Storage[:hp].get_object(@dir_name, 'fog_object') do |chunk, remaining_bytes, total_bytes|
-        data << chunk
-      end
-      data
-    end
-
-    tests("#head_object('#{@dir_name}', 'fog_object')").succeeds do
-      Fog::Storage[:hp].head_object(@dir_name, 'fog_object')
-    end
-
-    tests("#get_object_temp_url('#{@dir_name}', 'fog_object', 60, 'GET')").succeeds do
-      Fog::Storage[:hp].get_object_temp_url(@dir_name, 'fog_object', 60, 'GET')
-    end
-
-    # copy a file within the same container
-    tests("#put_object('#{@dir_name}', 'fog_other_object', nil, {'X-Copy-From' => '/#{@dir_name}/fog_object'})" ).succeeds do
-      Fog::Storage[:hp].put_object(@dir_name, 'fog_other_object', nil, {'X-Copy-From' => "/#{@dir_name}/fog_object"})
-    end
-    @directory.files.get('fog_other_object').destroy
-
-    # copy a file from one container to another
-    @another_dir = Fog::Storage[:hp].directories.create(:key => 'fogobjecttests2')
-    tests("#put_object('#{@another_dir.identity}', 'fog_another_object', nil, {'X-Copy-From' => '/#{@dir_name}/fog_object'})" ).succeeds do
-      Fog::Storage[:hp].put_object(@another_dir.identity, 'fog_another_object', nil, {'X-Copy-From' => "/#{@dir_name}/fog_object"})
-    end
-    @another_dir.files.get('fog_another_object').destroy
-    @another_dir.destroy
-
-    tests("#post_object('#{@dir_name}', 'fog_delete_object', {'X-Delete-After' => 40})" ).succeeds do
-      Fog::Storage[:hp].put_object(@dir_name, 'fog_delete_object', lorem_file)
-      Fog::Storage[:hp].post_object(@dir_name, 'fog_delete_object', {'X-Delete-After' => 40})
-    end
-
-    tests("#delete_object('#{@dir_name}', 'fog_object')").succeeds do
-      Fog::Storage[:hp].delete_object(@dir_name, 'fog_object')
-      Fog::Storage[:hp].delete_object(@dir_name, 'fog_delete_object')
-    end
-
-    tests("#get_object_http_url('#{@directory.identity}', 'fog_object', expiration timestamp)").returns(true) do
-      object_url = Fog::Storage[:hp].get_object_http_url(@dir_name, 'fog_object', (Time.now + 60))
-      object_url.include? "fog_object"
-      object_url.include? "&temp_url_expires="
-      object_url.include? "temp_url_sig="
-      object_url.include? @dir_name
-      object_url.start_with? "http://"
-    end
-
-    tests("#get_object_https_url('#{@directory.identity}', 'fog_object', expiration timestamp)").returns(true) do
-      object_url = Fog::Storage[:hp].get_object_https_url(@dir_name, 'fog_object', (Time.now + 60))
-      object_url.include? "fog_object"
-      object_url.include? "&temp_url_expires="
-      object_url.include? "temp_url_sig="
-      object_url.include? @dir_name
-      object_url.start_with? "https://"
-    end
-  end
-
-  tests('failure') do
-
-    tests("#put_object('fognoncontainer', 'fog_object')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].put_object('fognoncontainer', 'fog_object', lorem_file)
-    end
-
-    tests("#post_object('fognoncontainer', 'fog_object')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].post_object('fognoncontainer', 'fog_object')
-    end
-
-    tests("#get_object('#{@dir_name}', 'fog_non_object')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].get_object(@dir_name, 'fog_non_object')
-    end
-
-    tests("#get_object('fognoncontainer', 'fog_non_object')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].get_object('fognoncontainer', 'fog_non_object')
-    end
-
-    tests("#get_object_temp_url('#{@dir_name}', 'fog_object', 60, 'POST')").raises(ArgumentError) do
-      Fog::Storage[:hp].get_object_temp_url(@dir_name, 'fog_object', 60, 'POST')
-    end
-
-    tests("#head_object('#{@dir_name}', 'fog_non_object')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].head_object(@dir_name, 'fog_non_object')
-    end
-
-    tests("#head_object('fognoncontainer', 'fog_non_object')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].head_object('fognoncontainer', 'fog_non_object')
-    end
-
-    tests("#delete_object('#{@dir_name}', 'fog_non_object')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].delete_object(@dir_name, 'fog_non_object')
-    end
-
-    tests("#delete_object('fognoncontainer', 'fog_non_object')").raises(Fog::Storage::HP::NotFound) do
-      Fog::Storage[:hp].delete_object('fognoncontainer', 'fog_non_object')
-    end
-
-  end
-
-  @directory.destroy
-
-end
diff --git a/tests/hp/storage_tests.rb b/tests/hp/storage_tests.rb
deleted file mode 100644
index 48c0536..0000000
--- a/tests/hp/storage_tests.rb
+++ /dev/null
@@ -1,28 +0,0 @@
-unless ENV["FOG_MOCK"] == "true"
-  Shindo.tests('Fog::Storage::HP', ['hp', 'storage']) do
-    credentials = {
-      :auth_token       => 'auth_token',
-      :endpoint_url     => 'http://127.0.0.1/path/',
-      :cdn_endpoint_url => 'http://127.0.0.1/cdnpath/',
-      :service_catalog  => {
-        :"Object Storage" => {
-          :zone => 'http://127.0.0.1/path/'},
-        :"CDN"            => {
-          :zone => 'http://127.0.0.1/cdnpath/'}},
-      :expires          => (DateTime.now + 1).to_s
-    }
-    options     = {
-      :hp_access_key => 'key',
-      :hp_secret_key => 'secret',
-      :hp_tenant_id  => 'tenant',
-      :hp_avl_zone   => 'zone',
-      :hp_auth_uri   => 'https://region-a.geo-1.identity.hpcloudsvc.com:35357/v2.0/tokens',
-      :credentials   => credentials
-    }
-    tests('Test cached Storage credentials').returns(credentials) do
-
-      conn = Fog::Storage::HP::Real.new(options)
-      conn.credentials
-    end
-  end
-end
diff --git a/tests/hp/user_agent_tests.rb b/tests/hp/user_agent_tests.rb
deleted file mode 100644
index 0807cdb..0000000
--- a/tests/hp/user_agent_tests.rb
+++ /dev/null
@@ -1,13 +0,0 @@
-Shindo.tests('Fog::Compute[:hp] | user agent', ['hp', 'user_agent']) do
-  tests('default for HP providers').returns("hpfog/#{Fog::HP::VERSION}") do
-    pending if Fog.mocking?
-    conn = Fog::Compute[:hp]
-    conn.instance_variable_get(:@connection_options)[:headers]['User-Agent']
-  end
-
-  tests('overriden by clients').returns("hpfog/#{Fog::HP::VERSION} (TesterClient/1.0.0)") do
-    pending if Fog.mocking?
-    conn = Fog::Compute::HP.new(:user_agent => "TesterClient/1.0.0")
-    conn.instance_variable_get(:@connection_options)[:headers]['User-Agent']
-  end
-end
-- 
2.10.0

